
te.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003618  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00800060  00003618  000036ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000026f  00800116  00800116  00003762  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00003762  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000622  00000000  00000000  00003782  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000027cc  00000000  00000000  00003da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000336  00000000  00000000  00006570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001eac  00000000  00000000  000068a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  00008754  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000083b  00000000  00000000  000089f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001693  00000000  00000000  0000922f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004f8  00000000  00000000  0000a8c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__ctors_end>
       4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
       8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
       c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      10:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      14:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      18:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      1c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      20:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      24:	0c 94 c9 0e 	jmp	0x1d92	; 0x1d92 <__vector_9>
      28:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      30:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      34:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      38:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      3c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      40:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      44:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      48:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      4c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      50:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

00000054 <Text_Main_Menu_Select>:
      54:	20 20 20 20 c2 fb e1 e5 f0 e8 f2 e5 20 20 20 20         ........    
	...

00000066 <Text_Main_Memory_Test>:
      66:	20 20 20 d2 e5 f1 f2 20 ef e0 ec ff f2 e8 20 20        .... ......  
	...

00000078 <Text_Main_Memory_Test_Error>:
      78:	20 ce f8 e8 e1 ea e0 20 ef e0 ec ff f2 e8 20 21      ...... ...... !
	...

0000008a <Text_Main_Memory_Test_OK>:
      8a:	cf e0 ec ff f2 fc 20 e8 f1 ef f0 e0 e2 ed e0 20     ...... ........ 
	...

0000009c <Text_Tape_Menu_No_Image>:
      9c:	cd e5 f2 20 f4 e0 e9 eb ee e2 20 74 61 70 20 21     ... ...... tap !
	...

000000ae <RusCodeTable>:
      ae:	c0 41 c1 a0 c2 42 c3 a1 c4 e0 c5 45 a8 a2 c6 a3     .A...B.....E....
      be:	c7 a4 c8 a5 c9 a6 ca 4b cb a7 cc 4d cd 48 ce 4f     .......K...M.H.O
      ce:	cf a8 d0 50 d1 43 d2 54 d3 a9 d4 aa d5 58 d6 e1     ...P.C.T.....X..
      de:	d7 ab d8 ac d9 e2 da ad db ae dc 62 dd af de b0     ...........b....
      ee:	df b1 e0 61 e1 b2 e2 b3 e3 b4 e4 e3 e5 65 b8 b5     ...a.........e..
      fe:	e6 b6 e7 b7 e8 b8 e9 b9 ea ba eb bb ec bc ed bd     ................
     10e:	ee 6f ef be f0 70 f1 63 f2 bf f3 79 f4 e4 f5 78     .o...p.c...y...x
     11e:	f6 e5 f7 c0 f8 c1 f9 e6 fa c2 fb c3 fc c4 fd c5     ................
     12e:	fe c6 ff c7                                         ....

00000132 <Text_SD_No_SPI_Up>:
     132:	ca e0 f0 f2 e0 20 ef e0 ec ff f2 e8 20 ed e5 20     ..... ...... .. 
	...

00000144 <Text_SD_No_SPI_Down>:
     144:	ef ee e4 e4 e5 f0 e6 e8 e2 e0 e5 f2 20 53 50 49     ............ SPI
	...

00000156 <Text_SD_No_Response>:
     156:	ca e0 f0 f2 e0 20 ec ee eb f7 e8 f2 21 20 20 20     ..... ......!   
	...

00000168 <Text_SD_Size_Error_Up>:
     168:	ce e1 fa e5 ec 20 53 44 2d ea e0 f0 f2 fb 20 20     ..... SD-.....  
	...

0000017a <Text_SD_Size_Error_Down>:
     17a:	ed e5 20 ee ef f0 e5 e4 e5 eb e5 ed 21 20 20 20     .. .........!   
	...

0000018c <Text_SD_Size>:
     18c:	ce e1 fa e5 ec 20 53 44 2d ea e0 f0 f2 fb 20 20     ..... SD-.....  
	...

0000019e <Text_FAT_Type>:
     19e:	d2 e8 ef 20 f4 2e 20 f1 e8 f1 f2 e5 ec fb 20 20     ... .. .......  
	...

000001b0 <Text_FAT32>:
     1b0:	46 41 54 33 32 2d 20 ee f8 e8 e1 ea e0 21 20 20     FAT32- ......!  
	...

000001c2 <Text_FAT16>:
     1c2:	46 41 54 31 36 2d 20 ee ea 2e 20 20 20 20 20 20     FAT16- ...      
	...

000001d4 <Text_FAT12>:
     1d4:	46 41 54 31 32 2d 20 ee f8 e8 e1 ea e0 21 20 20     FAT12- ......!  
	...

000001e6 <__ctors_end>:
     1e6:	11 24       	eor	r1, r1
     1e8:	1f be       	out	0x3f, r1	; 63
     1ea:	cf e5       	ldi	r28, 0x5F	; 95
     1ec:	d4 e0       	ldi	r29, 0x04	; 4
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_copy_data>:
     1f2:	11 e0       	ldi	r17, 0x01	; 1
     1f4:	a0 e6       	ldi	r26, 0x60	; 96
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	e8 e1       	ldi	r30, 0x18	; 24
     1fa:	f6 e3       	ldi	r31, 0x36	; 54
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <.do_copy_data_start>

000001fe <.do_copy_data_loop>:
     1fe:	05 90       	lpm	r0, Z+
     200:	0d 92       	st	X+, r0

00000202 <.do_copy_data_start>:
     202:	a6 31       	cpi	r26, 0x16	; 22
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <.do_copy_data_loop>

00000208 <__do_clear_bss>:
     208:	13 e0       	ldi	r17, 0x03	; 3
     20a:	a6 e1       	ldi	r26, 0x16	; 22
     20c:	b1 e0       	ldi	r27, 0x01	; 1
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	a5 38       	cpi	r26, 0x85	; 133
     214:	b1 07       	cpc	r27, r17
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	0e 94 90 16 	call	0x2d20	; 0x2d20 <main>
     21c:	0c 94 0a 1b 	jmp	0x3614	; 0x3614 <_exit>

00000220 <__bad_interrupt>:
     220:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000224 <DRAM_Init>:
//инициализация дисплея
//----------------------------------------------------------------------------------------------------
void DRAM_Init(void)
{
 //настроим порты 
 DRAM_RAS_DDR|=(1<<DRAM_RAS);
     224:	8d 9a       	sbi	0x11, 5	; 17
 DRAM_CAS_DDR|=(1<<DRAM_CAS);
     226:	8f 9a       	sbi	0x11, 7	; 17
 DRAM_WE_DDR|=(1<<DRAM_WE);
     228:	8e 9a       	sbi	0x11, 6	; 17
 DRAM_OE_DDR|=(1<<DRAM_OE);
     22a:	a0 9a       	sbi	0x14, 0	; 20
 
 DRAM_A0_A7_DDR=0xff;
     22c:	8f ef       	ldi	r24, 0xFF	; 255
     22e:	8a bb       	out	0x1a, r24	; 26
 DRAM_A8_DDR|=(1<<DRAM_A8); 
     230:	a1 9a       	sbi	0x14, 1	; 20
  
 DRAM_D1_D4_DDR&=0xff^(DRAM_D1_D4_MASK);
     232:	87 b3       	in	r24, 0x17	; 23
     234:	80 7f       	andi	r24, 0xF0	; 240
     236:	87 bb       	out	0x17, r24	; 23
 //переводим все сигналы управления памятью в неактивное состояние
 DRAM_RAS_PORT|=(1<<DRAM_RAS);
     238:	95 9a       	sbi	0x12, 5	; 18
 DRAM_CAS_PORT|=(1<<DRAM_CAS);
     23a:	97 9a       	sbi	0x12, 7	; 18
 DRAM_WE_PORT|=(1<<DRAM_WE);
     23c:	96 9a       	sbi	0x12, 6	; 18
 DRAM_OE_PORT|=(1<<DRAM_OE);
     23e:	a8 9a       	sbi	0x15, 0	; 21
}
     240:	08 95       	ret

00000242 <DRAM_Refresh>:
//произвести цикл скрытой регенерации
//----------------------------------------------------------------------------------------------------
void DRAM_Refresh(void)
{
 //даём сигнал регенерации
 DRAM_CAS_PORT&=0xff^(1<<DRAM_CAS);
     242:	97 98       	cbi	0x12, 7	; 18
 asm volatile ("nop"::);
     244:	00 00       	nop
 asm volatile ("nop"::);
     246:	00 00       	nop
 DRAM_RAS_PORT&=0xff^(1<<DRAM_RAS);
     248:	95 98       	cbi	0x12, 5	; 18
	...
 asm volatile ("nop"::);
 asm volatile ("nop"::);
 asm volatile ("nop"::);
 asm volatile ("nop"::);
 DRAM_CAS_PORT|=(1<<DRAM_CAS);
     252:	97 9a       	sbi	0x12, 7	; 18
 asm volatile ("nop"::);
     254:	00 00       	nop
 asm volatile ("nop"::);
     256:	00 00       	nop
 DRAM_RAS_PORT|=(1<<DRAM_RAS);
     258:	95 9a       	sbi	0x12, 5	; 18
}
     25a:	08 95       	ret

0000025c <DRAM_ReadNibble>:
//----------------------------------------------------------------------------------------------------
//считать ниббл
//----------------------------------------------------------------------------------------------------
unsigned char DRAM_ReadNibble(unsigned long addr,bool nibble_one)
{
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
 //шина данных - на чтение
 DRAM_D1_D4_DDR&=0xff^(DRAM_D1_D4_MASK);
     260:	27 b3       	in	r18, 0x17	; 23
     262:	20 7f       	andi	r18, 0xF0	; 240
     264:	27 bb       	out	0x17, r18	; 23
 DRAM_OE_PORT|=1<<DRAM_OE;
     266:	a8 9a       	sbi	0x15, 0	; 21
 //выставляем младшую часть адреса 
 DRAM_A0_A7_PORT=(addr&0xff);
     268:	6b bb       	out	0x1b, r22	; 27
 DRAM_A8_PORT&=0xff^(1<<DRAM_A8);
     26a:	a9 98       	cbi	0x15, 1	; 21
 DRAM_A8_PORT|=(((addr>>16)&0x01)<<DRAM_A8);
     26c:	55 b3       	in	r21, 0x15	; 21
     26e:	8c 01       	movw	r16, r24
     270:	22 27       	eor	r18, r18
     272:	33 27       	eor	r19, r19
     274:	01 70       	andi	r16, 0x01	; 1
     276:	00 0f       	add	r16, r16
     278:	05 2b       	or	r16, r21
     27a:	05 bb       	out	0x15, r16	; 21
 //даём сигнал RAS
 DRAM_RAS_PORT&=0xff^(1<<DRAM_RAS);
     27c:	95 98       	cbi	0x12, 5	; 18
 //выставляем старшую часть адреса
 DRAM_A0_A7_PORT=(addr>>8)&0xff;
     27e:	67 2f       	mov	r22, r23
     280:	78 2f       	mov	r23, r24
     282:	89 2f       	mov	r24, r25
     284:	99 27       	eor	r25, r25
     286:	6b bb       	out	0x1b, r22	; 27
 DRAM_A8_PORT&=0xff^(1<<DRAM_A8);
     288:	a9 98       	cbi	0x15, 1	; 21
 if (nibble_one==false) DRAM_A8_PORT|=1<<DRAM_A8;
     28a:	44 23       	and	r20, r20
     28c:	09 f4       	brne	.+2      	; 0x290 <DRAM_ReadNibble+0x34>
     28e:	a9 9a       	sbi	0x15, 1	; 21
 //даём сигнал CAS
 DRAM_CAS_PORT&=0xff^(1<<DRAM_CAS); 
     290:	97 98       	cbi	0x12, 7	; 18
 asm volatile ("nop"::);
     292:	00 00       	nop
 asm volatile ("nop"::);
     294:	00 00       	nop
 //считываем данные
 DRAM_OE_PORT&=0xff^(1<<DRAM_OE);
     296:	a8 98       	cbi	0x15, 0	; 21
 asm volatile ("nop"::);
     298:	00 00       	nop
 asm volatile ("nop"::);
     29a:	00 00       	nop
 
 unsigned char byte=(DRAM_D1_D4_PIN&0x0f);
     29c:	86 b3       	in	r24, 0x16	; 22
 DRAM_OE_PORT|=1<<DRAM_OE;
     29e:	a8 9a       	sbi	0x15, 0	; 21
 //снимаем сигнал CAS
 DRAM_CAS_PORT|=(1<<DRAM_CAS); 
     2a0:	97 9a       	sbi	0x12, 7	; 18
 //снимаем сигнал CAS
 DRAM_CAS_PORT|=(1<<DRAM_CAS);
     2a2:	97 9a       	sbi	0x12, 7	; 18
 //снимаем сигнал RAS
 DRAM_RAS_PORT|=(1<<DRAM_RAS);
     2a4:	95 9a       	sbi	0x12, 5	; 18
 return(byte);
}
     2a6:	8f 70       	andi	r24, 0x0F	; 15
     2a8:	1f 91       	pop	r17
     2aa:	0f 91       	pop	r16
     2ac:	08 95       	ret

000002ae <DRAM_WriteNibble>:
//----------------------------------------------------------------------------------------------------
//записать ниббл
//----------------------------------------------------------------------------------------------------
void DRAM_WriteNibble(unsigned long addr,unsigned char nibble,bool nibble_one)
{
     2ae:	ef 92       	push	r14
     2b0:	ff 92       	push	r15
     2b2:	0f 93       	push	r16
     2b4:	1f 93       	push	r17
 DRAM_OE_PORT|=1<<DRAM_OE;
     2b6:	a8 9a       	sbi	0x15, 0	; 21
 //шина данных - на запись
 DRAM_D1_D4_DDR|=DRAM_D1_D4_MASK;
     2b8:	37 b3       	in	r19, 0x17	; 23
     2ba:	3f 60       	ori	r19, 0x0F	; 15
     2bc:	37 bb       	out	0x17, r19	; 23
 //выставляем младшую часть адреса
 DRAM_A0_A7_PORT=(addr&0xff); 
     2be:	6b bb       	out	0x1b, r22	; 27
 DRAM_A8_PORT&=0xff^(1<<DRAM_A8);
     2c0:	a9 98       	cbi	0x15, 1	; 21
 DRAM_A8_PORT|=(((addr>>16)&0x01)<<DRAM_A8);
     2c2:	35 b3       	in	r19, 0x15	; 21
     2c4:	7c 01       	movw	r14, r24
     2c6:	00 27       	eor	r16, r16
     2c8:	11 27       	eor	r17, r17
     2ca:	51 e0       	ldi	r21, 0x01	; 1
     2cc:	e5 22       	and	r14, r21
     2ce:	ee 0c       	add	r14, r14
     2d0:	e3 2a       	or	r14, r19
     2d2:	e5 ba       	out	0x15, r14	; 21
 //даём сигнал RAS
 DRAM_RAS_PORT&=0xff^(1<<DRAM_RAS);
     2d4:	95 98       	cbi	0x12, 5	; 18
 asm volatile ("nop"::);
     2d6:	00 00       	nop
 //включаем сигнал записи
 DRAM_WE_PORT&=0xff^(1<<DRAM_WE);	 
     2d8:	96 98       	cbi	0x12, 6	; 18
 asm volatile ("nop"::);
     2da:	00 00       	nop
 //выставляем старшую часть адреса
 DRAM_A0_A7_PORT=(addr>>8)&0xff; 
     2dc:	67 2f       	mov	r22, r23
     2de:	78 2f       	mov	r23, r24
     2e0:	89 2f       	mov	r24, r25
     2e2:	99 27       	eor	r25, r25
     2e4:	6b bb       	out	0x1b, r22	; 27
 DRAM_A8_PORT&=0xff^(1<<DRAM_A8);
     2e6:	a9 98       	cbi	0x15, 1	; 21
 if (nibble_one==false) DRAM_A8_PORT|=1<<DRAM_A8;
     2e8:	22 23       	and	r18, r18
     2ea:	09 f4       	brne	.+2      	; 0x2ee <DRAM_WriteNibble+0x40>
     2ec:	a9 9a       	sbi	0x15, 1	; 21
 //задаём данные
 DRAM_D1_D4_PORT&=0xff^(DRAM_D1_D4_MASK);
     2ee:	88 b3       	in	r24, 0x18	; 24
     2f0:	80 7f       	andi	r24, 0xF0	; 240
     2f2:	88 bb       	out	0x18, r24	; 24
 DRAM_D1_D4_PORT|=nibble&0x0f;
     2f4:	88 b3       	in	r24, 0x18	; 24
     2f6:	4f 70       	andi	r20, 0x0F	; 15
     2f8:	84 2b       	or	r24, r20
     2fa:	88 bb       	out	0x18, r24	; 24
 //даём сигнал CAS
 DRAM_CAS_PORT&=0xff^(1<<DRAM_CAS);
     2fc:	97 98       	cbi	0x12, 7	; 18
 asm volatile ("nop"::);
     2fe:	00 00       	nop
 asm volatile ("nop"::);
     300:	00 00       	nop
 //снимаем сигнал записи
 DRAM_WE_PORT|=(1<<DRAM_WE);
     302:	96 9a       	sbi	0x12, 6	; 18
 //снимаем сигнал CAS
 DRAM_CAS_PORT|=(1<<DRAM_CAS); 
     304:	97 9a       	sbi	0x12, 7	; 18
 //снимаем сигнал RAS
 DRAM_RAS_PORT|=(1<<DRAM_RAS);
     306:	95 9a       	sbi	0x12, 5	; 18
}
     308:	1f 91       	pop	r17
     30a:	0f 91       	pop	r16
     30c:	ff 90       	pop	r15
     30e:	ef 90       	pop	r14
     310:	08 95       	ret

00000312 <DRAM_ReadByte>:

//----------------------------------------------------------------------------------------------------
//считать байт
//----------------------------------------------------------------------------------------------------
unsigned char DRAM_ReadByte(unsigned long addr)
{
     312:	df 92       	push	r13
     314:	ef 92       	push	r14
     316:	ff 92       	push	r15
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	7b 01       	movw	r14, r22
     31e:	8c 01       	movw	r16, r24
 unsigned char byte=DRAM_ReadNibble(addr,false);
     320:	40 e0       	ldi	r20, 0x00	; 0
     322:	0e 94 2e 01 	call	0x25c	; 0x25c <DRAM_ReadNibble>
 byte<<=4;
     326:	d8 2e       	mov	r13, r24
     328:	d2 94       	swap	r13
     32a:	f0 ef       	ldi	r31, 0xF0	; 240
     32c:	df 22       	and	r13, r31
 byte|=DRAM_ReadNibble(addr,true);
     32e:	c8 01       	movw	r24, r16
     330:	b7 01       	movw	r22, r14
     332:	41 e0       	ldi	r20, 0x01	; 1
     334:	0e 94 2e 01 	call	0x25c	; 0x25c <DRAM_ReadNibble>
 return(byte);
}
     338:	8d 29       	or	r24, r13
     33a:	1f 91       	pop	r17
     33c:	0f 91       	pop	r16
     33e:	ff 90       	pop	r15
     340:	ef 90       	pop	r14
     342:	df 90       	pop	r13
     344:	08 95       	ret

00000346 <DRAM_WriteByte>:
//----------------------------------------------------------------------------------------------------
//записать байт
//----------------------------------------------------------------------------------------------------
void DRAM_WriteByte(unsigned long addr,unsigned char byte)
{
     346:	df 92       	push	r13
     348:	ef 92       	push	r14
     34a:	ff 92       	push	r15
     34c:	0f 93       	push	r16
     34e:	1f 93       	push	r17
     350:	7b 01       	movw	r14, r22
     352:	8c 01       	movw	r16, r24
     354:	d4 2e       	mov	r13, r20
 DRAM_WriteNibble(addr,byte>>4,false);
     356:	42 95       	swap	r20
     358:	4f 70       	andi	r20, 0x0F	; 15
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	0e 94 57 01 	call	0x2ae	; 0x2ae <DRAM_WriteNibble>
 DRAM_WriteNibble(addr,byte&0x0f,true);
     360:	8f e0       	ldi	r24, 0x0F	; 15
     362:	d8 22       	and	r13, r24
     364:	c8 01       	movw	r24, r16
     366:	b7 01       	movw	r22, r14
     368:	4d 2d       	mov	r20, r13
     36a:	21 e0       	ldi	r18, 0x01	; 1
     36c:	0e 94 57 01 	call	0x2ae	; 0x2ae <DRAM_WriteNibble>
}
     370:	1f 91       	pop	r17
     372:	0f 91       	pop	r16
     374:	ff 90       	pop	r15
     376:	ef 90       	pop	r14
     378:	df 90       	pop	r13
     37a:	08 95       	ret

0000037c <WH1602_SendNibble>:
//----------------------------------------------------------------------------------------------------
//послать ниббл
//----------------------------------------------------------------------------------------------------
void WH1602_SendNibble(unsigned char nibble)
{ 
 WH1602_DB7_PORT&=0xff^(1<<WH1602_DB7);
     37c:	ad 98       	cbi	0x15, 5	; 21
 WH1602_DB6_PORT&=0xff^(1<<WH1602_DB6);
     37e:	ac 98       	cbi	0x15, 4	; 21
 WH1602_DB5_PORT&=0xff^(1<<WH1602_DB5);
     380:	ab 98       	cbi	0x15, 3	; 21
 WH1602_DB4_PORT&=0xff^(1<<WH1602_DB4);
     382:	aa 98       	cbi	0x15, 2	; 21
 WH1602_E_PORT|=(1<<WH1602_E); 
     384:	ae 9a       	sbi	0x15, 6	; 21
 WH1602_DB7_PORT|=(((nibble>>3)&0x01)<<WH1602_DB7);
     386:	45 b3       	in	r20, 0x15	; 21
     388:	28 2f       	mov	r18, r24
     38a:	26 95       	lsr	r18
     38c:	26 95       	lsr	r18
     38e:	26 95       	lsr	r18
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	21 70       	andi	r18, 0x01	; 1
     394:	30 70       	andi	r19, 0x00	; 0
     396:	55 e0       	ldi	r21, 0x05	; 5
     398:	22 0f       	add	r18, r18
     39a:	33 1f       	adc	r19, r19
     39c:	5a 95       	dec	r21
     39e:	e1 f7       	brne	.-8      	; 0x398 <WH1602_SendNibble+0x1c>
     3a0:	42 2b       	or	r20, r18
     3a2:	45 bb       	out	0x15, r20	; 21
 WH1602_DB6_PORT|=(((nibble>>2)&0x01)<<WH1602_DB6);
     3a4:	45 b3       	in	r20, 0x15	; 21
     3a6:	28 2f       	mov	r18, r24
     3a8:	26 95       	lsr	r18
     3aa:	26 95       	lsr	r18
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	21 70       	andi	r18, 0x01	; 1
     3b0:	30 70       	andi	r19, 0x00	; 0
     3b2:	94 e0       	ldi	r25, 0x04	; 4
     3b4:	22 0f       	add	r18, r18
     3b6:	33 1f       	adc	r19, r19
     3b8:	9a 95       	dec	r25
     3ba:	e1 f7       	brne	.-8      	; 0x3b4 <WH1602_SendNibble+0x38>
     3bc:	42 2b       	or	r20, r18
     3be:	45 bb       	out	0x15, r20	; 21
 WH1602_DB5_PORT|=(((nibble>>1)&0x01)<<WH1602_DB5);
     3c0:	45 b3       	in	r20, 0x15	; 21
     3c2:	28 2f       	mov	r18, r24
     3c4:	26 95       	lsr	r18
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	21 70       	andi	r18, 0x01	; 1
     3ca:	30 70       	andi	r19, 0x00	; 0
     3cc:	b3 e0       	ldi	r27, 0x03	; 3
     3ce:	22 0f       	add	r18, r18
     3d0:	33 1f       	adc	r19, r19
     3d2:	ba 95       	dec	r27
     3d4:	e1 f7       	brne	.-8      	; 0x3ce <WH1602_SendNibble+0x52>
     3d6:	42 2b       	or	r20, r18
     3d8:	45 bb       	out	0x15, r20	; 21
 WH1602_DB4_PORT|=(((nibble>>0)&0x01)<<WH1602_DB4);
     3da:	25 b3       	in	r18, 0x15	; 21
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	81 70       	andi	r24, 0x01	; 1
     3e0:	90 70       	andi	r25, 0x00	; 0
     3e2:	88 0f       	add	r24, r24
     3e4:	99 1f       	adc	r25, r25
     3e6:	88 0f       	add	r24, r24
     3e8:	99 1f       	adc	r25, r25
     3ea:	28 2b       	or	r18, r24
     3ec:	25 bb       	out	0x15, r18	; 21
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3ee:	80 e9       	ldi	r24, 0x90	; 144
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	fc 01       	movw	r30, r24
     3f4:	31 97       	sbiw	r30, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <WH1602_SendNibble+0x78>
 _delay_us(100); 
 WH1602_E_PORT&=0xff^(1<<WH1602_E);
     3f8:	ae 98       	cbi	0x15, 6	; 21
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <WH1602_SendNibble+0x7e>
 _delay_us(100); 
}
     3fe:	08 95       	ret

00000400 <WH1602_SendData>:
//----------------------------------------------------------------------------------------------------
//послать данные
//----------------------------------------------------------------------------------------------------
void WH1602_SendData(unsigned char byte)
{
     400:	1f 93       	push	r17
     402:	18 2f       	mov	r17, r24
 WH1602_RS_PORT|=1<<WH1602_RS;//запись данных  
     404:	af 9a       	sbi	0x15, 7	; 21
 WH1602_SendNibble(byte>>4);
     406:	82 95       	swap	r24
     408:	8f 70       	andi	r24, 0x0F	; 15
     40a:	0e 94 be 01 	call	0x37c	; 0x37c <WH1602_SendNibble>
 WH1602_SendNibble(byte&0x0f);
     40e:	81 2f       	mov	r24, r17
     410:	8f 70       	andi	r24, 0x0F	; 15
     412:	0e 94 be 01 	call	0x37c	; 0x37c <WH1602_SendNibble>
}
     416:	1f 91       	pop	r17
     418:	08 95       	ret

0000041a <WH1602_SendCommand>:
//----------------------------------------------------------------------------------------------------
//послать команду
//----------------------------------------------------------------------------------------------------
void WH1602_SendCommand(unsigned char byte)
{
     41a:	1f 93       	push	r17
     41c:	18 2f       	mov	r17, r24
 WH1602_RS_PORT&=0xff^(1<<WH1602_RS);//запись команд
     41e:	af 98       	cbi	0x15, 7	; 21
 WH1602_SendNibble(byte>>4);
     420:	82 95       	swap	r24
     422:	8f 70       	andi	r24, 0x0F	; 15
     424:	0e 94 be 01 	call	0x37c	; 0x37c <WH1602_SendNibble>
 WH1602_SendNibble(byte&0x0f);
     428:	81 2f       	mov	r24, r17
     42a:	8f 70       	andi	r24, 0x0F	; 15
     42c:	0e 94 be 01 	call	0x37c	; 0x37c <WH1602_SendNibble>
}
     430:	1f 91       	pop	r17
     432:	08 95       	ret

00000434 <WH1602_Init>:

//----------------------------------------------------------------------------------------------------
//инициализация дисплея
//----------------------------------------------------------------------------------------------------
void WH1602_Init(void)
{
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
 //настроим порты 
 WH1602_RS_DDR|=(1<<WH1602_RS);
     438:	a7 9a       	sbi	0x14, 7	; 20
 WH1602_E_DDR|=(1<<WH1602_E);
     43a:	a6 9a       	sbi	0x14, 6	; 20
 WH1602_DB7_DDR|=(1<<WH1602_DB7);
     43c:	a5 9a       	sbi	0x14, 5	; 20
 WH1602_DB6_DDR|=(1<<WH1602_DB6);
     43e:	a4 9a       	sbi	0x14, 4	; 20
 WH1602_DB5_DDR|=(1<<WH1602_DB5);
     440:	a3 9a       	sbi	0x14, 3	; 20
 WH1602_DB4_DDR|=(1<<WH1602_DB4);
     442:	a2 9a       	sbi	0x14, 2	; 20
     444:	88 ec       	ldi	r24, 0xC8	; 200
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	20 e9       	ldi	r18, 0x90	; 144
     44a:	31 e0       	ldi	r19, 0x01	; 1
     44c:	f9 01       	movw	r30, r18
     44e:	31 97       	sbiw	r30, 0x01	; 1
     450:	f1 f7       	brne	.-4      	; 0x44e <WH1602_Init+0x1a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     452:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     454:	d9 f7       	brne	.-10     	; 0x44c <WH1602_Init+0x18>
 _delay_ms(20);//ждём включения экрана
 //запускаем дисплей
 //даём несколько раз команду включения
 WH1602_RS_PORT&=0xff^(1<<WH1602_RS);//запись команд
     456:	af 98       	cbi	0x15, 7	; 21
 WH1602_SendNibble(0b0011);//команда включения
     458:	83 e0       	ldi	r24, 0x03	; 3
     45a:	0e 94 be 01 	call	0x37c	; 0x37c <WH1602_SendNibble>
     45e:	80 e2       	ldi	r24, 0x20	; 32
     460:	9e e4       	ldi	r25, 0x4E	; 78
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	f1 f7       	brne	.-4      	; 0x462 <__stack+0x3>
 _delay_ms(5); 
 WH1602_SendNibble(0b0011);//команда включения
     466:	83 e0       	ldi	r24, 0x03	; 3
     468:	0e 94 be 01 	call	0x37c	; 0x37c <WH1602_SendNibble>
     46c:	80 e2       	ldi	r24, 0x20	; 32
     46e:	93 e0       	ldi	r25, 0x03	; 3
     470:	01 97       	sbiw	r24, 0x01	; 1
     472:	f1 f7       	brne	.-4      	; 0x470 <__stack+0x11>
 _delay_us(200);  
 WH1602_SendNibble(0b0011);//команда включения 
     474:	83 e0       	ldi	r24, 0x03	; 3
     476:	0e 94 be 01 	call	0x37c	; 0x37c <WH1602_SendNibble>
 WH1602_SendNibble(0b0010);//интерфейс 4 бит 
     47a:	82 e0       	ldi	r24, 0x02	; 2
     47c:	0e 94 be 01 	call	0x37c	; 0x37c <WH1602_SendNibble>
 //указываем режим 4 бита, 2 линии, символы 5x11
 WH1602_SendCommand(0b00101100);
     480:	8c e2       	ldi	r24, 0x2C	; 44
     482:	0e 94 0d 02 	call	0x41a	; 0x41a <WH1602_SendCommand>
     486:	00 ea       	ldi	r16, 0xA0	; 160
     488:	1f e0       	ldi	r17, 0x0F	; 15
     48a:	c8 01       	movw	r24, r16
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <__stack+0x2d>
 _delay_ms(1);
 //отключаем экран
 WH1602_SendCommand(0b00001000);
     490:	88 e0       	ldi	r24, 0x08	; 8
     492:	0e 94 0d 02 	call	0x41a	; 0x41a <WH1602_SendCommand>
     496:	c8 01       	movw	r24, r16
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	f1 f7       	brne	.-4      	; 0x498 <__stack+0x39>
 _delay_ms(1); 
 //очищаем экран 
 WH1602_SendCommand(0b00000001);
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	0e 94 0d 02 	call	0x41a	; 0x41a <WH1602_SendCommand>
     4a2:	c8 01       	movw	r24, r16
     4a4:	01 97       	sbiw	r24, 0x01	; 1
     4a6:	f1 f7       	brne	.-4      	; 0x4a4 <__stack+0x45>
 _delay_ms(1); 
 //устанавливаем режим ввода данных с инкрементом ячейки памяти
 WH1602_SendCommand(0b00000110);
     4a8:	86 e0       	ldi	r24, 0x06	; 6
     4aa:	0e 94 0d 02 	call	0x41a	; 0x41a <WH1602_SendCommand>
 //включаем экран
 WH1602_SendCommand(0b00001100);
     4ae:	8c e0       	ldi	r24, 0x0C	; 12
     4b0:	0e 94 0d 02 	call	0x41a	; 0x41a <WH1602_SendCommand>
     4b4:	c8 01       	movw	r24, r16
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <__stack+0x57>
 _delay_ms(1);  
}
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	08 95       	ret

000004c0 <WH1602_SetTextUpLine>:
}
//----------------------------------------------------------------------------------------------------
//записать текст в верхнюю строчку экрана
//----------------------------------------------------------------------------------------------------
void WH1602_SetTextUpLine(char *text)
{
     4c0:	af 92       	push	r10
     4c2:	bf 92       	push	r11
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ff 92       	push	r15
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	df 93       	push	r29
     4d0:	cf 93       	push	r28
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	60 97       	sbiw	r28, 0x10	; 16
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	f8 94       	cli
     4dc:	de bf       	out	0x3e, r29	; 62
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	cd bf       	out	0x3d, r28	; 61
     4e2:	18 2f       	mov	r17, r24
     4e4:	09 2f       	mov	r16, r25
 //даём команду позиционирования
 WH1602_SendCommand(0b10000000);//установить адрес видеопамяти в 0
     4e6:	80 e8       	ldi	r24, 0x80	; 128
     4e8:	0e 94 0d 02 	call	0x41a	; 0x41a <WH1602_SendCommand>
     4ec:	80 e9       	ldi	r24, 0x90	; 144
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	01 97       	sbiw	r24, 0x01	; 1
     4f2:	f1 f7       	brne	.-4      	; 0x4f0 <WH1602_SetTextUpLine+0x30>
     4f4:	21 2f       	mov	r18, r17
     4f6:	30 2f       	mov	r19, r16
     4f8:	c9 01       	movw	r24, r18
     4fa:	6c 01       	movw	r12, r24
     4fc:	de 01       	movw	r26, r28
     4fe:	11 96       	adiw	r26, 0x01	; 1
     500:	9c 01       	movw	r18, r24
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     502:	be 01       	movw	r22, r28
     504:	6f 5e       	subi	r22, 0xEF	; 239
     506:	7f 4f       	sbci	r23, 0xFF	; 255
 {
  unsigned char b=text[n];
     508:	f9 01       	movw	r30, r18
     50a:	40 81       	ld	r20, Z
  out_text[n]=b;
     50c:	4c 93       	st	X, r20
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
  for(unsigned char m=0;m<66;m++)
  {
   unsigned char t=pgm_read_byte(&(RusCodeTable[m][0]));
     512:	fc 01       	movw	r30, r24
     514:	e2 55       	subi	r30, 0x52	; 82
     516:	ff 4f       	sbci	r31, 0xFF	; 255
     518:	e4 91       	lpm	r30, Z+
   if (t==b)
     51a:	e4 17       	cp	r30, r20
     51c:	31 f4       	brne	.+12     	; 0x52a <WH1602_SetTextUpLine+0x6a>
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
     51e:	81 55       	subi	r24, 0x51	; 81
     520:	9f 4f       	sbci	r25, 0xFF	; 255
     522:	fc 01       	movw	r30, r24
     524:	84 91       	lpm	r24, Z+
     526:	8c 93       	st	X, r24
     528:	04 c0       	rjmp	.+8      	; 0x532 <WH1602_SetTextUpLine+0x72>
	break;
     52a:	02 96       	adiw	r24, 0x02	; 2
 unsigned char out_text[16];
 for(n=0;n<16;n++)
 {
  unsigned char b=text[n];
  out_text[n]=b;
  for(unsigned char m=0;m<66;m++)
     52c:	84 38       	cpi	r24, 0x84	; 132
     52e:	91 05       	cpc	r25, r1
     530:	81 f7       	brne	.-32     	; 0x512 <WH1602_SetTextUpLine+0x52>
     532:	2f 5f       	subi	r18, 0xFF	; 255
     534:	3f 4f       	sbci	r19, 0xFF	; 255
     536:	11 96       	adiw	r26, 0x01	; 1
 WH1602_SendCommand(0b10000000);//установить адрес видеопамяти в 0
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     538:	a6 17       	cp	r26, r22
     53a:	b7 07       	cpc	r27, r23
     53c:	29 f7       	brne	.-54     	; 0x508 <WH1602_SetTextUpLine+0x48>
     53e:	00 e0       	ldi	r16, 0x00	; 0
     540:	10 e0       	ldi	r17, 0x00	; 0
  }
 } 
 for(n=0;n<16;n++)
 {
  if (text[n]==0) break;  
  WH1602_SendData(out_text[n]);
     542:	5e 01       	movw	r10, r28
     544:	08 94       	sec
     546:	a1 1c       	adc	r10, r1
     548:	b1 1c       	adc	r11, r1
 WH1602_SendCommand(0b10000000);//установить адрес видеопамяти в 0
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     54a:	f0 2e       	mov	r15, r16
   }
  }
 } 
 for(n=0;n<16;n++)
 {
  if (text[n]==0) break;  
     54c:	f6 01       	movw	r30, r12
     54e:	80 81       	ld	r24, Z
     550:	88 23       	and	r24, r24
     552:	a1 f0       	breq	.+40     	; 0x57c <WH1602_SetTextUpLine+0xbc>
  WH1602_SendData(out_text[n]);
     554:	f5 01       	movw	r30, r10
     556:	e0 0f       	add	r30, r16
     558:	f1 1f       	adc	r31, r17
     55a:	80 81       	ld	r24, Z
     55c:	0e 94 00 02 	call	0x400	; 0x400 <WH1602_SendData>
     560:	f3 94       	inc	r15
     562:	0f 5f       	subi	r16, 0xFF	; 255
     564:	1f 4f       	sbci	r17, 0xFF	; 255
     566:	08 94       	sec
     568:	c1 1c       	adc	r12, r1
     56a:	d1 1c       	adc	r13, r1
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
   }
  }
 } 
 for(n=0;n<16;n++)
     56c:	00 31       	cpi	r16, 0x10	; 16
     56e:	11 05       	cpc	r17, r1
     570:	61 f7       	brne	.-40     	; 0x54a <WH1602_SetTextUpLine+0x8a>
     572:	04 c0       	rjmp	.+8      	; 0x57c <WH1602_SetTextUpLine+0xbc>
 {
  if (text[n]==0) break;  
  WH1602_SendData(out_text[n]);
 }
 for(;n<16;n++) WH1602_SendData(32);//заполняем пробелами
     574:	80 e2       	ldi	r24, 0x20	; 32
     576:	0e 94 00 02 	call	0x400	; 0x400 <WH1602_SendData>
     57a:	f3 94       	inc	r15
     57c:	ff e0       	ldi	r31, 0x0F	; 15
     57e:	ff 15       	cp	r31, r15
     580:	c8 f7       	brcc	.-14     	; 0x574 <WH1602_SetTextUpLine+0xb4>
}
     582:	60 96       	adiw	r28, 0x10	; 16
     584:	0f b6       	in	r0, 0x3f	; 63
     586:	f8 94       	cli
     588:	de bf       	out	0x3e, r29	; 62
     58a:	0f be       	out	0x3f, r0	; 63
     58c:	cd bf       	out	0x3d, r28	; 61
     58e:	cf 91       	pop	r28
     590:	df 91       	pop	r29
     592:	1f 91       	pop	r17
     594:	0f 91       	pop	r16
     596:	ff 90       	pop	r15
     598:	df 90       	pop	r13
     59a:	cf 90       	pop	r12
     59c:	bf 90       	pop	r11
     59e:	af 90       	pop	r10
     5a0:	08 95       	ret

000005a2 <WH1602_SetTextDownLine>:
//----------------------------------------------------------------------------------------------------
//записать текст в нижнюю строчку экрана
//----------------------------------------------------------------------------------------------------
void WH1602_SetTextDownLine(char *text)
{
     5a2:	af 92       	push	r10
     5a4:	bf 92       	push	r11
     5a6:	cf 92       	push	r12
     5a8:	df 92       	push	r13
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	df 93       	push	r29
     5b2:	cf 93       	push	r28
     5b4:	cd b7       	in	r28, 0x3d	; 61
     5b6:	de b7       	in	r29, 0x3e	; 62
     5b8:	60 97       	sbiw	r28, 0x10	; 16
     5ba:	0f b6       	in	r0, 0x3f	; 63
     5bc:	f8 94       	cli
     5be:	de bf       	out	0x3e, r29	; 62
     5c0:	0f be       	out	0x3f, r0	; 63
     5c2:	cd bf       	out	0x3d, r28	; 61
     5c4:	18 2f       	mov	r17, r24
     5c6:	09 2f       	mov	r16, r25
 //даём команду позиционирования
 WH1602_SendCommand(0b10101000);//установить адрес видеопамяти в 40
     5c8:	88 ea       	ldi	r24, 0xA8	; 168
     5ca:	0e 94 0d 02 	call	0x41a	; 0x41a <WH1602_SendCommand>
     5ce:	80 e9       	ldi	r24, 0x90	; 144
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <WH1602_SetTextDownLine+0x30>
     5d6:	21 2f       	mov	r18, r17
     5d8:	30 2f       	mov	r19, r16
     5da:	c9 01       	movw	r24, r18
     5dc:	6c 01       	movw	r12, r24
     5de:	de 01       	movw	r26, r28
     5e0:	11 96       	adiw	r26, 0x01	; 1
     5e2:	9c 01       	movw	r18, r24
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     5e4:	be 01       	movw	r22, r28
     5e6:	6f 5e       	subi	r22, 0xEF	; 239
     5e8:	7f 4f       	sbci	r23, 0xFF	; 255
 {
  unsigned char b=text[n];
     5ea:	f9 01       	movw	r30, r18
     5ec:	40 81       	ld	r20, Z
  out_text[n]=b;
     5ee:	4c 93       	st	X, r20
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	90 e0       	ldi	r25, 0x00	; 0
  for(unsigned char m=0;m<66;m++)
  {
   unsigned char t=pgm_read_byte(&(RusCodeTable[m][0]));
     5f4:	fc 01       	movw	r30, r24
     5f6:	e2 55       	subi	r30, 0x52	; 82
     5f8:	ff 4f       	sbci	r31, 0xFF	; 255
     5fa:	e4 91       	lpm	r30, Z+
   if (t==b)
     5fc:	e4 17       	cp	r30, r20
     5fe:	31 f4       	brne	.+12     	; 0x60c <WH1602_SetTextDownLine+0x6a>
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
     600:	81 55       	subi	r24, 0x51	; 81
     602:	9f 4f       	sbci	r25, 0xFF	; 255
     604:	fc 01       	movw	r30, r24
     606:	84 91       	lpm	r24, Z+
     608:	8c 93       	st	X, r24
     60a:	04 c0       	rjmp	.+8      	; 0x614 <WH1602_SetTextDownLine+0x72>
	break;
     60c:	02 96       	adiw	r24, 0x02	; 2
 unsigned char out_text[16];
 for(n=0;n<16;n++)
 {
  unsigned char b=text[n];
  out_text[n]=b;
  for(unsigned char m=0;m<66;m++)
     60e:	84 38       	cpi	r24, 0x84	; 132
     610:	91 05       	cpc	r25, r1
     612:	81 f7       	brne	.-32     	; 0x5f4 <WH1602_SetTextDownLine+0x52>
     614:	2f 5f       	subi	r18, 0xFF	; 255
     616:	3f 4f       	sbci	r19, 0xFF	; 255
     618:	11 96       	adiw	r26, 0x01	; 1
 WH1602_SendCommand(0b10101000);//установить адрес видеопамяти в 40
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     61a:	a6 17       	cp	r26, r22
     61c:	b7 07       	cpc	r27, r23
     61e:	29 f7       	brne	.-54     	; 0x5ea <WH1602_SetTextDownLine+0x48>
     620:	00 e0       	ldi	r16, 0x00	; 0
     622:	10 e0       	ldi	r17, 0x00	; 0
  }
 } 
 for(n=0;n<16;n++)
 {
  if (text[n]==0) break;  
  WH1602_SendData(out_text[n]);
     624:	5e 01       	movw	r10, r28
     626:	08 94       	sec
     628:	a1 1c       	adc	r10, r1
     62a:	b1 1c       	adc	r11, r1
 WH1602_SendCommand(0b10101000);//установить адрес видеопамяти в 40
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     62c:	f0 2e       	mov	r15, r16
   }
  }
 } 
 for(n=0;n<16;n++)
 {
  if (text[n]==0) break;  
     62e:	f6 01       	movw	r30, r12
     630:	80 81       	ld	r24, Z
     632:	88 23       	and	r24, r24
     634:	a1 f0       	breq	.+40     	; 0x65e <WH1602_SetTextDownLine+0xbc>
  WH1602_SendData(out_text[n]);
     636:	f5 01       	movw	r30, r10
     638:	e0 0f       	add	r30, r16
     63a:	f1 1f       	adc	r31, r17
     63c:	80 81       	ld	r24, Z
     63e:	0e 94 00 02 	call	0x400	; 0x400 <WH1602_SendData>
     642:	f3 94       	inc	r15
     644:	0f 5f       	subi	r16, 0xFF	; 255
     646:	1f 4f       	sbci	r17, 0xFF	; 255
     648:	08 94       	sec
     64a:	c1 1c       	adc	r12, r1
     64c:	d1 1c       	adc	r13, r1
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
   }
  }
 } 
 for(n=0;n<16;n++)
     64e:	00 31       	cpi	r16, 0x10	; 16
     650:	11 05       	cpc	r17, r1
     652:	61 f7       	brne	.-40     	; 0x62c <WH1602_SetTextDownLine+0x8a>
     654:	04 c0       	rjmp	.+8      	; 0x65e <WH1602_SetTextDownLine+0xbc>
 {
  if (text[n]==0) break;  
  WH1602_SendData(out_text[n]);
 }
 for(;n<16;n++) WH1602_SendData(32);//заполняем пробелами
     656:	80 e2       	ldi	r24, 0x20	; 32
     658:	0e 94 00 02 	call	0x400	; 0x400 <WH1602_SendData>
     65c:	f3 94       	inc	r15
     65e:	ff e0       	ldi	r31, 0x0F	; 15
     660:	ff 15       	cp	r31, r15
     662:	c8 f7       	brcc	.-14     	; 0x656 <WH1602_SetTextDownLine+0xb4>
}
     664:	60 96       	adiw	r28, 0x10	; 16
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	f8 94       	cli
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	cd bf       	out	0x3d, r28	; 61
     670:	cf 91       	pop	r28
     672:	df 91       	pop	r29
     674:	1f 91       	pop	r17
     676:	0f 91       	pop	r16
     678:	ff 90       	pop	r15
     67a:	df 90       	pop	r13
     67c:	cf 90       	pop	r12
     67e:	bf 90       	pop	r11
     680:	af 90       	pop	r10
     682:	08 95       	ret

00000684 <WH1602_SetTextProgmemUpLine>:
//----------------------------------------------------------------------------------------------------
//записать текст из памяти в верхнюю строчку экрана
//----------------------------------------------------------------------------------------------------
void WH1602_SetTextProgmemUpLine(const char *text)
{
     684:	af 92       	push	r10
     686:	bf 92       	push	r11
     688:	cf 92       	push	r12
     68a:	df 92       	push	r13
     68c:	ff 92       	push	r15
     68e:	0f 93       	push	r16
     690:	1f 93       	push	r17
     692:	df 93       	push	r29
     694:	cf 93       	push	r28
     696:	cd b7       	in	r28, 0x3d	; 61
     698:	de b7       	in	r29, 0x3e	; 62
     69a:	60 97       	sbiw	r28, 0x10	; 16
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
     6a6:	5c 01       	movw	r10, r24
 //даём команду позиционирования
 WH1602_SendCommand(0b10000000);//установить адрес видеопамяти в 0
     6a8:	80 e8       	ldi	r24, 0x80	; 128
     6aa:	0e 94 0d 02 	call	0x41a	; 0x41a <WH1602_SendCommand>
     6ae:	80 e9       	ldi	r24, 0x90	; 144
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <WH1602_SetTextProgmemUpLine+0x2e>
     6b6:	95 01       	movw	r18, r10
     6b8:	de 01       	movw	r26, r28
     6ba:	11 96       	adiw	r26, 0x01	; 1
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     6bc:	be 01       	movw	r22, r28
     6be:	6f 5e       	subi	r22, 0xEF	; 239
     6c0:	7f 4f       	sbci	r23, 0xFF	; 255
 {
  unsigned char b=pgm_read_byte(&text[n]);
     6c2:	f9 01       	movw	r30, r18
     6c4:	44 91       	lpm	r20, Z+
  out_text[n]=b;
     6c6:	4c 93       	st	X, r20
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
  for(unsigned char m=0;m<66;m++)
  {
   unsigned char t=pgm_read_byte(&(RusCodeTable[m][0]));
     6cc:	fc 01       	movw	r30, r24
     6ce:	e2 55       	subi	r30, 0x52	; 82
     6d0:	ff 4f       	sbci	r31, 0xFF	; 255
     6d2:	e4 91       	lpm	r30, Z+
   if (t==b)
     6d4:	e4 17       	cp	r30, r20
     6d6:	31 f4       	brne	.+12     	; 0x6e4 <WH1602_SetTextProgmemUpLine+0x60>
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
     6d8:	81 55       	subi	r24, 0x51	; 81
     6da:	9f 4f       	sbci	r25, 0xFF	; 255
     6dc:	fc 01       	movw	r30, r24
     6de:	84 91       	lpm	r24, Z+
     6e0:	8c 93       	st	X, r24
     6e2:	04 c0       	rjmp	.+8      	; 0x6ec <WH1602_SetTextProgmemUpLine+0x68>
	break;
     6e4:	02 96       	adiw	r24, 0x02	; 2
 unsigned char out_text[16];
 for(n=0;n<16;n++)
 {
  unsigned char b=pgm_read_byte(&text[n]);
  out_text[n]=b;
  for(unsigned char m=0;m<66;m++)
     6e6:	84 38       	cpi	r24, 0x84	; 132
     6e8:	91 05       	cpc	r25, r1
     6ea:	81 f7       	brne	.-32     	; 0x6cc <WH1602_SetTextProgmemUpLine+0x48>
     6ec:	2f 5f       	subi	r18, 0xFF	; 255
     6ee:	3f 4f       	sbci	r19, 0xFF	; 255
     6f0:	11 96       	adiw	r26, 0x01	; 1
 WH1602_SendCommand(0b10000000);//установить адрес видеопамяти в 0
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     6f2:	a6 17       	cp	r26, r22
     6f4:	b7 07       	cpc	r27, r23
     6f6:	29 f7       	brne	.-54     	; 0x6c2 <WH1602_SetTextProgmemUpLine+0x3e>
     6f8:	00 e0       	ldi	r16, 0x00	; 0
     6fa:	10 e0       	ldi	r17, 0x00	; 0
  }
 } 
 for(n=0;n<16;n++)
 {
  if (pgm_read_byte(&text[n])==0) break;  
  WH1602_SendData(out_text[n]);
     6fc:	6e 01       	movw	r12, r28
     6fe:	08 94       	sec
     700:	c1 1c       	adc	r12, r1
     702:	d1 1c       	adc	r13, r1
 WH1602_SendCommand(0b10000000);//установить адрес видеопамяти в 0
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     704:	f0 2e       	mov	r15, r16
   }
  }
 } 
 for(n=0;n<16;n++)
 {
  if (pgm_read_byte(&text[n])==0) break;  
     706:	f5 01       	movw	r30, r10
     708:	e0 0f       	add	r30, r16
     70a:	f1 1f       	adc	r31, r17
     70c:	e4 91       	lpm	r30, Z+
     70e:	ee 23       	and	r30, r30
     710:	89 f0       	breq	.+34     	; 0x734 <WH1602_SetTextProgmemUpLine+0xb0>
  WH1602_SendData(out_text[n]);
     712:	f6 01       	movw	r30, r12
     714:	e0 0f       	add	r30, r16
     716:	f1 1f       	adc	r31, r17
     718:	80 81       	ld	r24, Z
     71a:	0e 94 00 02 	call	0x400	; 0x400 <WH1602_SendData>
     71e:	f3 94       	inc	r15
     720:	0f 5f       	subi	r16, 0xFF	; 255
     722:	1f 4f       	sbci	r17, 0xFF	; 255
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
   }
  }
 } 
 for(n=0;n<16;n++)
     724:	00 31       	cpi	r16, 0x10	; 16
     726:	11 05       	cpc	r17, r1
     728:	69 f7       	brne	.-38     	; 0x704 <WH1602_SetTextProgmemUpLine+0x80>
     72a:	04 c0       	rjmp	.+8      	; 0x734 <WH1602_SetTextProgmemUpLine+0xb0>
 {
  if (pgm_read_byte(&text[n])==0) break;  
  WH1602_SendData(out_text[n]);
 }
 for(;n<16;n++) WH1602_SendData(32);//заполняем пробелами
     72c:	80 e2       	ldi	r24, 0x20	; 32
     72e:	0e 94 00 02 	call	0x400	; 0x400 <WH1602_SendData>
     732:	f3 94       	inc	r15
     734:	ff e0       	ldi	r31, 0x0F	; 15
     736:	ff 15       	cp	r31, r15
     738:	c8 f7       	brcc	.-14     	; 0x72c <WH1602_SetTextProgmemUpLine+0xa8>
}
     73a:	60 96       	adiw	r28, 0x10	; 16
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	cf 91       	pop	r28
     748:	df 91       	pop	r29
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	df 90       	pop	r13
     752:	cf 90       	pop	r12
     754:	bf 90       	pop	r11
     756:	af 90       	pop	r10
     758:	08 95       	ret

0000075a <WH1602_SetTextProgmemDownLine>:
//----------------------------------------------------------------------------------------------------
//записать текст из памяти  в нижнюю строчку экрана
//----------------------------------------------------------------------------------------------------
void WH1602_SetTextProgmemDownLine(const char *text)
{
     75a:	af 92       	push	r10
     75c:	bf 92       	push	r11
     75e:	cf 92       	push	r12
     760:	df 92       	push	r13
     762:	ff 92       	push	r15
     764:	0f 93       	push	r16
     766:	1f 93       	push	r17
     768:	df 93       	push	r29
     76a:	cf 93       	push	r28
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
     770:	60 97       	sbiw	r28, 0x10	; 16
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	5c 01       	movw	r10, r24
 //даём команду позиционирования
 WH1602_SendCommand(0b10101000);//установить адрес видеопамяти в 40
     77e:	88 ea       	ldi	r24, 0xA8	; 168
     780:	0e 94 0d 02 	call	0x41a	; 0x41a <WH1602_SendCommand>
     784:	80 e9       	ldi	r24, 0x90	; 144
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	01 97       	sbiw	r24, 0x01	; 1
     78a:	f1 f7       	brne	.-4      	; 0x788 <WH1602_SetTextProgmemDownLine+0x2e>
     78c:	95 01       	movw	r18, r10
     78e:	de 01       	movw	r26, r28
     790:	11 96       	adiw	r26, 0x01	; 1
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     792:	be 01       	movw	r22, r28
     794:	6f 5e       	subi	r22, 0xEF	; 239
     796:	7f 4f       	sbci	r23, 0xFF	; 255
 {
  unsigned char b=pgm_read_byte(&text[n]);
     798:	f9 01       	movw	r30, r18
     79a:	44 91       	lpm	r20, Z+
  out_text[n]=b;
     79c:	4c 93       	st	X, r20
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e0       	ldi	r25, 0x00	; 0
  for(unsigned char m=0;m<66;m++)
  {
   unsigned char t=pgm_read_byte(&(RusCodeTable[m][0]));
     7a2:	fc 01       	movw	r30, r24
     7a4:	e2 55       	subi	r30, 0x52	; 82
     7a6:	ff 4f       	sbci	r31, 0xFF	; 255
     7a8:	e4 91       	lpm	r30, Z+
   if (t==b)
     7aa:	e4 17       	cp	r30, r20
     7ac:	31 f4       	brne	.+12     	; 0x7ba <WH1602_SetTextProgmemDownLine+0x60>
   {
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
     7ae:	81 55       	subi	r24, 0x51	; 81
     7b0:	9f 4f       	sbci	r25, 0xFF	; 255
     7b2:	fc 01       	movw	r30, r24
     7b4:	84 91       	lpm	r24, Z+
     7b6:	8c 93       	st	X, r24
     7b8:	04 c0       	rjmp	.+8      	; 0x7c2 <WH1602_SetTextProgmemDownLine+0x68>
	break;
     7ba:	02 96       	adiw	r24, 0x02	; 2
 unsigned char out_text[16];
 for(n=0;n<16;n++)
 {
  unsigned char b=pgm_read_byte(&text[n]);
  out_text[n]=b;
  for(unsigned char m=0;m<66;m++)
     7bc:	84 38       	cpi	r24, 0x84	; 132
     7be:	91 05       	cpc	r25, r1
     7c0:	81 f7       	brne	.-32     	; 0x7a2 <WH1602_SetTextProgmemDownLine+0x48>
     7c2:	2f 5f       	subi	r18, 0xFF	; 255
     7c4:	3f 4f       	sbci	r19, 0xFF	; 255
     7c6:	11 96       	adiw	r26, 0x01	; 1
 WH1602_SendCommand(0b10101000);//установить адрес видеопамяти в 40
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     7c8:	a6 17       	cp	r26, r22
     7ca:	b7 07       	cpc	r27, r23
     7cc:	29 f7       	brne	.-54     	; 0x798 <WH1602_SetTextProgmemDownLine+0x3e>
     7ce:	00 e0       	ldi	r16, 0x00	; 0
     7d0:	10 e0       	ldi	r17, 0x00	; 0
  }
 } 
 for(n=0;n<16;n++)
 {
  if (pgm_read_byte(&text[n])==0) break;  
  WH1602_SendData(out_text[n]);
     7d2:	6e 01       	movw	r12, r28
     7d4:	08 94       	sec
     7d6:	c1 1c       	adc	r12, r1
     7d8:	d1 1c       	adc	r13, r1
 WH1602_SendCommand(0b10101000);//установить адрес видеопамяти в 40
 _delay_us(100); 
 //преобразуем русские буквы
 unsigned char n;
 unsigned char out_text[16];
 for(n=0;n<16;n++)
     7da:	f0 2e       	mov	r15, r16
   }
  }
 } 
 for(n=0;n<16;n++)
 {
  if (pgm_read_byte(&text[n])==0) break;  
     7dc:	f5 01       	movw	r30, r10
     7de:	e0 0f       	add	r30, r16
     7e0:	f1 1f       	adc	r31, r17
     7e2:	e4 91       	lpm	r30, Z+
     7e4:	ee 23       	and	r30, r30
     7e6:	89 f0       	breq	.+34     	; 0x80a <WH1602_SetTextProgmemDownLine+0xb0>
  WH1602_SendData(out_text[n]);
     7e8:	f6 01       	movw	r30, r12
     7ea:	e0 0f       	add	r30, r16
     7ec:	f1 1f       	adc	r31, r17
     7ee:	80 81       	ld	r24, Z
     7f0:	0e 94 00 02 	call	0x400	; 0x400 <WH1602_SendData>
     7f4:	f3 94       	inc	r15
     7f6:	0f 5f       	subi	r16, 0xFF	; 255
     7f8:	1f 4f       	sbci	r17, 0xFF	; 255
    out_text[n]=pgm_read_byte(&(RusCodeTable[m][1]));
	break;
   }
  }
 } 
 for(n=0;n<16;n++)
     7fa:	00 31       	cpi	r16, 0x10	; 16
     7fc:	11 05       	cpc	r17, r1
     7fe:	69 f7       	brne	.-38     	; 0x7da <WH1602_SetTextProgmemDownLine+0x80>
     800:	04 c0       	rjmp	.+8      	; 0x80a <WH1602_SetTextProgmemDownLine+0xb0>
 {
  if (pgm_read_byte(&text[n])==0) break;  
  WH1602_SendData(out_text[n]);
 }
 for(;n<16;n++) WH1602_SendData(32);//заполняем пробелами
     802:	80 e2       	ldi	r24, 0x20	; 32
     804:	0e 94 00 02 	call	0x400	; 0x400 <WH1602_SendData>
     808:	f3 94       	inc	r15
     80a:	ff e0       	ldi	r31, 0x0F	; 15
     80c:	ff 15       	cp	r31, r15
     80e:	c8 f7       	brcc	.-14     	; 0x802 <WH1602_SetTextProgmemDownLine+0xa8>
}
     810:	60 96       	adiw	r28, 0x10	; 16
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	de bf       	out	0x3e, r29	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	cd bf       	out	0x3d, r28	; 61
     81c:	cf 91       	pop	r28
     81e:	df 91       	pop	r29
     820:	1f 91       	pop	r17
     822:	0f 91       	pop	r16
     824:	ff 90       	pop	r15
     826:	df 90       	pop	r13
     828:	cf 90       	pop	r12
     82a:	bf 90       	pop	r11
     82c:	af 90       	pop	r10
     82e:	08 95       	ret

00000830 <SD_TransmitData>:
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     830:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     832:	77 9b       	sbis	0x0e, 7	; 14
     834:	fe cf       	rjmp	.-4      	; 0x832 <SD_TransmitData+0x2>
 unsigned char res=SPDR;
     836:	8f b1       	in	r24, 0x0f	; 15
 return(res);
}
     838:	08 95       	ret

0000083a <SD_SendCommandR1>:

//----------------------------------------------------------------------------------------------------
//послать команду с ответом R1
//----------------------------------------------------------------------------------------------------
unsigned char SD_SendCommandR1(unsigned char b0,unsigned char b1,unsigned char b2,unsigned char b3,unsigned char b4)
{
     83a:	0f 93       	push	r16
     83c:	df 93       	push	r29
     83e:	cf 93       	push	r28
     840:	00 d0       	rcall	.+0      	; 0x842 <SD_SendCommandR1+0x8>
     842:	00 d0       	rcall	.+0      	; 0x844 <SD_SendCommandR1+0xa>
     844:	0f 92       	push	r0
     846:	cd b7       	in	r28, 0x3d	; 61
     848:	de b7       	in	r29, 0x3e	; 62
 //отправляем команду и считаем её CRC7
 unsigned char crc7=0; 
 unsigned char cmd[5]={b0,b1,b2,b3,b4};
     84a:	89 83       	std	Y+1, r24	; 0x01
     84c:	6a 83       	std	Y+2, r22	; 0x02
     84e:	4b 83       	std	Y+3, r20	; 0x03
     850:	2c 83       	std	Y+4, r18	; 0x04
     852:	0d 83       	std	Y+5, r16	; 0x05
     854:	fe 01       	movw	r30, r28
     856:	31 96       	adiw	r30, 0x01	; 1
 for(unsigned char n=0;n<5;n++)
     858:	9e 01       	movw	r18, r28
     85a:	2a 5f       	subi	r18, 0xFA	; 250
     85c:	3f 4f       	sbci	r19, 0xFF	; 255
 {
  SD_TransmitData(cmd[n]);
     85e:	80 81       	ld	r24, Z
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     860:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     862:	77 9b       	sbis	0x0e, 7	; 14
     864:	fe cf       	rjmp	.-4      	; 0x862 <SD_SendCommandR1+0x28>
 unsigned char res=SPDR;
     866:	8f b1       	in	r24, 0x0f	; 15
     868:	31 96       	adiw	r30, 0x01	; 1
unsigned char SD_SendCommandR1(unsigned char b0,unsigned char b1,unsigned char b2,unsigned char b3,unsigned char b4)
{
 //отправляем команду и считаем её CRC7
 unsigned char crc7=0; 
 unsigned char cmd[5]={b0,b1,b2,b3,b4};
 for(unsigned char n=0;n<5;n++)
     86a:	e2 17       	cp	r30, r18
     86c:	f3 07       	cpc	r31, r19
     86e:	b9 f7       	brne	.-18     	; 0x85e <SD_SendCommandR1+0x24>
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     870:	85 e9       	ldi	r24, 0x95	; 149
     872:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     874:	77 9b       	sbis	0x0e, 7	; 14
     876:	fe cf       	rjmp	.-4      	; 0x874 <SD_SendCommandR1+0x3a>
 unsigned char res=SPDR;
     878:	8f b1       	in	r24, 0x0f	; 15
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     87e:	4f ef       	ldi	r20, 0xFF	; 255
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     880:	95 e3       	ldi	r25, 0x35	; 53
     882:	4f b9       	out	0x0f, r20	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     884:	77 9b       	sbis	0x0e, 7	; 14
     886:	fe cf       	rjmp	.-4      	; 0x884 <SD_SendCommandR1+0x4a>
 unsigned char res=SPDR;
     888:	8f b1       	in	r24, 0x0f	; 15
 //карта может ответить не сразу
 //принимаем ответ R1 (старший бит всегда 0)
 for(unsigned short n=0;n<65535;n++)
 {
  unsigned char res=SD_TransmitData(0xff);
  if ((res&128)==0)
     88a:	87 ff       	sbrs	r24, 7
     88c:	0a c0       	rjmp	.+20     	; 0x8a2 <SD_SendCommandR1+0x68>
     88e:	89 2f       	mov	r24, r25
     890:	8a 95       	dec	r24
     892:	f1 f7       	brne	.-4      	; 0x890 <SD_SendCommandR1+0x56>
 */
 crc7=0x95;
 SD_TransmitData(crc7);//CRC
 //карта может ответить не сразу
 //принимаем ответ R1 (старший бит всегда 0)
 for(unsigned short n=0;n<65535;n++)
     894:	2f 5f       	subi	r18, 0xFF	; 255
     896:	3f 4f       	sbci	r19, 0xFF	; 255
     898:	8f ef       	ldi	r24, 0xFF	; 255
     89a:	2f 3f       	cpi	r18, 0xFF	; 255
     89c:	38 07       	cpc	r19, r24
     89e:	89 f7       	brne	.-30     	; 0x882 <SD_SendCommandR1+0x48>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
   return(res);//это действительно ответ
  }
  _delay_us(10);
 }
 return(0xff);//ответ не принят
}
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	cf 91       	pop	r28
     8ae:	df 91       	pop	r29
     8b0:	0f 91       	pop	r16
     8b2:	08 95       	ret

000008b4 <GetBits>:
}
//----------------------------------------------------------------------------------------------------
//получить биты с begin по end включительно
//----------------------------------------------------------------------------------------------------
unsigned short GetBits(unsigned char *data,unsigned char begin,unsigned char end)
{
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	ec 01       	movw	r28, r24
 unsigned short bits=0;
 unsigned char size=1+begin-end; 
     8be:	6f 5f       	subi	r22, 0xFF	; 255
     8c0:	64 1b       	sub	r22, r20
     8c2:	a0 e0       	ldi	r26, 0x00	; 0
     8c4:	b0 e0       	ldi	r27, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
 {
  unsigned char position=end+i;
  unsigned short byte=15-(position>>3);
  unsigned short bit=position&0x7;
  unsigned short value=(data[byte]>>bit)&1;
  bits|=value<<i;
     8c8:	0f e0       	ldi	r16, 0x0F	; 15
     8ca:	10 e0       	ldi	r17, 0x00	; 0
     8cc:	1e c0       	rjmp	.+60     	; 0x90a <GetBits+0x56>
//----------------------------------------------------------------------------------------------------
unsigned short GetBits(unsigned char *data,unsigned char begin,unsigned char end)
{
 unsigned short bits=0;
 unsigned char size=1+begin-end; 
 for(unsigned char i=0;i<size;i++) 
     8ce:	23 2f       	mov	r18, r19
     8d0:	24 0f       	add	r18, r20
 {
  unsigned char position=end+i;
  unsigned short byte=15-(position>>3);
  unsigned short bit=position&0x7;
  unsigned short value=(data[byte]>>bit)&1;
  bits|=value<<i;
     8d2:	82 2f       	mov	r24, r18
     8d4:	86 95       	lsr	r24
     8d6:	86 95       	lsr	r24
     8d8:	86 95       	lsr	r24
     8da:	f8 01       	movw	r30, r16
     8dc:	e8 1b       	sub	r30, r24
     8de:	f1 09       	sbc	r31, r1
     8e0:	ec 0f       	add	r30, r28
     8e2:	fd 1f       	adc	r31, r29
     8e4:	80 81       	ld	r24, Z
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	27 70       	andi	r18, 0x07	; 7
     8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <GetBits+0x3c>
     8ec:	95 95       	asr	r25
     8ee:	87 95       	ror	r24
     8f0:	2a 95       	dec	r18
     8f2:	e2 f7       	brpl	.-8      	; 0x8ec <GetBits+0x38>
     8f4:	81 70       	andi	r24, 0x01	; 1
     8f6:	90 70       	andi	r25, 0x00	; 0
     8f8:	03 2e       	mov	r0, r19
     8fa:	02 c0       	rjmp	.+4      	; 0x900 <GetBits+0x4c>
     8fc:	88 0f       	add	r24, r24
     8fe:	99 1f       	adc	r25, r25
     900:	0a 94       	dec	r0
     902:	e2 f7       	brpl	.-8      	; 0x8fc <GetBits+0x48>
     904:	a8 2b       	or	r26, r24
     906:	b9 2b       	or	r27, r25
//----------------------------------------------------------------------------------------------------
unsigned short GetBits(unsigned char *data,unsigned char begin,unsigned char end)
{
 unsigned short bits=0;
 unsigned char size=1+begin-end; 
 for(unsigned char i=0;i<size;i++) 
     908:	3f 5f       	subi	r19, 0xFF	; 255
     90a:	36 17       	cp	r19, r22
     90c:	00 f3       	brcs	.-64     	; 0x8ce <GetBits+0x1a>
  unsigned short bit=position&0x7;
  unsigned short value=(data[byte]>>bit)&1;
  bits|=value<<i;
 }
 return(bits);
}
     90e:	cd 01       	movw	r24, r26
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	08 95       	ret

0000091a <SD_GetSize>:
}
//----------------------------------------------------------------------------------------------------
//получить объём SD-карты в байтах
//----------------------------------------------------------------------------------------------------
unsigned long SD_GetSize(void)
{
     91a:	cf 92       	push	r12
     91c:	df 92       	push	r13
     91e:	ef 92       	push	r14
     920:	ff 92       	push	r15
     922:	0f 93       	push	r16
     924:	1f 93       	push	r17
     926:	df 93       	push	r29
     928:	cf 93       	push	r28
     92a:	cd b7       	in	r28, 0x3d	; 61
     92c:	de b7       	in	r29, 0x3e	; 62
     92e:	60 97       	sbiw	r28, 0x10	; 16
     930:	0f b6       	in	r0, 0x3f	; 63
     932:	f8 94       	cli
     934:	de bf       	out	0x3e, r29	; 62
     936:	0f be       	out	0x3f, r0	; 63
     938:	cd bf       	out	0x3d, r28	; 61
 unsigned short n;
 if (SD_SendCommandR1(0x49,0x00,0x00,0x00,0x00)==0xff) return(0xffff);//ответ не принят
     93a:	89 e4       	ldi	r24, 0x49	; 73
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	00 e0       	ldi	r16, 0x00	; 0
     944:	0e 94 1d 04 	call	0x83a	; 0x83a <SD_SendCommandR1>
     948:	8f 3f       	cpi	r24, 0xFF	; 255
     94a:	09 f4       	brne	.+2      	; 0x94e <SD_GetSize+0x34>
     94c:	59 c0       	rjmp	.+178    	; 0xa00 <SD_GetSize+0xe6>
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     952:	4f ef       	ldi	r20, 0xFF	; 255
     954:	95 e3       	ldi	r25, 0x35	; 53
     956:	4f b9       	out	0x0f, r20	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     958:	77 9b       	sbis	0x0e, 7	; 14
     95a:	fe cf       	rjmp	.-4      	; 0x958 <SD_GetSize+0x3e>
 unsigned char res=SPDR;
     95c:	8f b1       	in	r24, 0x0f	; 15
 unsigned short n;
 if (SD_SendCommandR1(0x49,0x00,0x00,0x00,0x00)==0xff) return(0xffff);//ответ не принят
 //считываем 16 байт ответа
 for(n=0;n<65535;n++)
 {
  if (SD_TransmitData(0xff)==0xfe) break;//получено начало ответа
     95e:	8e 3f       	cpi	r24, 0xFE	; 254
     960:	51 f0       	breq	.+20     	; 0x976 <SD_GetSize+0x5c>
     962:	89 2f       	mov	r24, r25
     964:	8a 95       	dec	r24
     966:	f1 f7       	brne	.-4      	; 0x964 <SD_GetSize+0x4a>
unsigned long SD_GetSize(void)
{
 unsigned short n;
 if (SD_SendCommandR1(0x49,0x00,0x00,0x00,0x00)==0xff) return(0xffff);//ответ не принят
 //считываем 16 байт ответа
 for(n=0;n<65535;n++)
     968:	2f 5f       	subi	r18, 0xFF	; 255
     96a:	3f 4f       	sbci	r19, 0xFF	; 255
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	2f 3f       	cpi	r18, 0xFF	; 255
     970:	38 07       	cpc	r19, r24
     972:	89 f7       	brne	.-30     	; 0x956 <SD_GetSize+0x3c>
     974:	45 c0       	rjmp	.+138    	; 0xa00 <SD_GetSize+0xe6>
     976:	fe 01       	movw	r30, r28
     978:	31 96       	adiw	r30, 0x01	; 1
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     97a:	9f ef       	ldi	r25, 0xFF	; 255
  if (SD_TransmitData(0xff)==0xfe) break;//получено начало ответа
  _delay_us(10);
 }
 if (n==65535) return(0xffff);//ответ не принят
 unsigned char b[16];
 for(n=0;n<16;n++) b[n]=SD_TransmitData(0xff);
     97c:	9e 01       	movw	r18, r28
     97e:	2f 5e       	subi	r18, 0xEF	; 239
     980:	3f 4f       	sbci	r19, 0xFF	; 255
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     982:	9f b9       	out	0x0f, r25	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     984:	77 9b       	sbis	0x0e, 7	; 14
     986:	fe cf       	rjmp	.-4      	; 0x984 <SD_GetSize+0x6a>
 unsigned char res=SPDR;
     988:	8f b1       	in	r24, 0x0f	; 15
  if (SD_TransmitData(0xff)==0xfe) break;//получено начало ответа
  _delay_us(10);
 }
 if (n==65535) return(0xffff);//ответ не принят
 unsigned char b[16];
 for(n=0;n<16;n++) b[n]=SD_TransmitData(0xff);
     98a:	81 93       	st	Z+, r24
     98c:	e2 17       	cp	r30, r18
     98e:	f3 07       	cpc	r31, r19
     990:	c1 f7       	brne	.-16     	; 0x982 <SD_GetSize+0x68>
     992:	80 e0       	ldi	r24, 0x00	; 0
     994:	90 e0       	ldi	r25, 0x00	; 0
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     996:	2f ef       	ldi	r18, 0xFF	; 255
     998:	2f b9       	out	0x0f, r18	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     99a:	77 9b       	sbis	0x0e, 7	; 14
     99c:	fe cf       	rjmp	.-4      	; 0x99a <SD_GetSize+0x80>
 unsigned char res=SPDR;
     99e:	3f b1       	in	r19, 0x0f	; 15
 }
 if (n==65535) return(0xffff);//ответ не принят
 unsigned char b[16];
 for(n=0;n<16;n++) b[n]=SD_TransmitData(0xff);
 //пустые байты
 for(n=0;n<255;n++) SD_TransmitData(0xff);
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	8f 3f       	cpi	r24, 0xFF	; 255
     9a4:	91 05       	cpc	r25, r1
     9a6:	c1 f7       	brne	.-16     	; 0x998 <SD_GetSize+0x7e>
 //смотрим размер карты памяти
 unsigned long c_size=GetBits(b,73,62);
     9a8:	8e 01       	movw	r16, r28
     9aa:	0f 5f       	subi	r16, 0xFF	; 255
     9ac:	1f 4f       	sbci	r17, 0xFF	; 255
     9ae:	c8 01       	movw	r24, r16
     9b0:	69 e4       	ldi	r22, 0x49	; 73
     9b2:	4e e3       	ldi	r20, 0x3E	; 62
     9b4:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <GetBits>
     9b8:	6c 01       	movw	r12, r24
 unsigned long c_size_mult=GetBits(b,49,47);
     9ba:	c8 01       	movw	r24, r16
     9bc:	61 e3       	ldi	r22, 0x31	; 49
     9be:	4f e2       	ldi	r20, 0x2F	; 47
     9c0:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <GetBits>
 unsigned long blocks=(c_size+1UL)*(1UL<<(c_size_mult+2UL));
     9c4:	ee 24       	eor	r14, r14
     9c6:	ff 24       	eor	r15, r15
     9c8:	08 94       	sec
     9ca:	c1 1c       	adc	r12, r1
     9cc:	d1 1c       	adc	r13, r1
     9ce:	e1 1c       	adc	r14, r1
     9d0:	f1 1c       	adc	r15, r1
     9d2:	02 96       	adiw	r24, 0x02	; 2
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <SD_GetSize+0xc4>
     9d6:	cc 0c       	add	r12, r12
     9d8:	dd 1c       	adc	r13, r13
     9da:	ee 1c       	adc	r14, r14
     9dc:	ff 1c       	adc	r15, r15
     9de:	8a 95       	dec	r24
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <SD_GetSize+0xbc>
 unsigned long read_bl_len=GetBits(b,83,80);
     9e2:	c8 01       	movw	r24, r16
     9e4:	63 e5       	ldi	r22, 0x53	; 83
     9e6:	40 e5       	ldi	r20, 0x50	; 80
     9e8:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <GetBits>
 blocks*=(1UL<<read_bl_len);
     9ec:	a7 01       	movw	r20, r14
     9ee:	96 01       	movw	r18, r12
     9f0:	04 c0       	rjmp	.+8      	; 0x9fa <SD_GetSize+0xe0>
     9f2:	22 0f       	add	r18, r18
     9f4:	33 1f       	adc	r19, r19
     9f6:	44 1f       	adc	r20, r20
     9f8:	55 1f       	adc	r21, r21
     9fa:	8a 95       	dec	r24
     9fc:	d2 f7       	brpl	.-12     	; 0x9f2 <SD_GetSize+0xd8>
     9fe:	04 c0       	rjmp	.+8      	; 0xa08 <SD_GetSize+0xee>
 return(blocks);
     a00:	2f ef       	ldi	r18, 0xFF	; 255
     a02:	3f ef       	ldi	r19, 0xFF	; 255
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
}
     a08:	b9 01       	movw	r22, r18
     a0a:	ca 01       	movw	r24, r20
     a0c:	60 96       	adiw	r28, 0x10	; 16
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	f8 94       	cli
     a12:	de bf       	out	0x3e, r29	; 62
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	cd bf       	out	0x3d, r28	; 61
     a18:	cf 91       	pop	r28
     a1a:	df 91       	pop	r29
     a1c:	1f 91       	pop	r17
     a1e:	0f 91       	pop	r16
     a20:	ff 90       	pop	r15
     a22:	ef 90       	pop	r14
     a24:	df 90       	pop	r13
     a26:	cf 90       	pop	r12
     a28:	08 95       	ret

00000a2a <SD_BeginReadBlock>:
}
//----------------------------------------------------------------------------------------------------
//начать чтение блока
//----------------------------------------------------------------------------------------------------
bool SD_BeginReadBlock(unsigned long BlockAddr)
{
     a2a:	6f 92       	push	r6
     a2c:	7f 92       	push	r7
     a2e:	8f 92       	push	r8
     a30:	9f 92       	push	r9
     a32:	af 92       	push	r10
     a34:	bf 92       	push	r11
     a36:	cf 92       	push	r12
     a38:	df 92       	push	r13
     a3a:	ef 92       	push	r14
     a3c:	ff 92       	push	r15
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	7b 01       	movw	r14, r22
     a44:	8c 01       	movw	r16, r24
 //даём команду чтения блока
 unsigned char a1=(unsigned char)((BlockAddr>>24)&0xff);
 unsigned char a2=(unsigned char)((BlockAddr>>16)&0xff);
 unsigned char a3=(unsigned char)((BlockAddr>>8)&0xff);
 unsigned char a4=(unsigned char)(BlockAddr&0xff);
 unsigned char res=SD_SendCommandR1(0x51,a1,a2,a3,a4);//посылаем CMD17
     a46:	29 2f       	mov	r18, r25
     a48:	33 27       	eor	r19, r19
     a4a:	44 27       	eor	r20, r20
     a4c:	55 27       	eor	r21, r21
     a4e:	58 01       	movw	r10, r16
     a50:	cc 24       	eor	r12, r12
     a52:	dd 24       	eor	r13, r13
     a54:	6f 2c       	mov	r6, r15
     a56:	70 2e       	mov	r7, r16
     a58:	81 2e       	mov	r8, r17
     a5a:	99 24       	eor	r9, r9
     a5c:	81 e5       	ldi	r24, 0x51	; 81
     a5e:	62 2f       	mov	r22, r18
     a60:	4a 2d       	mov	r20, r10
     a62:	26 2d       	mov	r18, r6
     a64:	0e 2d       	mov	r16, r14
     a66:	0e 94 1d 04 	call	0x83a	; 0x83a <SD_SendCommandR1>
 if (res!=0) return(false);//ошибка команды
     a6a:	88 23       	and	r24, r24
     a6c:	f9 f4       	brne	.+62     	; 0xaac <SD_BeginReadBlock+0x82>
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     a6e:	8f ef       	ldi	r24, 0xFF	; 255
     a70:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     a72:	77 9b       	sbis	0x0e, 7	; 14
     a74:	fe cf       	rjmp	.-4      	; 0xa72 <SD_BeginReadBlock+0x48>
 unsigned char res=SPDR;
     a76:	8f b1       	in	r24, 0x0f	; 15
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	30 e0       	ldi	r19, 0x00	; 0
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     a7c:	4f ef       	ldi	r20, 0xFF	; 255
     a7e:	95 e3       	ldi	r25, 0x35	; 53
     a80:	4f b9       	out	0x0f, r20	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     a82:	77 9b       	sbis	0x0e, 7	; 14
     a84:	fe cf       	rjmp	.-4      	; 0xa82 <SD_BeginReadBlock+0x58>
 unsigned char res=SPDR;
     a86:	8f b1       	in	r24, 0x0f	; 15
 //ждём начало поступления данных
 unsigned short n;
 for(n=0;n<65535;n++)
 {
  res=SD_TransmitData(0xff);
  if (res==0xfe) break;//маркер получен
     a88:	8e 3f       	cpi	r24, 0xFE	; 254
     a8a:	51 f0       	breq	.+20     	; 0xaa0 <SD_BeginReadBlock+0x76>
     a8c:	89 2f       	mov	r24, r25
     a8e:	8a 95       	dec	r24
     a90:	f1 f7       	brne	.-4      	; 0xa8e <SD_BeginReadBlock+0x64>
 unsigned char res=SD_SendCommandR1(0x51,a1,a2,a3,a4);//посылаем CMD17
 if (res!=0) return(false);//ошибка команды
 SD_TransmitData(0xff);//байтовый промежуток
 //ждём начало поступления данных
 unsigned short n;
 for(n=0;n<65535;n++)
     a92:	2f 5f       	subi	r18, 0xFF	; 255
     a94:	3f 4f       	sbci	r19, 0xFF	; 255
     a96:	8f ef       	ldi	r24, 0xFF	; 255
     a98:	2f 3f       	cpi	r18, 0xFF	; 255
     a9a:	38 07       	cpc	r19, r24
     a9c:	89 f7       	brne	.-30     	; 0xa80 <SD_BeginReadBlock+0x56>
     a9e:	06 c0       	rjmp	.+12     	; 0xaac <SD_BeginReadBlock+0x82>
  res=SD_TransmitData(0xff);
  if (res==0xfe) break;//маркер получен
  _delay_us(10);
 }
 if (n==65535) return(false);//маркер начала данных не получен
 BlockByteCounter=0;
     aa0:	10 92 11 01 	sts	0x0111, r1
     aa4:	10 92 10 01 	sts	0x0110, r1
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	01 c0       	rjmp	.+2      	; 0xaae <SD_BeginReadBlock+0x84>
 return(true);
     aac:	80 e0       	ldi	r24, 0x00	; 0
}
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	df 90       	pop	r13
     ab8:	cf 90       	pop	r12
     aba:	bf 90       	pop	r11
     abc:	af 90       	pop	r10
     abe:	9f 90       	pop	r9
     ac0:	8f 90       	pop	r8
     ac2:	7f 90       	pop	r7
     ac4:	6f 90       	pop	r6
     ac6:	08 95       	ret

00000ac8 <SD_ReadBlockByte>:
//----------------------------------------------------------------------------------------------------
//считать байт блока
//----------------------------------------------------------------------------------------------------
bool SD_ReadBlockByte(unsigned char *byte)
{
     ac8:	fc 01       	movw	r30, r24
 if (BlockByteCounter>=512) return(false);
     aca:	80 91 10 01 	lds	r24, 0x0110
     ace:	90 91 11 01 	lds	r25, 0x0111
     ad2:	80 50       	subi	r24, 0x00	; 0
     ad4:	92 40       	sbci	r25, 0x02	; 2
     ad6:	10 f0       	brcs	.+4      	; 0xadc <SD_ReadBlockByte+0x14>
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	08 95       	ret
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     adc:	8f ef       	ldi	r24, 0xFF	; 255
     ade:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     ae0:	77 9b       	sbis	0x0e, 7	; 14
     ae2:	fe cf       	rjmp	.-4      	; 0xae0 <SD_ReadBlockByte+0x18>
 unsigned char res=SPDR;
     ae4:	8f b1       	in	r24, 0x0f	; 15
//считать байт блока
//----------------------------------------------------------------------------------------------------
bool SD_ReadBlockByte(unsigned char *byte)
{
 if (BlockByteCounter>=512) return(false);
 *byte=SD_TransmitData(0xff);//читаем байт с SD-карты
     ae6:	80 83       	st	Z, r24
 BlockByteCounter++;
     ae8:	80 91 10 01 	lds	r24, 0x0110
     aec:	90 91 11 01 	lds	r25, 0x0111
     af0:	01 96       	adiw	r24, 0x01	; 1
     af2:	90 93 11 01 	sts	0x0111, r25
     af6:	80 93 10 01 	sts	0x0110, r24
 if (BlockByteCounter==512)
     afa:	80 50       	subi	r24, 0x00	; 0
     afc:	92 40       	sbci	r25, 0x02	; 2
     afe:	11 f0       	breq	.+4      	; 0xb04 <SD_ReadBlockByte+0x3c>
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	08 95       	ret
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     b08:	77 9b       	sbis	0x0e, 7	; 14
     b0a:	fe cf       	rjmp	.-4      	; 0xb08 <SD_ReadBlockByte+0x40>
 unsigned char res=SPDR;
     b0c:	8f b1       	in	r24, 0x0f	; 15
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     b12:	77 9b       	sbis	0x0e, 7	; 14
     b14:	fe cf       	rjmp	.-4      	; 0xb12 <SD_ReadBlockByte+0x4a>
 unsigned char res=SPDR;
     b16:	8f b1       	in	r24, 0x0f	; 15
     b18:	81 e0       	ldi	r24, 0x01	; 1
  //считываем CRC
  SD_TransmitData(0xff);
  SD_TransmitData(0xff); 
 }
 return(true);
}
     b1a:	08 95       	ret

00000b1c <SD_ReadBlock>:
//----------------------------------------------------------------------------------------------------
//считать блок в 512 байт в память
//----------------------------------------------------------------------------------------------------
bool SD_ReadBlock(unsigned long BlockAddr,unsigned char *Addr)
{
     b1c:	6f 92       	push	r6
     b1e:	7f 92       	push	r7
     b20:	8f 92       	push	r8
     b22:	9f 92       	push	r9
     b24:	af 92       	push	r10
     b26:	bf 92       	push	r11
     b28:	cf 92       	push	r12
     b2a:	df 92       	push	r13
     b2c:	ef 92       	push	r14
     b2e:	ff 92       	push	r15
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	7b 01       	movw	r14, r22
     b3a:	8c 01       	movw	r16, r24
     b3c:	ea 01       	movw	r28, r20
 //даём команду чтения блока
 unsigned char a1=(unsigned char)((BlockAddr>>24)&0xff);
 unsigned char a2=(unsigned char)((BlockAddr>>16)&0xff);
 unsigned char a3=(unsigned char)((BlockAddr>>8)&0xff);
 unsigned char a4=(unsigned char)(BlockAddr&0xff);
 unsigned char res=SD_SendCommandR1(0x51,a1,a2,a3,a4);//посылаем CMD17
     b3e:	29 2f       	mov	r18, r25
     b40:	33 27       	eor	r19, r19
     b42:	44 27       	eor	r20, r20
     b44:	55 27       	eor	r21, r21
     b46:	5c 01       	movw	r10, r24
     b48:	cc 24       	eor	r12, r12
     b4a:	dd 24       	eor	r13, r13
     b4c:	67 2e       	mov	r6, r23
     b4e:	78 2e       	mov	r7, r24
     b50:	89 2e       	mov	r8, r25
     b52:	99 24       	eor	r9, r9
     b54:	81 e5       	ldi	r24, 0x51	; 81
     b56:	62 2f       	mov	r22, r18
     b58:	4a 2d       	mov	r20, r10
     b5a:	26 2d       	mov	r18, r6
     b5c:	0e 2d       	mov	r16, r14
     b5e:	0e 94 1d 04 	call	0x83a	; 0x83a <SD_SendCommandR1>
 if (res!=0) return(false);//ошибка команды
     b62:	88 23       	and	r24, r24
     b64:	a9 f5       	brne	.+106    	; 0xbd0 <SD_ReadBlock+0xb4>
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     b6a:	77 9b       	sbis	0x0e, 7	; 14
     b6c:	fe cf       	rjmp	.-4      	; 0xb6a <SD_ReadBlock+0x4e>
 unsigned char res=SPDR;
     b6e:	8f b1       	in	r24, 0x0f	; 15
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     b74:	4f ef       	ldi	r20, 0xFF	; 255
     b76:	95 e3       	ldi	r25, 0x35	; 53
     b78:	4f b9       	out	0x0f, r20	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     b7a:	77 9b       	sbis	0x0e, 7	; 14
     b7c:	fe cf       	rjmp	.-4      	; 0xb7a <SD_ReadBlock+0x5e>
 unsigned char res=SPDR;
     b7e:	8f b1       	in	r24, 0x0f	; 15
 //ждём начало поступления данных
 unsigned short n;
 for(n=0;n<65535;n++)
 {
  res=SD_TransmitData(0xff);
  if (res==0xfe) break;//маркер получен
     b80:	8e 3f       	cpi	r24, 0xFE	; 254
     b82:	51 f0       	breq	.+20     	; 0xb98 <SD_ReadBlock+0x7c>
     b84:	89 2f       	mov	r24, r25
     b86:	8a 95       	dec	r24
     b88:	f1 f7       	brne	.-4      	; 0xb86 <SD_ReadBlock+0x6a>
 unsigned char res=SD_SendCommandR1(0x51,a1,a2,a3,a4);//посылаем CMD17
 if (res!=0) return(false);//ошибка команды
 SD_TransmitData(0xff);//байтовый промежуток
 //ждём начало поступления данных
 unsigned short n;
 for(n=0;n<65535;n++)
     b8a:	2f 5f       	subi	r18, 0xFF	; 255
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	8f ef       	ldi	r24, 0xFF	; 255
     b90:	2f 3f       	cpi	r18, 0xFF	; 255
     b92:	38 07       	cpc	r19, r24
     b94:	89 f7       	brne	.-30     	; 0xb78 <SD_ReadBlock+0x5c>
     b96:	1c c0       	rjmp	.+56     	; 0xbd0 <SD_ReadBlock+0xb4>
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     b9c:	9f ef       	ldi	r25, 0xFF	; 255
     b9e:	9f b9       	out	0x0f, r25	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     ba0:	77 9b       	sbis	0x0e, 7	; 14
     ba2:	fe cf       	rjmp	.-4      	; 0xba0 <SD_ReadBlock+0x84>
 unsigned char res=SPDR;
     ba4:	8f b1       	in	r24, 0x0f	; 15
  _delay_us(10);
 }
 if (n==65535) return(false);//маркер начала данных не получен
 for(n=0;n<512;n++,Addr++)
 {
  *Addr=SD_TransmitData(0xff);//читаем байт с SD-карты
     ba6:	88 83       	st	Y, r24
  res=SD_TransmitData(0xff);
  if (res==0xfe) break;//маркер получен
  _delay_us(10);
 }
 if (n==65535) return(false);//маркер начала данных не получен
 for(n=0;n<512;n++,Addr++)
     ba8:	2f 5f       	subi	r18, 0xFF	; 255
     baa:	3f 4f       	sbci	r19, 0xFF	; 255
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	20 30       	cpi	r18, 0x00	; 0
     bb0:	38 07       	cpc	r19, r24
     bb2:	11 f0       	breq	.+4      	; 0xbb8 <SD_ReadBlock+0x9c>
     bb4:	21 96       	adiw	r28, 0x01	; 1
     bb6:	f3 cf       	rjmp	.-26     	; 0xb9e <SD_ReadBlock+0x82>
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     bb8:	8f ef       	ldi	r24, 0xFF	; 255
     bba:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     bbc:	77 9b       	sbis	0x0e, 7	; 14
     bbe:	fe cf       	rjmp	.-4      	; 0xbbc <SD_ReadBlock+0xa0>
 unsigned char res=SPDR;
     bc0:	8f b1       	in	r24, 0x0f	; 15
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
     bc2:	8f ef       	ldi	r24, 0xFF	; 255
     bc4:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
     bc6:	77 9b       	sbis	0x0e, 7	; 14
     bc8:	fe cf       	rjmp	.-4      	; 0xbc6 <SD_ReadBlock+0xaa>
 unsigned char res=SPDR;
     bca:	8f b1       	in	r24, 0x0f	; 15
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	01 c0       	rjmp	.+2      	; 0xbd2 <SD_ReadBlock+0xb6>
  *Addr=SD_TransmitData(0xff);//читаем байт с SD-карты
 }
 //считываем CRC
 SD_TransmitData(0xff);
 SD_TransmitData(0xff); 
 return(true);
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	ff 90       	pop	r15
     bdc:	ef 90       	pop	r14
     bde:	df 90       	pop	r13
     be0:	cf 90       	pop	r12
     be2:	bf 90       	pop	r11
     be4:	af 90       	pop	r10
     be6:	9f 90       	pop	r9
     be8:	8f 90       	pop	r8
     bea:	7f 90       	pop	r7
     bec:	6f 90       	pop	r6
     bee:	08 95       	ret

00000bf0 <GetByte>:
}
//----------------------------------------------------------------------------------------------------
//считать байт
//----------------------------------------------------------------------------------------------------
unsigned long GetByte(unsigned long offset)
{
     bf0:	ef 92       	push	r14
     bf2:	ff 92       	push	r15
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	7b 01       	movw	r14, r22
     bfa:	8c 01       	movw	r16, r24
 offset+=FATOffset;
     bfc:	80 91 1e 01 	lds	r24, 0x011E
     c00:	90 91 1f 01 	lds	r25, 0x011F
     c04:	a0 91 20 01 	lds	r26, 0x0120
     c08:	b0 91 21 01 	lds	r27, 0x0121
     c0c:	e8 0e       	add	r14, r24
     c0e:	f9 1e       	adc	r15, r25
     c10:	0a 1f       	adc	r16, r26
     c12:	1b 1f       	adc	r17, r27
 unsigned long s=offset>>9UL;//делим на 512
     c14:	a8 01       	movw	r20, r16
     c16:	97 01       	movw	r18, r14
     c18:	09 e0       	ldi	r16, 0x09	; 9
     c1a:	56 95       	lsr	r21
     c1c:	47 95       	ror	r20
     c1e:	37 95       	ror	r19
     c20:	27 95       	ror	r18
     c22:	0a 95       	dec	r16
     c24:	d1 f7       	brne	.-12     	; 0xc1a <GetByte+0x2a>
 if (s!=LastReadSector)
     c26:	80 91 12 01 	lds	r24, 0x0112
     c2a:	90 91 13 01 	lds	r25, 0x0113
     c2e:	a0 91 14 01 	lds	r26, 0x0114
     c32:	b0 91 15 01 	lds	r27, 0x0115
     c36:	28 17       	cp	r18, r24
     c38:	39 07       	cpc	r19, r25
     c3a:	4a 07       	cpc	r20, r26
     c3c:	5b 07       	cpc	r21, r27
     c3e:	a9 f0       	breq	.+42     	; 0xc6a <GetByte+0x7a>
 {
  LastReadSector=s;
     c40:	20 93 12 01 	sts	0x0112, r18
     c44:	30 93 13 01 	sts	0x0113, r19
     c48:	40 93 14 01 	sts	0x0114, r20
     c4c:	50 93 15 01 	sts	0x0115, r21
  s<<=9UL;
  SD_ReadBlock(s,Sector);
     c50:	19 e0       	ldi	r17, 0x09	; 9
     c52:	22 0f       	add	r18, r18
     c54:	33 1f       	adc	r19, r19
     c56:	44 1f       	adc	r20, r20
     c58:	55 1f       	adc	r21, r21
     c5a:	1a 95       	dec	r17
     c5c:	d1 f7       	brne	.-12     	; 0xc52 <GetByte+0x62>
     c5e:	ca 01       	movw	r24, r20
     c60:	b9 01       	movw	r22, r18
     c62:	48 e2       	ldi	r20, 0x28	; 40
     c64:	51 e0       	ldi	r21, 0x01	; 1
     c66:	0e 94 8e 05 	call	0xb1c	; 0xb1c <SD_ReadBlock>
     c6a:	f7 01       	movw	r30, r14
     c6c:	f1 70       	andi	r31, 0x01	; 1
     c6e:	e8 5d       	subi	r30, 0xD8	; 216
     c70:	fe 4f       	sbci	r31, 0xFE	; 254
     c72:	60 81       	ld	r22, Z
  //ошибки не проверяем, всё равно ничего сделать не сможем - либо работает, либо нет
 }
 return(Sector[offset&0x1FFUL]);
}
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	1f 91       	pop	r17
     c7c:	0f 91       	pop	r16
     c7e:	ff 90       	pop	r15
     c80:	ef 90       	pop	r14
     c82:	08 95       	ret

00000c84 <GetShort>:
//----------------------------------------------------------------------------------------------------
//считать два байта
//----------------------------------------------------------------------------------------------------
unsigned long GetShort(unsigned long offset)
{
     c84:	af 92       	push	r10
     c86:	bf 92       	push	r11
     c88:	cf 92       	push	r12
     c8a:	df 92       	push	r13
     c8c:	ef 92       	push	r14
     c8e:	ff 92       	push	r15
     c90:	0f 93       	push	r16
     c92:	1f 93       	push	r17
     c94:	5b 01       	movw	r10, r22
     c96:	6c 01       	movw	r12, r24
 unsigned long v=GetByte(offset+1UL);
     c98:	6f 5f       	subi	r22, 0xFF	; 255
     c9a:	7f 4f       	sbci	r23, 0xFF	; 255
     c9c:	8f 4f       	sbci	r24, 0xFF	; 255
     c9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ca0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
     ca4:	7b 01       	movw	r14, r22
     ca6:	8c 01       	movw	r16, r24
 v<<=8UL;
     ca8:	10 2f       	mov	r17, r16
     caa:	0f 2d       	mov	r16, r15
     cac:	fe 2c       	mov	r15, r14
     cae:	ee 24       	eor	r14, r14
 v|=GetByte(offset);
     cb0:	c6 01       	movw	r24, r12
     cb2:	b5 01       	movw	r22, r10
     cb4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
     cb8:	9b 01       	movw	r18, r22
     cba:	ac 01       	movw	r20, r24
     cbc:	2e 29       	or	r18, r14
     cbe:	3f 29       	or	r19, r15
     cc0:	40 2b       	or	r20, r16
     cc2:	51 2b       	or	r21, r17
 return(v);
}
     cc4:	b9 01       	movw	r22, r18
     cc6:	ca 01       	movw	r24, r20
     cc8:	1f 91       	pop	r17
     cca:	0f 91       	pop	r16
     ccc:	ff 90       	pop	r15
     cce:	ef 90       	pop	r14
     cd0:	df 90       	pop	r13
     cd2:	cf 90       	pop	r12
     cd4:	bf 90       	pop	r11
     cd6:	af 90       	pop	r10
     cd8:	08 95       	ret

00000cda <FAT_RecordPointerStepReverse>:
}
//----------------------------------------------------------------------------------------------------
//переместиться по записи назад
//----------------------------------------------------------------------------------------------------
bool FAT_RecordPointerStepReverse(struct SFATRecordPointer *sFATRecordPointerPtr)
{
     cda:	2f 92       	push	r2
     cdc:	3f 92       	push	r3
     cde:	4f 92       	push	r4
     ce0:	5f 92       	push	r5
     ce2:	6f 92       	push	r6
     ce4:	7f 92       	push	r7
     ce6:	8f 92       	push	r8
     ce8:	9f 92       	push	r9
     cea:	af 92       	push	r10
     cec:	bf 92       	push	r11
     cee:	cf 92       	push	r12
     cf0:	df 92       	push	r13
     cf2:	ef 92       	push	r14
     cf4:	ff 92       	push	r15
     cf6:	0f 93       	push	r16
     cf8:	1f 93       	push	r17
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	ec 01       	movw	r28, r24
 sFATRecordPointerPtr->CurrentFolderAddr-=32UL;//возвращаемся на запись назад 
     d00:	8c 81       	ldd	r24, Y+4	; 0x04
     d02:	9d 81       	ldd	r25, Y+5	; 0x05
     d04:	ae 81       	ldd	r26, Y+6	; 0x06
     d06:	bf 81       	ldd	r27, Y+7	; 0x07
     d08:	80 97       	sbiw	r24, 0x20	; 32
     d0a:	a1 09       	sbc	r26, r1
     d0c:	b1 09       	sbc	r27, r1
     d0e:	8c 83       	std	Y+4, r24	; 0x04
     d10:	9d 83       	std	Y+5, r25	; 0x05
     d12:	ae 83       	std	Y+6, r26	; 0x06
     d14:	bf 83       	std	Y+7, r27	; 0x07
 if (sFATRecordPointerPtr->CurrentFolderAddr<sFATRecordPointerPtr->BeginFolderClusterAddr)//вышли за нижнюю границу кластера
     d16:	28 89       	ldd	r18, Y+16	; 0x10
     d18:	39 89       	ldd	r19, Y+17	; 0x11
     d1a:	4a 89       	ldd	r20, Y+18	; 0x12
     d1c:	5b 89       	ldd	r21, Y+19	; 0x13
     d1e:	82 17       	cp	r24, r18
     d20:	93 07       	cpc	r25, r19
     d22:	a4 07       	cpc	r26, r20
     d24:	b5 07       	cpc	r27, r21
     d26:	08 f0       	brcs	.+2      	; 0xd2a <FAT_RecordPointerStepReverse+0x50>
     d28:	b4 c0       	rjmp	.+360    	; 0xe92 <FAT_RecordPointerStepReverse+0x1b8>
 {
  if (sFATRecordPointerPtr->BeginFolderAddr==FirstRootFolderAddr)//если у нас корневая директория
     d2a:	28 81       	ld	r18, Y
     d2c:	39 81       	ldd	r19, Y+1	; 0x01
     d2e:	4a 81       	ldd	r20, Y+2	; 0x02
     d30:	5b 81       	ldd	r21, Y+3	; 0x03
     d32:	80 91 81 03 	lds	r24, 0x0381
     d36:	90 91 82 03 	lds	r25, 0x0382
     d3a:	a0 91 83 03 	lds	r26, 0x0383
     d3e:	b0 91 84 03 	lds	r27, 0x0384
     d42:	28 17       	cp	r18, r24
     d44:	39 07       	cpc	r19, r25
     d46:	4a 07       	cpc	r20, r26
     d48:	5b 07       	cpc	r21, r27
     d4a:	09 f4       	brne	.+2      	; 0xd4e <FAT_RecordPointerStepReverse+0x74>
     d4c:	a4 c0       	rjmp	.+328    	; 0xe96 <FAT_RecordPointerStepReverse+0x1bc>
  {
   return(false);//вышли за пределы директории   
  }  
  else//для не корневой директории узнаём новый адрес
  {
   unsigned long PrevCluster=sFATRecordPointerPtr->BeginFolderCluster;//предыдущий кластер   
     d4e:	28 84       	ldd	r2, Y+8	; 0x08
     d50:	39 84       	ldd	r3, Y+9	; 0x09
     d52:	4a 84       	ldd	r4, Y+10	; 0x0a
     d54:	5b 84       	ldd	r5, Y+11	; 0x0b
   while(1)
   {
    unsigned long FATClusterOffset=0;//смещение по таблице FAT в байтах (в FAT32 они 4-х байтные, а в FAT16 - двухбайтные)
    if (FATType==FAT16) FATClusterOffset=PrevCluster*2UL;
     d56:	80 91 22 01 	lds	r24, 0x0122
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	21 f0       	breq	.+8      	; 0xd66 <FAT_RecordPointerStepReverse+0x8c>
     d5e:	ee 24       	eor	r14, r14
     d60:	ff 24       	eor	r15, r15
     d62:	87 01       	movw	r16, r14
     d64:	06 c0       	rjmp	.+12     	; 0xd72 <FAT_RecordPointerStepReverse+0x98>
     d66:	82 01       	movw	r16, r4
     d68:	71 01       	movw	r14, r2
     d6a:	ee 0c       	add	r14, r14
     d6c:	ff 1c       	adc	r15, r15
     d6e:	00 1f       	adc	r16, r16
     d70:	11 1f       	adc	r17, r17
    unsigned long ClusterAddr=ResvdSecCnt*BytsPerSec+FATClusterOffset;//адрес предыдущего кластера
	unsigned long cluster=GetShort(ClusterAddr);
     d72:	60 91 6d 03 	lds	r22, 0x036D
     d76:	70 91 6e 03 	lds	r23, 0x036E
     d7a:	80 91 6f 03 	lds	r24, 0x036F
     d7e:	90 91 70 03 	lds	r25, 0x0370
     d82:	20 91 4d 03 	lds	r18, 0x034D
     d86:	30 91 4e 03 	lds	r19, 0x034E
     d8a:	40 91 4f 03 	lds	r20, 0x034F
     d8e:	50 91 50 03 	lds	r21, 0x0350
     d92:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
     d96:	e6 0e       	add	r14, r22
     d98:	f7 1e       	adc	r15, r23
     d9a:	08 1f       	adc	r16, r24
     d9c:	19 1f       	adc	r17, r25
     d9e:	c8 01       	movw	r24, r16
     da0:	b7 01       	movw	r22, r14
     da2:	0e 94 42 06 	call	0xc84	; 0xc84 <GetShort>
     da6:	7b 01       	movw	r14, r22
     da8:	8c 01       	movw	r16, r24
    if (cluster<=2 || cluster>=FAT16_EOC)//такого кластера нет
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	03 97       	sbiw	r24, 0x03	; 3
     db0:	a1 09       	sbc	r26, r1
     db2:	b1 09       	sbc	r27, r1
     db4:	85 5f       	subi	r24, 0xF5	; 245
     db6:	9f 4f       	sbci	r25, 0xFF	; 255
     db8:	a0 40       	sbci	r26, 0x00	; 0
     dba:	b0 40       	sbci	r27, 0x00	; 0
     dbc:	08 f0       	brcs	.+2      	; 0xdc0 <FAT_RecordPointerStepReverse+0xe6>
     dbe:	6b c0       	rjmp	.+214    	; 0xe96 <FAT_RecordPointerStepReverse+0x1bc>
	{
     return(false);//вышли за пределы директории        	
	}
	if (cluster==sFATRecordPointerPtr->CurrentFolderCluster) break;//мы нашли предшествующий кластер
     dc0:	8c 85       	ldd	r24, Y+12	; 0x0c
     dc2:	9d 85       	ldd	r25, Y+13	; 0x0d
     dc4:	ae 85       	ldd	r26, Y+14	; 0x0e
     dc6:	bf 85       	ldd	r27, Y+15	; 0x0f
     dc8:	e8 16       	cp	r14, r24
     dca:	f9 06       	cpc	r15, r25
     dcc:	0a 07       	cpc	r16, r26
     dce:	1b 07       	cpc	r17, r27
     dd0:	29 f0       	breq	.+10     	; 0xddc <FAT_RecordPointerStepReverse+0x102>
     dd2:	c7 01       	movw	r24, r14
     dd4:	d8 01       	movw	r26, r16
     dd6:	1c 01       	movw	r2, r24
     dd8:	2d 01       	movw	r4, r26
     dda:	bd cf       	rjmp	.-134    	; 0xd56 <FAT_RecordPointerStepReverse+0x7c>
	PrevCluster=cluster;
   }
   if (PrevCluster<=2 || PrevCluster>=FAT16_EOC)//такого кластера нет
     ddc:	d2 01       	movw	r26, r4
     dde:	c1 01       	movw	r24, r2
     de0:	03 97       	sbiw	r24, 0x03	; 3
     de2:	a1 09       	sbc	r26, r1
     de4:	b1 09       	sbc	r27, r1
     de6:	85 5f       	subi	r24, 0xF5	; 245
     de8:	9f 4f       	sbci	r25, 0xFF	; 255
     dea:	a0 40       	sbci	r26, 0x00	; 0
     dec:	b0 40       	sbci	r27, 0x00	; 0
     dee:	08 f0       	brcs	.+2      	; 0xdf2 <FAT_RecordPointerStepReverse+0x118>
     df0:	52 c0       	rjmp	.+164    	; 0xe96 <FAT_RecordPointerStepReverse+0x1bc>
   {
    return(false);//вышли за пределы директории        	
   }
   sFATRecordPointerPtr->CurrentFolderCluster=PrevCluster;//переходим к предыдущему кластеру
     df2:	2c 86       	std	Y+12, r2	; 0x0c
     df4:	3d 86       	std	Y+13, r3	; 0x0d
     df6:	4e 86       	std	Y+14, r4	; 0x0e
     df8:	5f 86       	std	Y+15, r5	; 0x0f
   unsigned long FirstSectorofCluster=((sFATRecordPointerPtr->CurrentFolderCluster-2UL)*SecPerClus)+FirstDataSector; 
     dfa:	60 90 45 03 	lds	r6, 0x0345
     dfe:	70 90 46 03 	lds	r7, 0x0346
     e02:	80 90 47 03 	lds	r8, 0x0347
     e06:	90 90 48 03 	lds	r9, 0x0348
   sFATRecordPointerPtr->BeginFolderClusterAddr=FirstSectorofCluster*BytsPerSec; 	
     e0a:	a0 90 6d 03 	lds	r10, 0x036D
     e0e:	b0 90 6e 03 	lds	r11, 0x036E
     e12:	c0 90 6f 03 	lds	r12, 0x036F
     e16:	d0 90 70 03 	lds	r13, 0x0370
     e1a:	8e ef       	ldi	r24, 0xFE	; 254
     e1c:	9f ef       	ldi	r25, 0xFF	; 255
     e1e:	af ef       	ldi	r26, 0xFF	; 255
     e20:	bf ef       	ldi	r27, 0xFF	; 255
     e22:	28 0e       	add	r2, r24
     e24:	39 1e       	adc	r3, r25
     e26:	4a 1e       	adc	r4, r26
     e28:	5b 1e       	adc	r5, r27
     e2a:	c2 01       	movw	r24, r4
     e2c:	b1 01       	movw	r22, r2
     e2e:	a4 01       	movw	r20, r8
     e30:	93 01       	movw	r18, r6
     e32:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
     e36:	9b 01       	movw	r18, r22
     e38:	ac 01       	movw	r20, r24
     e3a:	60 91 41 03 	lds	r22, 0x0341
     e3e:	70 91 42 03 	lds	r23, 0x0342
     e42:	80 91 43 03 	lds	r24, 0x0343
     e46:	90 91 44 03 	lds	r25, 0x0344
     e4a:	62 0f       	add	r22, r18
     e4c:	73 1f       	adc	r23, r19
     e4e:	84 1f       	adc	r24, r20
     e50:	95 1f       	adc	r25, r21
     e52:	a6 01       	movw	r20, r12
     e54:	95 01       	movw	r18, r10
     e56:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
     e5a:	7b 01       	movw	r14, r22
     e5c:	8c 01       	movw	r16, r24
     e5e:	68 8b       	std	Y+16, r22	; 0x10
     e60:	79 8b       	std	Y+17, r23	; 0x11
     e62:	8a 8b       	std	Y+18, r24	; 0x12
     e64:	9b 8b       	std	Y+19, r25	; 0x13
   sFATRecordPointerPtr->EndFolderClusterAddr=sFATRecordPointerPtr->BeginFolderClusterAddr+SecPerClus*BytsPerSec;
     e66:	c6 01       	movw	r24, r12
     e68:	b5 01       	movw	r22, r10
     e6a:	a4 01       	movw	r20, r8
     e6c:	93 01       	movw	r18, r6
     e6e:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
     e72:	6e 0d       	add	r22, r14
     e74:	7f 1d       	adc	r23, r15
     e76:	80 1f       	adc	r24, r16
     e78:	91 1f       	adc	r25, r17
     e7a:	6c 8b       	std	Y+20, r22	; 0x14
     e7c:	7d 8b       	std	Y+21, r23	; 0x15
     e7e:	8e 8b       	std	Y+22, r24	; 0x16
     e80:	9f 8b       	std	Y+23, r25	; 0x17
   sFATRecordPointerPtr->CurrentFolderAddr=sFATRecordPointerPtr->EndFolderClusterAddr-32UL;//на запись назад
     e82:	60 52       	subi	r22, 0x20	; 32
     e84:	70 40       	sbci	r23, 0x00	; 0
     e86:	80 40       	sbci	r24, 0x00	; 0
     e88:	90 40       	sbci	r25, 0x00	; 0
     e8a:	6c 83       	std	Y+4, r22	; 0x04
     e8c:	7d 83       	std	Y+5, r23	; 0x05
     e8e:	8e 83       	std	Y+6, r24	; 0x06
     e90:	9f 83       	std	Y+7, r25	; 0x07
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <FAT_RecordPointerStepReverse+0x1be>
     e96:	80 e0       	ldi	r24, 0x00	; 0
  }
 }
 return(true);
}
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	bf 90       	pop	r11
     eaa:	af 90       	pop	r10
     eac:	9f 90       	pop	r9
     eae:	8f 90       	pop	r8
     eb0:	7f 90       	pop	r7
     eb2:	6f 90       	pop	r6
     eb4:	5f 90       	pop	r5
     eb6:	4f 90       	pop	r4
     eb8:	3f 90       	pop	r3
     eba:	2f 90       	pop	r2
     ebc:	08 95       	ret

00000ebe <FAT_PrevFileSearch>:
}
//----------------------------------------------------------------------------------------------------
//перейти к предыдущему файлу в каталоге
//----------------------------------------------------------------------------------------------------
bool FAT_PrevFileSearch(void)
{
     ebe:	af 92       	push	r10
     ec0:	bf 92       	push	r11
     ec2:	cf 92       	push	r12
     ec4:	df 92       	push	r13
     ec6:	ef 92       	push	r14
     ec8:	ff 92       	push	r15
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	68 97       	sbiw	r28, 0x18	; 24
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	f8 94       	cli
     edc:	de bf       	out	0x3e, r29	; 62
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	cd bf       	out	0x3d, r28	; 61
 struct SFATRecordPointer sFATRecordPointer_Copy=sFATRecordPointer;
     ee2:	de 01       	movw	r26, r28
     ee4:	11 96       	adiw	r26, 0x01	; 1
     ee6:	e5 e5       	ldi	r30, 0x55	; 85
     ee8:	f3 e0       	ldi	r31, 0x03	; 3
     eea:	88 e1       	ldi	r24, 0x18	; 24
     eec:	01 90       	ld	r0, Z+
     eee:	0d 92       	st	X+, r0
     ef0:	81 50       	subi	r24, 0x01	; 1
     ef2:	e1 f7       	brne	.-8      	; 0xeec <FAT_PrevFileSearch+0x2e>
 while(1)
 {
  if (FAT_RecordPointerStepReverse(&sFATRecordPointer_Copy)==false) return(false);  
     ef4:	5e 01       	movw	r10, r28
     ef6:	08 94       	sec
     ef8:	a1 1c       	adc	r10, r1
     efa:	b1 1c       	adc	r11, r1
     efc:	c5 01       	movw	r24, r10
     efe:	0e 94 6d 06 	call	0xcda	; 0xcda <FAT_RecordPointerStepReverse>
     f02:	88 23       	and	r24, r24
     f04:	09 f4       	brne	.+2      	; 0xf08 <FAT_PrevFileSearch+0x4a>
     f06:	6e c0       	rjmp	.+220    	; 0xfe4 <FAT_PrevFileSearch+0x126>
     f08:	cc 24       	eor	r12, r12
     f0a:	dd 24       	eor	r13, r13
     f0c:	76 01       	movw	r14, r12
  //анализируем имя файла
  unsigned char n;
  bool res=true;
  for(n=0;n<11;n++)
  {
   unsigned char b=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+(unsigned long)(n));
     f0e:	6d 81       	ldd	r22, Y+5	; 0x05
     f10:	7e 81       	ldd	r23, Y+6	; 0x06
     f12:	8f 81       	ldd	r24, Y+7	; 0x07
     f14:	98 85       	ldd	r25, Y+8	; 0x08
     f16:	6c 0d       	add	r22, r12
     f18:	7d 1d       	adc	r23, r13
     f1a:	8e 1d       	adc	r24, r14
     f1c:	9f 1d       	adc	r25, r15
     f1e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
     f22:	8c 2d       	mov	r24, r12
   if (n==0)
     f24:	cc 20       	and	r12, r12
     f26:	21 f4       	brne	.+8      	; 0xf30 <FAT_PrevFileSearch+0x72>
   {
    if (b==0x20 || b==0xE5)
     f28:	60 32       	cpi	r22, 0x20	; 32
     f2a:	41 f3       	breq	.-48     	; 0xefc <FAT_PrevFileSearch+0x3e>
     f2c:	65 3e       	cpi	r22, 0xE5	; 229
     f2e:	31 f3       	breq	.-52     	; 0xefc <FAT_PrevFileSearch+0x3e>
	{
     res=false;
     break;	
	}
   }
   if (b<0x20)
     f30:	60 32       	cpi	r22, 0x20	; 32
     f32:	20 f3       	brcs	.-56     	; 0xefc <FAT_PrevFileSearch+0x3e>
   {
    res=false;
    break;
   }
   if (n==1)
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	a9 f4       	brne	.+42     	; 0xf62 <FAT_PrevFileSearch+0xa4>
   {
    unsigned char a=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr);
     f38:	6d 81       	ldd	r22, Y+5	; 0x05
     f3a:	7e 81       	ldd	r23, Y+6	; 0x06
     f3c:	8f 81       	ldd	r24, Y+7	; 0x07
     f3e:	98 85       	ldd	r25, Y+8	; 0x08
     f40:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
     f44:	16 2f       	mov	r17, r22
    unsigned char b=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+1UL);
     f46:	6d 81       	ldd	r22, Y+5	; 0x05
     f48:	7e 81       	ldd	r23, Y+6	; 0x06
     f4a:	8f 81       	ldd	r24, Y+7	; 0x07
     f4c:	98 85       	ldd	r25, Y+8	; 0x08
     f4e:	6f 5f       	subi	r22, 0xFF	; 255
     f50:	7f 4f       	sbci	r23, 0xFF	; 255
     f52:	8f 4f       	sbci	r24, 0xFF	; 255
     f54:	9f 4f       	sbci	r25, 0xFF	; 255
     f56:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    if (a==(unsigned char)'.' && b!=(unsigned char)'.')
     f5a:	1e 32       	cpi	r17, 0x2E	; 46
     f5c:	11 f4       	brne	.+4      	; 0xf62 <FAT_PrevFileSearch+0xa4>
     f5e:	6e 32       	cpi	r22, 0x2E	; 46
     f60:	69 f6       	brne	.-102    	; 0xefc <FAT_PrevFileSearch+0x3e>
     f62:	08 94       	sec
     f64:	c1 1c       	adc	r12, r1
     f66:	d1 1c       	adc	r13, r1
     f68:	e1 1c       	adc	r14, r1
     f6a:	f1 1c       	adc	r15, r1
 {
  if (FAT_RecordPointerStepReverse(&sFATRecordPointer_Copy)==false) return(false);  
  //анализируем имя файла
  unsigned char n;
  bool res=true;
  for(n=0;n<11;n++)
     f6c:	8b e0       	ldi	r24, 0x0B	; 11
     f6e:	c8 16       	cp	r12, r24
     f70:	d1 04       	cpc	r13, r1
     f72:	e1 04       	cpc	r14, r1
     f74:	f1 04       	cpc	r15, r1
     f76:	59 f6       	brne	.-106    	; 0xf0e <FAT_PrevFileSearch+0x50>
     f78:	46 c0       	rjmp	.+140    	; 0x1006 <FAT_PrevFileSearch+0x148>
  //смотрим расширение
  if (res==true)
  {  
   unsigned char type=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+11UL);
   if (type&ATTR_VOLUME_ID) continue;//этот файл - имя диска     
   if ((type&ATTR_DIRECTORY)==0)//это файл
     f7a:	64 fd       	sbrc	r22, 4
     f7c:	29 c0       	rjmp	.+82     	; 0xfd0 <FAT_PrevFileSearch+0x112>
   {
    unsigned char a=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+10UL);
     f7e:	6d 81       	ldd	r22, Y+5	; 0x05
     f80:	7e 81       	ldd	r23, Y+6	; 0x06
     f82:	8f 81       	ldd	r24, Y+7	; 0x07
     f84:	98 85       	ldd	r25, Y+8	; 0x08
     f86:	66 5f       	subi	r22, 0xF6	; 246
     f88:	7f 4f       	sbci	r23, 0xFF	; 255
     f8a:	8f 4f       	sbci	r24, 0xFF	; 255
     f8c:	9f 4f       	sbci	r25, 0xFF	; 255
     f8e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
     f92:	16 2f       	mov	r17, r22
    unsigned char b=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+9UL);
     f94:	6d 81       	ldd	r22, Y+5	; 0x05
     f96:	7e 81       	ldd	r23, Y+6	; 0x06
     f98:	8f 81       	ldd	r24, Y+7	; 0x07
     f9a:	98 85       	ldd	r25, Y+8	; 0x08
     f9c:	67 5f       	subi	r22, 0xF7	; 247
     f9e:	7f 4f       	sbci	r23, 0xFF	; 255
     fa0:	8f 4f       	sbci	r24, 0xFF	; 255
     fa2:	9f 4f       	sbci	r25, 0xFF	; 255
     fa4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
     fa8:	06 2f       	mov	r16, r22
    unsigned char c=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+8UL);
     faa:	6d 81       	ldd	r22, Y+5	; 0x05
     fac:	7e 81       	ldd	r23, Y+6	; 0x06
     fae:	8f 81       	ldd	r24, Y+7	; 0x07
     fb0:	98 85       	ldd	r25, Y+8	; 0x08
     fb2:	68 5f       	subi	r22, 0xF8	; 248
     fb4:	7f 4f       	sbci	r23, 0xFF	; 255
     fb6:	8f 4f       	sbci	r24, 0xFF	; 255
     fb8:	9f 4f       	sbci	r25, 0xFF	; 255
     fba:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    if (!(a=='P' && b=='A' && c=='T')) continue;//неверное расширение
     fbe:	10 35       	cpi	r17, 0x50	; 80
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <FAT_PrevFileSearch+0x106>
     fc2:	9c cf       	rjmp	.-200    	; 0xefc <FAT_PrevFileSearch+0x3e>
     fc4:	01 34       	cpi	r16, 0x41	; 65
     fc6:	09 f0       	breq	.+2      	; 0xfca <FAT_PrevFileSearch+0x10c>
     fc8:	99 cf       	rjmp	.-206    	; 0xefc <FAT_PrevFileSearch+0x3e>
     fca:	64 35       	cpi	r22, 0x54	; 84
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <FAT_PrevFileSearch+0x112>
     fce:	96 cf       	rjmp	.-212    	; 0xefc <FAT_PrevFileSearch+0x3e>
   }
   sFATRecordPointer=sFATRecordPointer_Copy;
     fd0:	a5 e5       	ldi	r26, 0x55	; 85
     fd2:	b3 e0       	ldi	r27, 0x03	; 3
     fd4:	fe 01       	movw	r30, r28
     fd6:	31 96       	adiw	r30, 0x01	; 1
     fd8:	88 e1       	ldi	r24, 0x18	; 24
     fda:	01 90       	ld	r0, Z+
     fdc:	0d 92       	st	X+, r0
     fde:	81 50       	subi	r24, 0x01	; 1
     fe0:	e1 f7       	brne	.-8      	; 0xfda <FAT_PrevFileSearch+0x11c>
     fe2:	81 e0       	ldi	r24, 0x01	; 1
   return(true);
  }
 }
 return(false);
}
     fe4:	68 96       	adiw	r28, 0x18	; 24
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	cf 91       	pop	r28
     ff2:	df 91       	pop	r29
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	ff 90       	pop	r15
     ffa:	ef 90       	pop	r14
     ffc:	df 90       	pop	r13
     ffe:	cf 90       	pop	r12
    1000:	bf 90       	pop	r11
    1002:	af 90       	pop	r10
    1004:	08 95       	ret
   }   
  }
  //смотрим расширение
  if (res==true)
  {  
   unsigned char type=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+11UL);
    1006:	6d 81       	ldd	r22, Y+5	; 0x05
    1008:	7e 81       	ldd	r23, Y+6	; 0x06
    100a:	8f 81       	ldd	r24, Y+7	; 0x07
    100c:	98 85       	ldd	r25, Y+8	; 0x08
    100e:	65 5f       	subi	r22, 0xF5	; 245
    1010:	7f 4f       	sbci	r23, 0xFF	; 255
    1012:	8f 4f       	sbci	r24, 0xFF	; 255
    1014:	9f 4f       	sbci	r25, 0xFF	; 255
    1016:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
   if (type&ATTR_VOLUME_ID) continue;//этот файл - имя диска     
    101a:	63 fd       	sbrc	r22, 3
    101c:	6f cf       	rjmp	.-290    	; 0xefc <FAT_PrevFileSearch+0x3e>
    101e:	ad cf       	rjmp	.-166    	; 0xf7a <FAT_PrevFileSearch+0xbc>

00001020 <FAT_RecordPointerStepForward>:
}
//----------------------------------------------------------------------------------------------------
//переместиться по записи вперёд
//----------------------------------------------------------------------------------------------------
bool FAT_RecordPointerStepForward(struct SFATRecordPointer *sFATRecordPointerPtr)
{
    1020:	6f 92       	push	r6
    1022:	7f 92       	push	r7
    1024:	8f 92       	push	r8
    1026:	9f 92       	push	r9
    1028:	af 92       	push	r10
    102a:	bf 92       	push	r11
    102c:	cf 92       	push	r12
    102e:	df 92       	push	r13
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	ec 01       	movw	r28, r24
 sFATRecordPointerPtr->CurrentFolderAddr+=32UL;//переходим к следующей записи 
    103e:	8c 81       	ldd	r24, Y+4	; 0x04
    1040:	9d 81       	ldd	r25, Y+5	; 0x05
    1042:	ae 81       	ldd	r26, Y+6	; 0x06
    1044:	bf 81       	ldd	r27, Y+7	; 0x07
    1046:	80 96       	adiw	r24, 0x20	; 32
    1048:	a1 1d       	adc	r26, r1
    104a:	b1 1d       	adc	r27, r1
    104c:	8c 83       	std	Y+4, r24	; 0x04
    104e:	9d 83       	std	Y+5, r25	; 0x05
    1050:	ae 83       	std	Y+6, r26	; 0x06
    1052:	bf 83       	std	Y+7, r27	; 0x07
 if (sFATRecordPointerPtr->CurrentFolderAddr>=sFATRecordPointerPtr->EndFolderClusterAddr)//вышли за границу кластера или директории
    1054:	2c 89       	ldd	r18, Y+20	; 0x14
    1056:	3d 89       	ldd	r19, Y+21	; 0x15
    1058:	4e 89       	ldd	r20, Y+22	; 0x16
    105a:	5f 89       	ldd	r21, Y+23	; 0x17
    105c:	82 17       	cp	r24, r18
    105e:	93 07       	cpc	r25, r19
    1060:	a4 07       	cpc	r26, r20
    1062:	b5 07       	cpc	r27, r21
    1064:	08 f4       	brcc	.+2      	; 0x1068 <FAT_RecordPointerStepForward+0x48>
    1066:	a9 c0       	rjmp	.+338    	; 0x11ba <FAT_RecordPointerStepForward+0x19a>
 {
  if (sFATRecordPointerPtr->BeginFolderAddr==FirstRootFolderAddr)//если у нас закончилась корневая директория
    1068:	28 81       	ld	r18, Y
    106a:	39 81       	ldd	r19, Y+1	; 0x01
    106c:	4a 81       	ldd	r20, Y+2	; 0x02
    106e:	5b 81       	ldd	r21, Y+3	; 0x03
    1070:	80 91 81 03 	lds	r24, 0x0381
    1074:	90 91 82 03 	lds	r25, 0x0382
    1078:	a0 91 83 03 	lds	r26, 0x0383
    107c:	b0 91 84 03 	lds	r27, 0x0384
    1080:	28 17       	cp	r18, r24
    1082:	39 07       	cpc	r19, r25
    1084:	4a 07       	cpc	r20, r26
    1086:	5b 07       	cpc	r21, r27
    1088:	09 f4       	brne	.+2      	; 0x108c <FAT_RecordPointerStepForward+0x6c>
    108a:	99 c0       	rjmp	.+306    	; 0x11be <FAT_RecordPointerStepForward+0x19e>
   return(false);
  }  
  else//для не корневой директории узнаём новый адрес кластера
  {
   unsigned long FATClusterOffset=0;//смещение по таблице FAT в байтах (в FAT32 они 4-х байтные, а в FAT16 - двухбайтные)
   if (FATType==FAT16) FATClusterOffset=sFATRecordPointerPtr->CurrentFolderCluster*2UL;//узнаём смещение в таблице FAT
    108c:	e0 91 22 01 	lds	r30, 0x0122
    1090:	e1 30       	cpi	r30, 0x01	; 1
    1092:	21 f0       	breq	.+8      	; 0x109c <FAT_RecordPointerStepForward+0x7c>
    1094:	ee 24       	eor	r14, r14
    1096:	ff 24       	eor	r15, r15
    1098:	87 01       	movw	r16, r14
    109a:	08 c0       	rjmp	.+16     	; 0x10ac <FAT_RecordPointerStepForward+0x8c>
    109c:	ec 84       	ldd	r14, Y+12	; 0x0c
    109e:	fd 84       	ldd	r15, Y+13	; 0x0d
    10a0:	0e 85       	ldd	r16, Y+14	; 0x0e
    10a2:	1f 85       	ldd	r17, Y+15	; 0x0f
    10a4:	ee 0c       	add	r14, r14
    10a6:	ff 1c       	adc	r15, r15
    10a8:	00 1f       	adc	r16, r16
    10aa:	11 1f       	adc	r17, r17
   unsigned long NextClusterAddr=ResvdSecCnt*BytsPerSec+FATClusterOffset;//адрес следующего кластера
    10ac:	20 91 4d 03 	lds	r18, 0x034D
    10b0:	30 91 4e 03 	lds	r19, 0x034E
    10b4:	40 91 4f 03 	lds	r20, 0x034F
    10b8:	50 91 50 03 	lds	r21, 0x0350
    10bc:	60 91 6d 03 	lds	r22, 0x036D
    10c0:	70 91 6e 03 	lds	r23, 0x036E
    10c4:	80 91 6f 03 	lds	r24, 0x036F
    10c8:	90 91 70 03 	lds	r25, 0x0370
   //считываем номер следующего кластера файла
   unsigned long NextCluster=0;
   if (FATType==FAT16) NextCluster=GetShort(NextClusterAddr);
    10cc:	e1 30       	cpi	r30, 0x01	; 1
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <FAT_RecordPointerStepForward+0xb2>
    10d0:	76 c0       	rjmp	.+236    	; 0x11be <FAT_RecordPointerStepForward+0x19e>
    10d2:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
    10d6:	e6 0e       	add	r14, r22
    10d8:	f7 1e       	adc	r15, r23
    10da:	08 1f       	adc	r16, r24
    10dc:	19 1f       	adc	r17, r25
    10de:	c8 01       	movw	r24, r16
    10e0:	b7 01       	movw	r22, r14
    10e2:	0e 94 42 06 	call	0xc84	; 0xc84 <GetShort>
    10e6:	9b 01       	movw	r18, r22
    10e8:	ac 01       	movw	r20, r24
   if (NextCluster==0 || NextCluster>=CountofClusters+2UL || NextCluster>=FAT16_EOC)//такого кластера нет
    10ea:	61 15       	cp	r22, r1
    10ec:	71 05       	cpc	r23, r1
    10ee:	81 05       	cpc	r24, r1
    10f0:	91 05       	cpc	r25, r1
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <FAT_RecordPointerStepForward+0xd6>
    10f4:	64 c0       	rjmp	.+200    	; 0x11be <FAT_RecordPointerStepForward+0x19e>
    10f6:	80 91 75 03 	lds	r24, 0x0375
    10fa:	90 91 76 03 	lds	r25, 0x0376
    10fe:	a0 91 77 03 	lds	r26, 0x0377
    1102:	b0 91 78 03 	lds	r27, 0x0378
    1106:	02 96       	adiw	r24, 0x02	; 2
    1108:	a1 1d       	adc	r26, r1
    110a:	b1 1d       	adc	r27, r1
    110c:	28 17       	cp	r18, r24
    110e:	39 07       	cpc	r19, r25
    1110:	4a 07       	cpc	r20, r26
    1112:	5b 07       	cpc	r21, r27
    1114:	08 f0       	brcs	.+2      	; 0x1118 <FAT_RecordPointerStepForward+0xf8>
    1116:	53 c0       	rjmp	.+166    	; 0x11be <FAT_RecordPointerStepForward+0x19e>
    1118:	28 3f       	cpi	r18, 0xF8	; 248
    111a:	8f ef       	ldi	r24, 0xFF	; 255
    111c:	38 07       	cpc	r19, r24
    111e:	80 e0       	ldi	r24, 0x00	; 0
    1120:	48 07       	cpc	r20, r24
    1122:	80 e0       	ldi	r24, 0x00	; 0
    1124:	58 07       	cpc	r21, r24
    1126:	08 f0       	brcs	.+2      	; 0x112a <FAT_RecordPointerStepForward+0x10a>
    1128:	4a c0       	rjmp	.+148    	; 0x11be <FAT_RecordPointerStepForward+0x19e>
   {
    return(false);        	
   }
   sFATRecordPointerPtr->CurrentFolderCluster=NextCluster;//переходим к следующему кластеру
    112a:	2c 87       	std	Y+12, r18	; 0x0c
    112c:	3d 87       	std	Y+13, r19	; 0x0d
    112e:	4e 87       	std	Y+14, r20	; 0x0e
    1130:	5f 87       	std	Y+15, r21	; 0x0f
   unsigned long FirstSectorofCluster=((sFATRecordPointerPtr->CurrentFolderCluster-2UL)*SecPerClus)+FirstDataSector; 
    1132:	60 90 45 03 	lds	r6, 0x0345
    1136:	70 90 46 03 	lds	r7, 0x0346
    113a:	80 90 47 03 	lds	r8, 0x0347
    113e:	90 90 48 03 	lds	r9, 0x0348
   sFATRecordPointerPtr->CurrentFolderAddr=FirstSectorofCluster*BytsPerSec; 
    1142:	a0 90 6d 03 	lds	r10, 0x036D
    1146:	b0 90 6e 03 	lds	r11, 0x036E
    114a:	c0 90 6f 03 	lds	r12, 0x036F
    114e:	d0 90 70 03 	lds	r13, 0x0370
    1152:	22 50       	subi	r18, 0x02	; 2
    1154:	30 40       	sbci	r19, 0x00	; 0
    1156:	40 40       	sbci	r20, 0x00	; 0
    1158:	50 40       	sbci	r21, 0x00	; 0
    115a:	ca 01       	movw	r24, r20
    115c:	b9 01       	movw	r22, r18
    115e:	a4 01       	movw	r20, r8
    1160:	93 01       	movw	r18, r6
    1162:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
    1166:	9b 01       	movw	r18, r22
    1168:	ac 01       	movw	r20, r24
    116a:	60 91 41 03 	lds	r22, 0x0341
    116e:	70 91 42 03 	lds	r23, 0x0342
    1172:	80 91 43 03 	lds	r24, 0x0343
    1176:	90 91 44 03 	lds	r25, 0x0344
    117a:	62 0f       	add	r22, r18
    117c:	73 1f       	adc	r23, r19
    117e:	84 1f       	adc	r24, r20
    1180:	95 1f       	adc	r25, r21
    1182:	a6 01       	movw	r20, r12
    1184:	95 01       	movw	r18, r10
    1186:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
    118a:	7b 01       	movw	r14, r22
    118c:	8c 01       	movw	r16, r24
    118e:	6c 83       	std	Y+4, r22	; 0x04
    1190:	7d 83       	std	Y+5, r23	; 0x05
    1192:	8e 83       	std	Y+6, r24	; 0x06
    1194:	9f 83       	std	Y+7, r25	; 0x07
   sFATRecordPointerPtr->BeginFolderClusterAddr=sFATRecordPointerPtr->CurrentFolderAddr;
    1196:	68 8b       	std	Y+16, r22	; 0x10
    1198:	79 8b       	std	Y+17, r23	; 0x11
    119a:	8a 8b       	std	Y+18, r24	; 0x12
    119c:	9b 8b       	std	Y+19, r25	; 0x13
   sFATRecordPointerPtr->EndFolderClusterAddr=sFATRecordPointerPtr->CurrentFolderAddr+SecPerClus*BytsPerSec;
    119e:	c6 01       	movw	r24, r12
    11a0:	b5 01       	movw	r22, r10
    11a2:	a4 01       	movw	r20, r8
    11a4:	93 01       	movw	r18, r6
    11a6:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
    11aa:	6e 0d       	add	r22, r14
    11ac:	7f 1d       	adc	r23, r15
    11ae:	80 1f       	adc	r24, r16
    11b0:	91 1f       	adc	r25, r17
    11b2:	6c 8b       	std	Y+20, r22	; 0x14
    11b4:	7d 8b       	std	Y+21, r23	; 0x15
    11b6:	8e 8b       	std	Y+22, r24	; 0x16
    11b8:	9f 8b       	std	Y+23, r25	; 0x17
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	01 c0       	rjmp	.+2      	; 0x11c0 <FAT_RecordPointerStepForward+0x1a0>
    11be:	80 e0       	ldi	r24, 0x00	; 0
  }
 }
 return(true);
}
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	ff 90       	pop	r15
    11ca:	ef 90       	pop	r14
    11cc:	df 90       	pop	r13
    11ce:	cf 90       	pop	r12
    11d0:	bf 90       	pop	r11
    11d2:	af 90       	pop	r10
    11d4:	9f 90       	pop	r9
    11d6:	8f 90       	pop	r8
    11d8:	7f 90       	pop	r7
    11da:	6f 90       	pop	r6
    11dc:	08 95       	ret

000011de <FAT_NextFileSearch>:
}
//----------------------------------------------------------------------------------------------------
//перейти к следующему файлу в каталоге
//----------------------------------------------------------------------------------------------------
bool FAT_NextFileSearch(void)
{
    11de:	af 92       	push	r10
    11e0:	bf 92       	push	r11
    11e2:	cf 92       	push	r12
    11e4:	df 92       	push	r13
    11e6:	ef 92       	push	r14
    11e8:	ff 92       	push	r15
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	68 97       	sbiw	r28, 0x18	; 24
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
 struct SFATRecordPointer sFATRecordPointer_Copy=sFATRecordPointer;
    1202:	de 01       	movw	r26, r28
    1204:	11 96       	adiw	r26, 0x01	; 1
    1206:	e5 e5       	ldi	r30, 0x55	; 85
    1208:	f3 e0       	ldi	r31, 0x03	; 3
    120a:	88 e1       	ldi	r24, 0x18	; 24
    120c:	01 90       	ld	r0, Z+
    120e:	0d 92       	st	X+, r0
    1210:	81 50       	subi	r24, 0x01	; 1
    1212:	e1 f7       	brne	.-8      	; 0x120c <FAT_NextFileSearch+0x2e>
 while(1)
 {
  if (FAT_RecordPointerStepForward(&sFATRecordPointer_Copy)==false) return(false); 
    1214:	5e 01       	movw	r10, r28
    1216:	08 94       	sec
    1218:	a1 1c       	adc	r10, r1
    121a:	b1 1c       	adc	r11, r1
    121c:	c5 01       	movw	r24, r10
    121e:	0e 94 10 08 	call	0x1020	; 0x1020 <FAT_RecordPointerStepForward>
    1222:	88 23       	and	r24, r24
    1224:	09 f4       	brne	.+2      	; 0x1228 <FAT_NextFileSearch+0x4a>
    1226:	6e c0       	rjmp	.+220    	; 0x1304 <FAT_NextFileSearch+0x126>
    1228:	cc 24       	eor	r12, r12
    122a:	dd 24       	eor	r13, r13
    122c:	76 01       	movw	r14, r12
  unsigned char n;
  bool res=true;
  for(n=0;n<11;n++)
  {
   unsigned char b=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+(unsigned long)(n));
    122e:	6d 81       	ldd	r22, Y+5	; 0x05
    1230:	7e 81       	ldd	r23, Y+6	; 0x06
    1232:	8f 81       	ldd	r24, Y+7	; 0x07
    1234:	98 85       	ldd	r25, Y+8	; 0x08
    1236:	6c 0d       	add	r22, r12
    1238:	7d 1d       	adc	r23, r13
    123a:	8e 1d       	adc	r24, r14
    123c:	9f 1d       	adc	r25, r15
    123e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    1242:	8c 2d       	mov	r24, r12
   if (n==0)
    1244:	cc 20       	and	r12, r12
    1246:	21 f4       	brne	.+8      	; 0x1250 <FAT_NextFileSearch+0x72>
   {
    if (b==0x20 || b==0xE5)
    1248:	60 32       	cpi	r22, 0x20	; 32
    124a:	41 f3       	breq	.-48     	; 0x121c <FAT_NextFileSearch+0x3e>
    124c:	65 3e       	cpi	r22, 0xE5	; 229
    124e:	31 f3       	breq	.-52     	; 0x121c <FAT_NextFileSearch+0x3e>
	{
     res=false;
     break;	
	}
   }
   if (b<0x20)
    1250:	60 32       	cpi	r22, 0x20	; 32
    1252:	20 f3       	brcs	.-56     	; 0x121c <FAT_NextFileSearch+0x3e>
   {
    res=false;
    break;
   }
   if (n==1)
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	a9 f4       	brne	.+42     	; 0x1282 <FAT_NextFileSearch+0xa4>
   {
    unsigned char a=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr);
    1258:	6d 81       	ldd	r22, Y+5	; 0x05
    125a:	7e 81       	ldd	r23, Y+6	; 0x06
    125c:	8f 81       	ldd	r24, Y+7	; 0x07
    125e:	98 85       	ldd	r25, Y+8	; 0x08
    1260:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    1264:	16 2f       	mov	r17, r22
    unsigned char b=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+1UL);
    1266:	6d 81       	ldd	r22, Y+5	; 0x05
    1268:	7e 81       	ldd	r23, Y+6	; 0x06
    126a:	8f 81       	ldd	r24, Y+7	; 0x07
    126c:	98 85       	ldd	r25, Y+8	; 0x08
    126e:	6f 5f       	subi	r22, 0xFF	; 255
    1270:	7f 4f       	sbci	r23, 0xFF	; 255
    1272:	8f 4f       	sbci	r24, 0xFF	; 255
    1274:	9f 4f       	sbci	r25, 0xFF	; 255
    1276:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    if (a==(unsigned char)'.' && b!=(unsigned char)'.')
    127a:	1e 32       	cpi	r17, 0x2E	; 46
    127c:	11 f4       	brne	.+4      	; 0x1282 <FAT_NextFileSearch+0xa4>
    127e:	6e 32       	cpi	r22, 0x2E	; 46
    1280:	69 f6       	brne	.-102    	; 0x121c <FAT_NextFileSearch+0x3e>
    1282:	08 94       	sec
    1284:	c1 1c       	adc	r12, r1
    1286:	d1 1c       	adc	r13, r1
    1288:	e1 1c       	adc	r14, r1
    128a:	f1 1c       	adc	r15, r1
 while(1)
 {
  if (FAT_RecordPointerStepForward(&sFATRecordPointer_Copy)==false) return(false); 
  unsigned char n;
  bool res=true;
  for(n=0;n<11;n++)
    128c:	8b e0       	ldi	r24, 0x0B	; 11
    128e:	c8 16       	cp	r12, r24
    1290:	d1 04       	cpc	r13, r1
    1292:	e1 04       	cpc	r14, r1
    1294:	f1 04       	cpc	r15, r1
    1296:	59 f6       	brne	.-106    	; 0x122e <FAT_NextFileSearch+0x50>
    1298:	46 c0       	rjmp	.+140    	; 0x1326 <FAT_NextFileSearch+0x148>
  }
  if (res==true)
  {
   unsigned char type=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+11UL);
   if (type&ATTR_VOLUME_ID) continue;//этот файл - имя диска     
   if ((type&ATTR_DIRECTORY)==0)//это файл
    129a:	64 fd       	sbrc	r22, 4
    129c:	29 c0       	rjmp	.+82     	; 0x12f0 <FAT_NextFileSearch+0x112>
   {
    unsigned char a=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+10UL);
    129e:	6d 81       	ldd	r22, Y+5	; 0x05
    12a0:	7e 81       	ldd	r23, Y+6	; 0x06
    12a2:	8f 81       	ldd	r24, Y+7	; 0x07
    12a4:	98 85       	ldd	r25, Y+8	; 0x08
    12a6:	66 5f       	subi	r22, 0xF6	; 246
    12a8:	7f 4f       	sbci	r23, 0xFF	; 255
    12aa:	8f 4f       	sbci	r24, 0xFF	; 255
    12ac:	9f 4f       	sbci	r25, 0xFF	; 255
    12ae:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    12b2:	16 2f       	mov	r17, r22
    unsigned char b=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+9UL);
    12b4:	6d 81       	ldd	r22, Y+5	; 0x05
    12b6:	7e 81       	ldd	r23, Y+6	; 0x06
    12b8:	8f 81       	ldd	r24, Y+7	; 0x07
    12ba:	98 85       	ldd	r25, Y+8	; 0x08
    12bc:	67 5f       	subi	r22, 0xF7	; 247
    12be:	7f 4f       	sbci	r23, 0xFF	; 255
    12c0:	8f 4f       	sbci	r24, 0xFF	; 255
    12c2:	9f 4f       	sbci	r25, 0xFF	; 255
    12c4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    12c8:	06 2f       	mov	r16, r22
    unsigned char c=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+8UL);
    12ca:	6d 81       	ldd	r22, Y+5	; 0x05
    12cc:	7e 81       	ldd	r23, Y+6	; 0x06
    12ce:	8f 81       	ldd	r24, Y+7	; 0x07
    12d0:	98 85       	ldd	r25, Y+8	; 0x08
    12d2:	68 5f       	subi	r22, 0xF8	; 248
    12d4:	7f 4f       	sbci	r23, 0xFF	; 255
    12d6:	8f 4f       	sbci	r24, 0xFF	; 255
    12d8:	9f 4f       	sbci	r25, 0xFF	; 255
    12da:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    if (!(a=='P' && b=='A' && c=='T')) continue;//неверное расширение
    12de:	10 35       	cpi	r17, 0x50	; 80
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <FAT_NextFileSearch+0x106>
    12e2:	9c cf       	rjmp	.-200    	; 0x121c <FAT_NextFileSearch+0x3e>
    12e4:	01 34       	cpi	r16, 0x41	; 65
    12e6:	09 f0       	breq	.+2      	; 0x12ea <FAT_NextFileSearch+0x10c>
    12e8:	99 cf       	rjmp	.-206    	; 0x121c <FAT_NextFileSearch+0x3e>
    12ea:	64 35       	cpi	r22, 0x54	; 84
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <FAT_NextFileSearch+0x112>
    12ee:	96 cf       	rjmp	.-212    	; 0x121c <FAT_NextFileSearch+0x3e>
   }
   sFATRecordPointer=sFATRecordPointer_Copy;
    12f0:	a5 e5       	ldi	r26, 0x55	; 85
    12f2:	b3 e0       	ldi	r27, 0x03	; 3
    12f4:	fe 01       	movw	r30, r28
    12f6:	31 96       	adiw	r30, 0x01	; 1
    12f8:	88 e1       	ldi	r24, 0x18	; 24
    12fa:	01 90       	ld	r0, Z+
    12fc:	0d 92       	st	X+, r0
    12fe:	81 50       	subi	r24, 0x01	; 1
    1300:	e1 f7       	brne	.-8      	; 0x12fa <FAT_NextFileSearch+0x11c>
    1302:	81 e0       	ldi	r24, 0x01	; 1
   return(true);
  }
 }
 return(false);
}
    1304:	68 96       	adiw	r28, 0x18	; 24
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	f8 94       	cli
    130a:	de bf       	out	0x3e, r29	; 62
    130c:	0f be       	out	0x3f, r0	; 63
    130e:	cd bf       	out	0x3d, r28	; 61
    1310:	cf 91       	pop	r28
    1312:	df 91       	pop	r29
    1314:	1f 91       	pop	r17
    1316:	0f 91       	pop	r16
    1318:	ff 90       	pop	r15
    131a:	ef 90       	pop	r14
    131c:	df 90       	pop	r13
    131e:	cf 90       	pop	r12
    1320:	bf 90       	pop	r11
    1322:	af 90       	pop	r10
    1324:	08 95       	ret
    }	
   }     
  }
  if (res==true)
  {
   unsigned char type=GetByte(sFATRecordPointer_Copy.CurrentFolderAddr+11UL);
    1326:	6d 81       	ldd	r22, Y+5	; 0x05
    1328:	7e 81       	ldd	r23, Y+6	; 0x06
    132a:	8f 81       	ldd	r24, Y+7	; 0x07
    132c:	98 85       	ldd	r25, Y+8	; 0x08
    132e:	65 5f       	subi	r22, 0xF5	; 245
    1330:	7f 4f       	sbci	r23, 0xFF	; 255
    1332:	8f 4f       	sbci	r24, 0xFF	; 255
    1334:	9f 4f       	sbci	r25, 0xFF	; 255
    1336:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
   if (type&ATTR_VOLUME_ID) continue;//этот файл - имя диска     
    133a:	63 fd       	sbrc	r22, 3
    133c:	6f cf       	rjmp	.-290    	; 0x121c <FAT_NextFileSearch+0x3e>
    133e:	ad cf       	rjmp	.-166    	; 0x129a <FAT_NextFileSearch+0xbc>

00001340 <GetLong>:
}
//----------------------------------------------------------------------------------------------------
//считать 4 байта
//----------------------------------------------------------------------------------------------------
unsigned long GetLong(unsigned long offset)
{
    1340:	af 92       	push	r10
    1342:	bf 92       	push	r11
    1344:	cf 92       	push	r12
    1346:	df 92       	push	r13
    1348:	ef 92       	push	r14
    134a:	ff 92       	push	r15
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	5b 01       	movw	r10, r22
    1352:	6c 01       	movw	r12, r24
 unsigned long v=GetByte(offset+3UL);
    1354:	6d 5f       	subi	r22, 0xFD	; 253
    1356:	7f 4f       	sbci	r23, 0xFF	; 255
    1358:	8f 4f       	sbci	r24, 0xFF	; 255
    135a:	9f 4f       	sbci	r25, 0xFF	; 255
    135c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
 v<<=8UL;
    1360:	ee 24       	eor	r14, r14
    1362:	f6 2e       	mov	r15, r22
    1364:	07 2f       	mov	r16, r23
    1366:	18 2f       	mov	r17, r24
 v|=GetByte(offset+2UL);
    1368:	c6 01       	movw	r24, r12
    136a:	b5 01       	movw	r22, r10
    136c:	6e 5f       	subi	r22, 0xFE	; 254
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	8f 4f       	sbci	r24, 0xFF	; 255
    1372:	9f 4f       	sbci	r25, 0xFF	; 255
    1374:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    1378:	e6 2a       	or	r14, r22
    137a:	f7 2a       	or	r15, r23
    137c:	08 2b       	or	r16, r24
    137e:	19 2b       	or	r17, r25
 v<<=8UL;
    1380:	10 2f       	mov	r17, r16
    1382:	0f 2d       	mov	r16, r15
    1384:	fe 2c       	mov	r15, r14
    1386:	ee 24       	eor	r14, r14
 v|=GetByte(offset+1UL);
    1388:	c6 01       	movw	r24, r12
    138a:	b5 01       	movw	r22, r10
    138c:	6f 5f       	subi	r22, 0xFF	; 255
    138e:	7f 4f       	sbci	r23, 0xFF	; 255
    1390:	8f 4f       	sbci	r24, 0xFF	; 255
    1392:	9f 4f       	sbci	r25, 0xFF	; 255
    1394:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    1398:	e6 2a       	or	r14, r22
    139a:	f7 2a       	or	r15, r23
    139c:	08 2b       	or	r16, r24
    139e:	19 2b       	or	r17, r25
 v<<=8UL;
    13a0:	10 2f       	mov	r17, r16
    13a2:	0f 2d       	mov	r16, r15
    13a4:	fe 2c       	mov	r15, r14
    13a6:	ee 24       	eor	r14, r14
 v|=GetByte(offset);
    13a8:	c6 01       	movw	r24, r12
    13aa:	b5 01       	movw	r22, r10
    13ac:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    13b0:	9b 01       	movw	r18, r22
    13b2:	ac 01       	movw	r20, r24
    13b4:	2e 29       	or	r18, r14
    13b6:	3f 29       	or	r19, r15
    13b8:	40 2b       	or	r20, r16
    13ba:	51 2b       	or	r21, r17
 return(v);
}
    13bc:	b9 01       	movw	r22, r18
    13be:	ca 01       	movw	r24, r20
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	ff 90       	pop	r15
    13c6:	ef 90       	pop	r14
    13c8:	df 90       	pop	r13
    13ca:	cf 90       	pop	r12
    13cc:	bf 90       	pop	r11
    13ce:	af 90       	pop	r10
    13d0:	08 95       	ret

000013d2 <FAT_GetFileSearch>:
}
//----------------------------------------------------------------------------------------------------
//получить параметры текущего найденного файла в каталоге
//----------------------------------------------------------------------------------------------------
bool FAT_GetFileSearch(char *filename,unsigned long *FirstCluster,unsigned long *Size,signed char *directory)
{
    13d2:	2f 92       	push	r2
    13d4:	3f 92       	push	r3
    13d6:	4f 92       	push	r4
    13d8:	5f 92       	push	r5
    13da:	6f 92       	push	r6
    13dc:	7f 92       	push	r7
    13de:	8f 92       	push	r8
    13e0:	9f 92       	push	r9
    13e2:	af 92       	push	r10
    13e4:	bf 92       	push	r11
    13e6:	cf 92       	push	r12
    13e8:	df 92       	push	r13
    13ea:	ef 92       	push	r14
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	df 93       	push	r29
    13f4:	cf 93       	push	r28
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	68 97       	sbiw	r28, 0x18	; 24
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	4c 01       	movw	r8, r24
    1408:	2b 01       	movw	r4, r22
    140a:	1a 01       	movw	r2, r20
    140c:	39 01       	movw	r6, r18
 unsigned char n;
 bool res=true;
 *directory=0;
    140e:	d9 01       	movw	r26, r18
    1410:	1c 92       	st	X, r1
 if (filename!=NULL)
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	29 f4       	brne	.+10     	; 0x1420 <FAT_GetFileSearch+0x4e>
    1416:	54 01       	movw	r10, r8
    1418:	cc 24       	eor	r12, r12
    141a:	dd 24       	eor	r13, r13
    141c:	76 01       	movw	r14, r12
    141e:	0c c0       	rjmp	.+24     	; 0x1438 <FAT_GetFileSearch+0x66>
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	90 e0       	ldi	r25, 0x00	; 0
 {
  for(n=0;n<11;n++) filename[n]=32;
    1424:	20 e2       	ldi	r18, 0x20	; 32
    1426:	f4 01       	movw	r30, r8
    1428:	e8 0f       	add	r30, r24
    142a:	f9 1f       	adc	r31, r25
    142c:	20 83       	st	Z, r18
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	8b 30       	cpi	r24, 0x0B	; 11
    1432:	91 05       	cpc	r25, r1
    1434:	c1 f7       	brne	.-16     	; 0x1426 <FAT_GetFileSearch+0x54>
    1436:	ef cf       	rjmp	.-34     	; 0x1416 <FAT_GetFileSearch+0x44>
 }
 for(n=0;n<11;n++)
 {    
  unsigned char b=GetByte(sFATRecordPointer.CurrentFolderAddr+(unsigned long)(n));
    1438:	60 91 59 03 	lds	r22, 0x0359
    143c:	70 91 5a 03 	lds	r23, 0x035A
    1440:	80 91 5b 03 	lds	r24, 0x035B
    1444:	90 91 5c 03 	lds	r25, 0x035C
    1448:	6c 0d       	add	r22, r12
    144a:	7d 1d       	adc	r23, r13
    144c:	8e 1d       	adc	r24, r14
    144e:	9f 1d       	adc	r25, r15
    1450:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    1454:	8c 2d       	mov	r24, r12
  if (n==0)
    1456:	cc 20       	and	r12, r12
    1458:	31 f4       	brne	.+12     	; 0x1466 <FAT_GetFileSearch+0x94>
  {
   if (b==0x20 || b==0xE5)
    145a:	60 32       	cpi	r22, 0x20	; 32
    145c:	09 f4       	brne	.+2      	; 0x1460 <FAT_GetFileSearch+0x8e>
    145e:	99 c1       	rjmp	.+818    	; 0x1792 <FAT_GetFileSearch+0x3c0>
    1460:	65 3e       	cpi	r22, 0xE5	; 229
    1462:	09 f4       	brne	.+2      	; 0x1466 <FAT_GetFileSearch+0x94>
    1464:	96 c1       	rjmp	.+812    	; 0x1792 <FAT_GetFileSearch+0x3c0>
   {
    res=false;
    break;	
   }
  }
  if (b<0x20)
    1466:	60 32       	cpi	r22, 0x20	; 32
    1468:	08 f4       	brcc	.+2      	; 0x146c <FAT_GetFileSearch+0x9a>
    146a:	93 c1       	rjmp	.+806    	; 0x1792 <FAT_GetFileSearch+0x3c0>
  {
   res=false;
   break;
  }
  if (filename!=NULL)
    146c:	81 14       	cp	r8, r1
    146e:	91 04       	cpc	r9, r1
    1470:	49 f0       	breq	.+18     	; 0x1484 <FAT_GetFileSearch+0xb2>
  {
   if (n<8) filename[n]=b;
    1472:	88 30       	cpi	r24, 0x08	; 8
    1474:	18 f4       	brcc	.+6      	; 0x147c <FAT_GetFileSearch+0xaa>
    1476:	f5 01       	movw	r30, r10
    1478:	60 83       	st	Z, r22
    147a:	04 c0       	rjmp	.+8      	; 0x1484 <FAT_GetFileSearch+0xb2>
       else filename[n+1]=b;
    147c:	d5 01       	movw	r26, r10
    147e:	11 96       	adiw	r26, 0x01	; 1
    1480:	6c 93       	st	X, r22
    1482:	20 c0       	rjmp	.+64     	; 0x14c4 <FAT_GetFileSearch+0xf2>
  }
  if (n==1)
    1484:	81 30       	cpi	r24, 0x01	; 1
    1486:	f1 f4       	brne	.+60     	; 0x14c4 <FAT_GetFileSearch+0xf2>
  {
   unsigned char a=GetByte(sFATRecordPointer.CurrentFolderAddr);
    1488:	60 91 59 03 	lds	r22, 0x0359
    148c:	70 91 5a 03 	lds	r23, 0x035A
    1490:	80 91 5b 03 	lds	r24, 0x035B
    1494:	90 91 5c 03 	lds	r25, 0x035C
    1498:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    149c:	16 2f       	mov	r17, r22
   unsigned char b=GetByte(sFATRecordPointer.CurrentFolderAddr+1UL);
    149e:	60 91 59 03 	lds	r22, 0x0359
    14a2:	70 91 5a 03 	lds	r23, 0x035A
    14a6:	80 91 5b 03 	lds	r24, 0x035B
    14aa:	90 91 5c 03 	lds	r25, 0x035C
    14ae:	6f 5f       	subi	r22, 0xFF	; 255
    14b0:	7f 4f       	sbci	r23, 0xFF	; 255
    14b2:	8f 4f       	sbci	r24, 0xFF	; 255
    14b4:	9f 4f       	sbci	r25, 0xFF	; 255
    14b6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
   if (a==(unsigned char)'.' && b!=(unsigned char)'.')
    14ba:	1e 32       	cpi	r17, 0x2E	; 46
    14bc:	19 f4       	brne	.+6      	; 0x14c4 <FAT_GetFileSearch+0xf2>
    14be:	6e 32       	cpi	r22, 0x2E	; 46
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <FAT_GetFileSearch+0xf2>
    14c2:	67 c1       	rjmp	.+718    	; 0x1792 <FAT_GetFileSearch+0x3c0>
    14c4:	08 94       	sec
    14c6:	c1 1c       	adc	r12, r1
    14c8:	d1 1c       	adc	r13, r1
    14ca:	e1 1c       	adc	r14, r1
    14cc:	f1 1c       	adc	r15, r1
    14ce:	08 94       	sec
    14d0:	a1 1c       	adc	r10, r1
    14d2:	b1 1c       	adc	r11, r1
 *directory=0;
 if (filename!=NULL)
 {
  for(n=0;n<11;n++) filename[n]=32;
 }
 for(n=0;n<11;n++)
    14d4:	bb e0       	ldi	r27, 0x0B	; 11
    14d6:	cb 16       	cp	r12, r27
    14d8:	d1 04       	cpc	r13, r1
    14da:	e1 04       	cpc	r14, r1
    14dc:	f1 04       	cpc	r15, r1
    14de:	09 f0       	breq	.+2      	; 0x14e2 <FAT_GetFileSearch+0x110>
    14e0:	ab cf       	rjmp	.-170    	; 0x1438 <FAT_GetFileSearch+0x66>
    14e2:	73 c1       	rjmp	.+742    	; 0x17ca <FAT_GetFileSearch+0x3f8>
    14e4:	60 91 59 03 	lds	r22, 0x0359
    14e8:	70 91 5a 03 	lds	r23, 0x035A
    14ec:	80 91 5b 03 	lds	r24, 0x035B
    14f0:	90 91 5c 03 	lds	r25, 0x035C
 }
 if (res==true)
 {
  unsigned char type=GetByte(sFATRecordPointer.CurrentFolderAddr+11UL);  
  if (type&ATTR_VOLUME_ID) return(false);//этот файл - имя диска  
  if ((type&ATTR_DIRECTORY)==0)//это файл
    14f4:	f0 e1       	ldi	r31, 0x10	; 16
    14f6:	cf 2e       	mov	r12, r31
    14f8:	d1 2c       	mov	r13, r1
    14fa:	c2 22       	and	r12, r18
    14fc:	d3 22       	and	r13, r19
    14fe:	24 fd       	sbrc	r18, 4
    1500:	2e c0       	rjmp	.+92     	; 0x155e <FAT_GetFileSearch+0x18c>
  {
   unsigned char a=GetByte(sFATRecordPointer.CurrentFolderAddr+10UL);
    1502:	66 5f       	subi	r22, 0xF6	; 246
    1504:	7f 4f       	sbci	r23, 0xFF	; 255
    1506:	8f 4f       	sbci	r24, 0xFF	; 255
    1508:	9f 4f       	sbci	r25, 0xFF	; 255
    150a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    150e:	16 2f       	mov	r17, r22
   unsigned char b=GetByte(sFATRecordPointer.CurrentFolderAddr+9UL);
    1510:	60 91 59 03 	lds	r22, 0x0359
    1514:	70 91 5a 03 	lds	r23, 0x035A
    1518:	80 91 5b 03 	lds	r24, 0x035B
    151c:	90 91 5c 03 	lds	r25, 0x035C
    1520:	67 5f       	subi	r22, 0xF7	; 247
    1522:	7f 4f       	sbci	r23, 0xFF	; 255
    1524:	8f 4f       	sbci	r24, 0xFF	; 255
    1526:	9f 4f       	sbci	r25, 0xFF	; 255
    1528:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    152c:	06 2f       	mov	r16, r22
   unsigned char c=GetByte(sFATRecordPointer.CurrentFolderAddr+8UL);
    152e:	60 91 59 03 	lds	r22, 0x0359
    1532:	70 91 5a 03 	lds	r23, 0x035A
    1536:	80 91 5b 03 	lds	r24, 0x035B
    153a:	90 91 5c 03 	lds	r25, 0x035C
    153e:	68 5f       	subi	r22, 0xF8	; 248
    1540:	7f 4f       	sbci	r23, 0xFF	; 255
    1542:	8f 4f       	sbci	r24, 0xFF	; 255
    1544:	9f 4f       	sbci	r25, 0xFF	; 255
    1546:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
   if (!(a=='P' && b=='A' && c=='T')) return(false);//неверное расширение
    154a:	10 35       	cpi	r17, 0x50	; 80
    154c:	09 f0       	breq	.+2      	; 0x1550 <FAT_GetFileSearch+0x17e>
    154e:	21 c1       	rjmp	.+578    	; 0x1792 <FAT_GetFileSearch+0x3c0>
    1550:	01 34       	cpi	r16, 0x41	; 65
    1552:	09 f0       	breq	.+2      	; 0x1556 <FAT_GetFileSearch+0x184>
    1554:	1e c1       	rjmp	.+572    	; 0x1792 <FAT_GetFileSearch+0x3c0>
    1556:	64 35       	cpi	r22, 0x54	; 84
    1558:	09 f0       	breq	.+2      	; 0x155c <FAT_GetFileSearch+0x18a>
    155a:	1b c1       	rjmp	.+566    	; 0x1792 <FAT_GetFileSearch+0x3c0>
    155c:	1c c0       	rjmp	.+56     	; 0x1596 <FAT_GetFileSearch+0x1c4>
  }
  else//если это директория
  {
   unsigned char a=GetByte(sFATRecordPointer.CurrentFolderAddr);
    155e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    1562:	16 2f       	mov	r17, r22
   unsigned char b=GetByte(sFATRecordPointer.CurrentFolderAddr+1UL);  
    1564:	60 91 59 03 	lds	r22, 0x0359
    1568:	70 91 5a 03 	lds	r23, 0x035A
    156c:	80 91 5b 03 	lds	r24, 0x035B
    1570:	90 91 5c 03 	lds	r25, 0x035C
    1574:	6f 5f       	subi	r22, 0xFF	; 255
    1576:	7f 4f       	sbci	r23, 0xFF	; 255
    1578:	8f 4f       	sbci	r24, 0xFF	; 255
    157a:	9f 4f       	sbci	r25, 0xFF	; 255
    157c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
   if (a==(unsigned char)'.' && b==(unsigned char)'.') *directory=-1;//на директорию выше
    1580:	1e 32       	cpi	r17, 0x2E	; 46
    1582:	31 f4       	brne	.+12     	; 0x1590 <FAT_GetFileSearch+0x1be>
    1584:	6e 32       	cpi	r22, 0x2E	; 46
    1586:	21 f4       	brne	.+8      	; 0x1590 <FAT_GetFileSearch+0x1be>
    1588:	8f ef       	ldi	r24, 0xFF	; 255
    158a:	f3 01       	movw	r30, r6
    158c:	80 83       	st	Z, r24
    158e:	03 c0       	rjmp	.+6      	; 0x1596 <FAT_GetFileSearch+0x1c4>
                                                   else *directory=1;//на директорию ниже
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	d3 01       	movw	r26, r6
    1594:	8c 93       	st	X, r24
  } 
  //первый кластер файла  
  *FirstCluster=(GetShort(sFATRecordPointer.CurrentFolderAddr+20UL)<<16)|GetShort(sFATRecordPointer.CurrentFolderAddr+26UL);
    1596:	60 91 59 03 	lds	r22, 0x0359
    159a:	70 91 5a 03 	lds	r23, 0x035A
    159e:	80 91 5b 03 	lds	r24, 0x035B
    15a2:	90 91 5c 03 	lds	r25, 0x035C
    15a6:	6c 5e       	subi	r22, 0xEC	; 236
    15a8:	7f 4f       	sbci	r23, 0xFF	; 255
    15aa:	8f 4f       	sbci	r24, 0xFF	; 255
    15ac:	9f 4f       	sbci	r25, 0xFF	; 255
    15ae:	0e 94 42 06 	call	0xc84	; 0xc84 <GetShort>
    15b2:	7b 01       	movw	r14, r22
    15b4:	8c 01       	movw	r16, r24
    15b6:	60 91 59 03 	lds	r22, 0x0359
    15ba:	70 91 5a 03 	lds	r23, 0x035A
    15be:	80 91 5b 03 	lds	r24, 0x035B
    15c2:	90 91 5c 03 	lds	r25, 0x035C
    15c6:	66 5e       	subi	r22, 0xE6	; 230
    15c8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ca:	8f 4f       	sbci	r24, 0xFF	; 255
    15cc:	9f 4f       	sbci	r25, 0xFF	; 255
    15ce:	0e 94 42 06 	call	0xc84	; 0xc84 <GetShort>
    15d2:	87 01       	movw	r16, r14
    15d4:	ff 24       	eor	r15, r15
    15d6:	ee 24       	eor	r14, r14
    15d8:	e6 2a       	or	r14, r22
    15da:	f7 2a       	or	r15, r23
    15dc:	08 2b       	or	r16, r24
    15de:	19 2b       	or	r17, r25
    15e0:	f2 01       	movw	r30, r4
    15e2:	e0 82       	st	Z, r14
    15e4:	f1 82       	std	Z+1, r15	; 0x01
    15e6:	02 83       	std	Z+2, r16	; 0x02
    15e8:	13 83       	std	Z+3, r17	; 0x03
  //узнаём размер файла в байтах
  *Size=GetLong(sFATRecordPointer.CurrentFolderAddr+28UL);
    15ea:	60 91 59 03 	lds	r22, 0x0359
    15ee:	70 91 5a 03 	lds	r23, 0x035A
    15f2:	80 91 5b 03 	lds	r24, 0x035B
    15f6:	90 91 5c 03 	lds	r25, 0x035C
    15fa:	64 5e       	subi	r22, 0xE4	; 228
    15fc:	7f 4f       	sbci	r23, 0xFF	; 255
    15fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1600:	9f 4f       	sbci	r25, 0xFF	; 255
    1602:	0e 94 a0 09 	call	0x1340	; 0x1340 <GetLong>
    1606:	d1 01       	movw	r26, r2
    1608:	6d 93       	st	X+, r22
    160a:	7d 93       	st	X+, r23
    160c:	8d 93       	st	X+, r24
    160e:	9c 93       	st	X, r25
    1610:	13 97       	sbiw	r26, 0x03	; 3
  if (filename!=NULL)
    1612:	81 14       	cp	r8, r1
    1614:	91 04       	cpc	r9, r1
    1616:	09 f4       	brne	.+2      	; 0x161a <FAT_GetFileSearch+0x248>
    1618:	be c0       	rjmp	.+380    	; 0x1796 <FAT_GetFileSearch+0x3c4>
  {
   if ((type&ATTR_DIRECTORY)==0) filename[8]='.';//файлу добавляем точку    
    161a:	cd 28       	or	r12, r13
    161c:	19 f4       	brne	.+6      	; 0x1624 <FAT_GetFileSearch+0x252>
    161e:	8e e2       	ldi	r24, 0x2E	; 46
    1620:	f4 01       	movw	r30, r8
    1622:	80 87       	std	Z+8, r24	; 0x08
   filename[12]=0;   
    1624:	d4 01       	movw	r26, r8
    1626:	1c 96       	adiw	r26, 0x0c	; 12
    1628:	1c 92       	st	X, r1
   //поищем длинное имя файла   
   struct SFATRecordPointer sFATRecordPointer_Local=sFATRecordPointer;
    162a:	de 01       	movw	r26, r28
    162c:	11 96       	adiw	r26, 0x01	; 1
    162e:	e5 e5       	ldi	r30, 0x55	; 85
    1630:	f3 e0       	ldi	r31, 0x03	; 3
    1632:	88 e1       	ldi	r24, 0x18	; 24
    1634:	01 90       	ld	r0, Z+
    1636:	0d 92       	st	X+, r0
    1638:	81 50       	subi	r24, 0x01	; 1
    163a:	e1 f7       	brne	.-8      	; 0x1634 <FAT_GetFileSearch+0x262>
    163c:	dd 24       	eor	r13, r13
   unsigned char long_name_length=0;
   while(1)
   {
    if (FAT_RecordPointerStepReverse(&sFATRecordPointer_Local)==false) break;
    163e:	5e 01       	movw	r10, r28
    1640:	08 94       	sec
    1642:	a1 1c       	adc	r10, r1
    1644:	b1 1c       	adc	r11, r1
    1646:	c5 01       	movw	r24, r10
    1648:	0e 94 6d 06 	call	0xcda	; 0xcda <FAT_RecordPointerStepReverse>
    164c:	88 23       	and	r24, r24
    164e:	09 f4       	brne	.+2      	; 0x1652 <FAT_GetFileSearch+0x280>
    1650:	96 c0       	rjmp	.+300    	; 0x177e <FAT_GetFileSearch+0x3ac>
    unsigned char attr=GetByte(sFATRecordPointer_Local.CurrentFolderAddr+11UL);
    1652:	6d 81       	ldd	r22, Y+5	; 0x05
    1654:	7e 81       	ldd	r23, Y+6	; 0x06
    1656:	8f 81       	ldd	r24, Y+7	; 0x07
    1658:	98 85       	ldd	r25, Y+8	; 0x08
    165a:	65 5f       	subi	r22, 0xF5	; 245
    165c:	7f 4f       	sbci	r23, 0xFF	; 255
    165e:	8f 4f       	sbci	r24, 0xFF	; 255
    1660:	9f 4f       	sbci	r25, 0xFF	; 255
    1662:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    if (attr&ATTR_LONG_NAME)//это длинное имя
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	6f 70       	andi	r22, 0x0F	; 15
    166a:	70 70       	andi	r23, 0x00	; 0
    166c:	67 2b       	or	r22, r23
    166e:	09 f4       	brne	.+2      	; 0x1672 <FAT_GetFileSearch+0x2a0>
    1670:	86 c0       	rjmp	.+268    	; 0x177e <FAT_GetFileSearch+0x3ac>
    {
     //собираем полное имя
     unsigned char name_index=GetByte(sFATRecordPointer_Local.CurrentFolderAddr);
    1672:	6d 81       	ldd	r22, Y+5	; 0x05
    1674:	7e 81       	ldd	r23, Y+6	; 0x06
    1676:	8f 81       	ldd	r24, Y+7	; 0x07
    1678:	98 85       	ldd	r25, Y+8	; 0x08
    167a:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    167e:	c6 2e       	mov	r12, r22
    1680:	ee 24       	eor	r14, r14
    1682:	ff 24       	eor	r15, r15
    1684:	87 01       	movw	r16, r14
    1686:	25 c0       	rjmp	.+74     	; 0x16d2 <FAT_GetFileSearch+0x300>
     for(n=0;n<10 && long_name_length<=16;n+=2,long_name_length++) filename[long_name_length]=GetByte(sFATRecordPointer_Local.CurrentFolderAddr+n+1UL);
    1688:	6d 81       	ldd	r22, Y+5	; 0x05
    168a:	7e 81       	ldd	r23, Y+6	; 0x06
    168c:	8f 81       	ldd	r24, Y+7	; 0x07
    168e:	98 85       	ldd	r25, Y+8	; 0x08
    1690:	6f 5f       	subi	r22, 0xFF	; 255
    1692:	7f 4f       	sbci	r23, 0xFF	; 255
    1694:	8f 4f       	sbci	r24, 0xFF	; 255
    1696:	9f 4f       	sbci	r25, 0xFF	; 255
    1698:	6e 0d       	add	r22, r14
    169a:	7f 1d       	adc	r23, r15
    169c:	80 1f       	adc	r24, r16
    169e:	91 1f       	adc	r25, r17
    16a0:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    16a4:	f4 01       	movw	r30, r8
    16a6:	ed 0d       	add	r30, r13
    16a8:	f1 1d       	adc	r31, r1
    16aa:	60 83       	st	Z, r22
    16ac:	d3 94       	inc	r13
    16ae:	82 e0       	ldi	r24, 0x02	; 2
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	a0 e0       	ldi	r26, 0x00	; 0
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e8 0e       	add	r14, r24
    16b8:	f9 1e       	adc	r15, r25
    16ba:	0a 1f       	adc	r16, r26
    16bc:	1b 1f       	adc	r17, r27
    16be:	9a e0       	ldi	r25, 0x0A	; 10
    16c0:	e9 16       	cp	r14, r25
    16c2:	f1 04       	cpc	r15, r1
    16c4:	01 05       	cpc	r16, r1
    16c6:	11 05       	cpc	r17, r1
    16c8:	21 f4       	brne	.+8      	; 0x16d2 <FAT_GetFileSearch+0x300>
    16ca:	ee 24       	eor	r14, r14
    16cc:	ff 24       	eor	r15, r15
    16ce:	87 01       	movw	r16, r14
    16d0:	3c c0       	rjmp	.+120    	; 0x174a <FAT_GetFileSearch+0x378>
    16d2:	a0 e1       	ldi	r26, 0x10	; 16
    16d4:	ad 15       	cp	r26, r13
    16d6:	c0 f6       	brcc	.-80     	; 0x1688 <FAT_GetFileSearch+0x2b6>
    16d8:	f8 cf       	rjmp	.-16     	; 0x16ca <FAT_GetFileSearch+0x2f8>
     for(n=0;n<12 && long_name_length<=16;n+=2,long_name_length++) filename[long_name_length]=GetByte(sFATRecordPointer_Local.CurrentFolderAddr+n+14UL);
    16da:	6d 81       	ldd	r22, Y+5	; 0x05
    16dc:	7e 81       	ldd	r23, Y+6	; 0x06
    16de:	8f 81       	ldd	r24, Y+7	; 0x07
    16e0:	98 85       	ldd	r25, Y+8	; 0x08
    16e2:	62 5f       	subi	r22, 0xF2	; 242
    16e4:	7f 4f       	sbci	r23, 0xFF	; 255
    16e6:	8f 4f       	sbci	r24, 0xFF	; 255
    16e8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ea:	6e 0d       	add	r22, r14
    16ec:	7f 1d       	adc	r23, r15
    16ee:	80 1f       	adc	r24, r16
    16f0:	91 1f       	adc	r25, r17
    16f2:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    16f6:	f4 01       	movw	r30, r8
    16f8:	ed 0d       	add	r30, r13
    16fa:	f1 1d       	adc	r31, r1
    16fc:	60 83       	st	Z, r22
    16fe:	d3 94       	inc	r13
    1700:	82 e0       	ldi	r24, 0x02	; 2
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	a0 e0       	ldi	r26, 0x00	; 0
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e8 0e       	add	r14, r24
    170a:	f9 1e       	adc	r15, r25
    170c:	0a 1f       	adc	r16, r26
    170e:	1b 1f       	adc	r17, r27
    1710:	9c e0       	ldi	r25, 0x0C	; 12
    1712:	e9 16       	cp	r14, r25
    1714:	f1 04       	cpc	r15, r1
    1716:	01 05       	cpc	r16, r1
    1718:	11 05       	cpc	r17, r1
    171a:	b9 f4       	brne	.+46     	; 0x174a <FAT_GetFileSearch+0x378>
	 for(n=0;n<4 && long_name_length<=16;n+=2,long_name_length++) filename[long_name_length]=GetByte(sFATRecordPointer_Local.CurrentFolderAddr+n+28UL);
    171c:	a0 e1       	ldi	r26, 0x10	; 16
    171e:	ad 15       	cp	r26, r13
    1720:	08 f4       	brcc	.+2      	; 0x1724 <FAT_GetFileSearch+0x352>
    1722:	66 c0       	rjmp	.+204    	; 0x17f0 <FAT_GetFileSearch+0x41e>
    1724:	6d 81       	ldd	r22, Y+5	; 0x05
    1726:	7e 81       	ldd	r23, Y+6	; 0x06
    1728:	8f 81       	ldd	r24, Y+7	; 0x07
    172a:	98 85       	ldd	r25, Y+8	; 0x08
    172c:	64 5e       	subi	r22, 0xE4	; 228
    172e:	7f 4f       	sbci	r23, 0xFF	; 255
    1730:	8f 4f       	sbci	r24, 0xFF	; 255
    1732:	9f 4f       	sbci	r25, 0xFF	; 255
    1734:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    1738:	f4 01       	movw	r30, r8
    173a:	ed 0d       	add	r30, r13
    173c:	f1 1d       	adc	r31, r1
    173e:	60 83       	st	Z, r22
    1740:	1d 2d       	mov	r17, r13
    1742:	1f 5f       	subi	r17, 0xFF	; 255
    1744:	11 31       	cpi	r17, 0x11	; 17
    1746:	29 f4       	brne	.+10     	; 0x1752 <FAT_GetFileSearch+0x380>
    1748:	53 c0       	rjmp	.+166    	; 0x17f0 <FAT_GetFileSearch+0x41e>
    if (attr&ATTR_LONG_NAME)//это длинное имя
    {
     //собираем полное имя
     unsigned char name_index=GetByte(sFATRecordPointer_Local.CurrentFolderAddr);
     for(n=0;n<10 && long_name_length<=16;n+=2,long_name_length++) filename[long_name_length]=GetByte(sFATRecordPointer_Local.CurrentFolderAddr+n+1UL);
     for(n=0;n<12 && long_name_length<=16;n+=2,long_name_length++) filename[long_name_length]=GetByte(sFATRecordPointer_Local.CurrentFolderAddr+n+14UL);
    174a:	b0 e1       	ldi	r27, 0x10	; 16
    174c:	bd 15       	cp	r27, r13
    174e:	28 f6       	brcc	.-118    	; 0x16da <FAT_GetFileSearch+0x308>
    1750:	4f c0       	rjmp	.+158    	; 0x17f0 <FAT_GetFileSearch+0x41e>
	 for(n=0;n<4 && long_name_length<=16;n+=2,long_name_length++) filename[long_name_length]=GetByte(sFATRecordPointer_Local.CurrentFolderAddr+n+28UL);
    1752:	6d 81       	ldd	r22, Y+5	; 0x05
    1754:	7e 81       	ldd	r23, Y+6	; 0x06
    1756:	8f 81       	ldd	r24, Y+7	; 0x07
    1758:	98 85       	ldd	r25, Y+8	; 0x08
    175a:	62 5e       	subi	r22, 0xE2	; 226
    175c:	7f 4f       	sbci	r23, 0xFF	; 255
    175e:	8f 4f       	sbci	r24, 0xFF	; 255
    1760:	9f 4f       	sbci	r25, 0xFF	; 255
    1762:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    1766:	f4 01       	movw	r30, r8
    1768:	e1 0f       	add	r30, r17
    176a:	f1 1d       	adc	r31, r1
    176c:	60 83       	st	Z, r22
    176e:	d1 2e       	mov	r13, r17
    1770:	d3 94       	inc	r13
	 if (long_name_length>16) break;
    1772:	e1 e1       	ldi	r30, 0x11	; 17
    1774:	de 16       	cp	r13, r30
    1776:	e1 f1       	breq	.+120    	; 0x17f0 <FAT_GetFileSearch+0x41e>
     if (name_index&0x40) break;//последняя часть имени
    1778:	c6 fe       	sbrs	r12, 6
    177a:	65 cf       	rjmp	.-310    	; 0x1646 <FAT_GetFileSearch+0x274>
    177c:	05 c0       	rjmp	.+10     	; 0x1788 <FAT_GetFileSearch+0x3b6>
    }
    else break;//это не длинное имя
   }
   if (long_name_length>16) long_name_length=16;
    177e:	f0 e1       	ldi	r31, 0x10	; 16
    1780:	fd 15       	cp	r31, r13
    1782:	b0 f1       	brcs	.+108    	; 0x17f0 <FAT_GetFileSearch+0x41e>
   if (long_name_length>0) filename[long_name_length]=0;
    1784:	dd 20       	and	r13, r13
    1786:	39 f0       	breq	.+14     	; 0x1796 <FAT_GetFileSearch+0x3c4>
    1788:	8d 0c       	add	r8, r13
    178a:	91 1c       	adc	r9, r1
    178c:	d4 01       	movw	r26, r8
    178e:	1c 92       	st	X, r1
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <FAT_GetFileSearch+0x3c4>
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	01 c0       	rjmp	.+2      	; 0x1798 <FAT_GetFileSearch+0x3c6>
    1796:	81 e0       	ldi	r24, 0x01	; 1
  }
  return(true);
 }
 return(false); 
}
    1798:	68 96       	adiw	r28, 0x18	; 24
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	de bf       	out	0x3e, r29	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	1f 91       	pop	r17
    17aa:	0f 91       	pop	r16
    17ac:	ff 90       	pop	r15
    17ae:	ef 90       	pop	r14
    17b0:	df 90       	pop	r13
    17b2:	cf 90       	pop	r12
    17b4:	bf 90       	pop	r11
    17b6:	af 90       	pop	r10
    17b8:	9f 90       	pop	r9
    17ba:	8f 90       	pop	r8
    17bc:	7f 90       	pop	r7
    17be:	6f 90       	pop	r6
    17c0:	5f 90       	pop	r5
    17c2:	4f 90       	pop	r4
    17c4:	3f 90       	pop	r3
    17c6:	2f 90       	pop	r2
    17c8:	08 95       	ret
   }	
  }     
 }
 if (res==true)
 {
  unsigned char type=GetByte(sFATRecordPointer.CurrentFolderAddr+11UL);  
    17ca:	60 91 59 03 	lds	r22, 0x0359
    17ce:	70 91 5a 03 	lds	r23, 0x035A
    17d2:	80 91 5b 03 	lds	r24, 0x035B
    17d6:	90 91 5c 03 	lds	r25, 0x035C
    17da:	65 5f       	subi	r22, 0xF5	; 245
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255
    17de:	8f 4f       	sbci	r24, 0xFF	; 255
    17e0:	9f 4f       	sbci	r25, 0xFF	; 255
    17e2:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
  if (type&ATTR_VOLUME_ID) return(false);//этот файл - имя диска  
    17e6:	26 2f       	mov	r18, r22
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	63 ff       	sbrs	r22, 3
    17ec:	7b ce       	rjmp	.-778    	; 0x14e4 <FAT_GetFileSearch+0x112>
    17ee:	d1 cf       	rjmp	.-94     	; 0x1792 <FAT_GetFileSearch+0x3c0>
    17f0:	60 e1       	ldi	r22, 0x10	; 16
    17f2:	d6 2e       	mov	r13, r22
    17f4:	c9 cf       	rjmp	.-110    	; 0x1788 <FAT_GetFileSearch+0x3b6>

000017f6 <FAT_WriteBlock>:
}
//----------------------------------------------------------------------------------------------------
//записать в ОЗУ блок файла
//----------------------------------------------------------------------------------------------------
bool FAT_WriteBlock(unsigned short *BlockSize,unsigned short Block)
{
    17f6:	2f 92       	push	r2
    17f8:	3f 92       	push	r3
    17fa:	4f 92       	push	r4
    17fc:	5f 92       	push	r5
    17fe:	6f 92       	push	r6
    1800:	7f 92       	push	r7
    1802:	8f 92       	push	r8
    1804:	9f 92       	push	r9
    1806:	af 92       	push	r10
    1808:	bf 92       	push	r11
    180a:	cf 92       	push	r12
    180c:	df 92       	push	r13
    180e:	ef 92       	push	r14
    1810:	ff 92       	push	r15
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	df 93       	push	r29
    1818:	cf 93       	push	r28
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	66 97       	sbiw	r28, 0x16	; 22
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	9a 8b       	std	Y+18, r25	; 0x12
    182c:	89 8b       	std	Y+17, r24	; 0x11
    182e:	7c 8b       	std	Y+20, r23	; 0x14
    1830:	6b 8b       	std	Y+19, r22	; 0x13
 unsigned long i=0;//номер считываемого байта файла
 unsigned short dram_addr=0;//адрес в динамической памяти
 unsigned short current_block=0;//текущий номер блока
 unsigned short block_size=0;//размер блока
 signed char Directory;//не директория ли файл
 *BlockSize=0;
    1832:	fc 01       	movw	r30, r24
    1834:	11 82       	std	Z+1, r1	; 0x01
    1836:	10 82       	st	Z, r1
 if (FAT_GetFileSearch(string,&CurrentCluster,&Size,&Directory)==false) return(false);
    1838:	88 e2       	ldi	r24, 0x28	; 40
    183a:	93 e0       	ldi	r25, 0x03	; 3
    183c:	be 01       	movw	r22, r28
    183e:	6e 5f       	subi	r22, 0xFE	; 254
    1840:	7f 4f       	sbci	r23, 0xFF	; 255
    1842:	ae 01       	movw	r20, r28
    1844:	4a 5f       	subi	r20, 0xFA	; 250
    1846:	5f 4f       	sbci	r21, 0xFF	; 255
    1848:	9e 01       	movw	r18, r28
    184a:	2f 5f       	subi	r18, 0xFF	; 255
    184c:	3f 4f       	sbci	r19, 0xFF	; 255
    184e:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <FAT_GetFileSearch>
    1852:	88 23       	and	r24, r24
    1854:	09 f4       	brne	.+2      	; 0x1858 <FAT_WriteBlock+0x62>
    1856:	0b c1       	rjmp	.+534    	; 0x1a6e <FAT_WriteBlock+0x278>
    1858:	66 24       	eor	r6, r6
    185a:	77 24       	eor	r7, r7
    185c:	43 01       	movw	r8, r6
    185e:	22 24       	eor	r2, r2
    1860:	33 24       	eor	r3, r3
    1862:	18 8a       	std	Y+16, r1	; 0x10
    1864:	1f 86       	std	Y+15, r1	; 0x0f
    1866:	44 24       	eor	r4, r4
    1868:	55 24       	eor	r5, r5
    186a:	1e 86       	std	Y+14, r1	; 0x0e
    186c:	f6 c0       	rjmp	.+492    	; 0x1a5a <FAT_WriteBlock+0x264>
 unsigned char mode=0;              
 while(i<Size)
 {
  DRAM_Refresh();//производим регенерацию памяти 
    186e:	0e 94 21 01 	call	0x242	; 0x242 <DRAM_Refresh>
  //считываем данные
  unsigned long length=ClusterSize;
    1872:	a0 90 7d 03 	lds	r10, 0x037D
    1876:	b0 90 7e 03 	lds	r11, 0x037E
    187a:	c0 90 7f 03 	lds	r12, 0x037F
    187e:	d0 90 80 03 	lds	r13, 0x0380
  if (length+i>=Size) length=Size-i;
    1882:	2e 81       	ldd	r18, Y+6	; 0x06
    1884:	3f 81       	ldd	r19, Y+7	; 0x07
    1886:	48 85       	ldd	r20, Y+8	; 0x08
    1888:	59 85       	ldd	r21, Y+9	; 0x09
    188a:	d4 01       	movw	r26, r8
    188c:	c3 01       	movw	r24, r6
    188e:	8a 0d       	add	r24, r10
    1890:	9b 1d       	adc	r25, r11
    1892:	ac 1d       	adc	r26, r12
    1894:	bd 1d       	adc	r27, r13
    1896:	82 17       	cp	r24, r18
    1898:	93 07       	cpc	r25, r19
    189a:	a4 07       	cpc	r26, r20
    189c:	b5 07       	cpc	r27, r21
    189e:	30 f0       	brcs	.+12     	; 0x18ac <FAT_WriteBlock+0xb6>
    18a0:	59 01       	movw	r10, r18
    18a2:	6a 01       	movw	r12, r20
    18a4:	a6 18       	sub	r10, r6
    18a6:	b7 08       	sbc	r11, r7
    18a8:	c8 08       	sbc	r12, r8
    18aa:	d9 08       	sbc	r13, r9
  //получаем первый сектор кластера
  unsigned long FirstSectorofCluster=((CurrentCluster-2UL)*SecPerClus)+FirstDataSector; 
  unsigned long addr=FirstSectorofCluster*BytsPerSec;
    18ac:	6a 81       	ldd	r22, Y+2	; 0x02
    18ae:	7b 81       	ldd	r23, Y+3	; 0x03
    18b0:	8c 81       	ldd	r24, Y+4	; 0x04
    18b2:	9d 81       	ldd	r25, Y+5	; 0x05
    18b4:	62 50       	subi	r22, 0x02	; 2
    18b6:	70 40       	sbci	r23, 0x00	; 0
    18b8:	80 40       	sbci	r24, 0x00	; 0
    18ba:	90 40       	sbci	r25, 0x00	; 0
    18bc:	20 91 45 03 	lds	r18, 0x0345
    18c0:	30 91 46 03 	lds	r19, 0x0346
    18c4:	40 91 47 03 	lds	r20, 0x0347
    18c8:	50 91 48 03 	lds	r21, 0x0348
    18cc:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
    18d0:	9b 01       	movw	r18, r22
    18d2:	ac 01       	movw	r20, r24
    18d4:	60 91 41 03 	lds	r22, 0x0341
    18d8:	70 91 42 03 	lds	r23, 0x0342
    18dc:	80 91 43 03 	lds	r24, 0x0343
    18e0:	90 91 44 03 	lds	r25, 0x0344
    18e4:	62 0f       	add	r22, r18
    18e6:	73 1f       	adc	r23, r19
    18e8:	84 1f       	adc	r24, r20
    18ea:	95 1f       	adc	r25, r21
    18ec:	20 91 6d 03 	lds	r18, 0x036D
    18f0:	30 91 6e 03 	lds	r19, 0x036E
    18f4:	40 91 6f 03 	lds	r20, 0x036F
    18f8:	50 91 70 03 	lds	r21, 0x0370
    18fc:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
    1900:	6a 87       	std	Y+10, r22	; 0x0a
    1902:	7b 87       	std	Y+11, r23	; 0x0b
    1904:	8c 87       	std	Y+12, r24	; 0x0c
    1906:	9d 87       	std	Y+13, r25	; 0x0d
    1908:	ee 24       	eor	r14, r14
    190a:	ff 24       	eor	r15, r15
    190c:	87 01       	movw	r16, r14
    190e:	58 c0       	rjmp	.+176    	; 0x19c0 <FAT_WriteBlock+0x1ca>
  for(unsigned long m=0;m<length;m++,i++)
  {
   DRAM_Refresh();//производим регенерацию памяти
    1910:	0e 94 21 01 	call	0x242	; 0x242 <DRAM_Refresh>
   unsigned char b=GetByte(addr+m);
    1914:	6a 85       	ldd	r22, Y+10	; 0x0a
    1916:	7b 85       	ldd	r23, Y+11	; 0x0b
    1918:	8c 85       	ldd	r24, Y+12	; 0x0c
    191a:	9d 85       	ldd	r25, Y+13	; 0x0d
    191c:	6e 0d       	add	r22, r14
    191e:	7f 1d       	adc	r23, r15
    1920:	80 1f       	adc	r24, r16
    1922:	91 1f       	adc	r25, r17
    1924:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    1928:	46 2f       	mov	r20, r22
   if (mode==0)//чтение младшего байта длины
    192a:	fe 85       	ldd	r31, Y+14	; 0x0e
    192c:	ff 23       	and	r31, r31
    192e:	29 f4       	brne	.+10     	; 0x193a <FAT_WriteBlock+0x144>
   {
    block_size=b;
    1930:	46 2e       	mov	r4, r22
    1932:	55 24       	eor	r5, r5
    1934:	21 e0       	ldi	r18, 0x01	; 1
    1936:	2e 87       	std	Y+14, r18	; 0x0e
    1938:	39 c0       	rjmp	.+114    	; 0x19ac <FAT_WriteBlock+0x1b6>
	mode=1;
	continue;
   }
   if (mode==1)//чтение старшего байта длины
    193a:	3e 85       	ldd	r19, Y+14	; 0x0e
    193c:	31 30       	cpi	r19, 0x01	; 1
    193e:	59 f4       	brne	.+22     	; 0x1956 <FAT_WriteBlock+0x160>
   {
    block_size|=((unsigned short)b)<<8;
    1940:	6e 8b       	std	Y+22, r22	; 0x16
    1942:	1d 8a       	std	Y+21, r1	; 0x15
    1944:	8d 89       	ldd	r24, Y+21	; 0x15
    1946:	9e 89       	ldd	r25, Y+22	; 0x16
    1948:	48 2a       	or	r4, r24
    194a:	59 2a       	or	r5, r25
    194c:	22 24       	eor	r2, r2
    194e:	33 24       	eor	r3, r3
    1950:	92 e0       	ldi	r25, 0x02	; 2
    1952:	9e 87       	std	Y+14, r25	; 0x0e
    1954:	2b c0       	rjmp	.+86     	; 0x19ac <FAT_WriteBlock+0x1b6>
	mode=2;
	dram_addr=0;
	continue;
   }
   if (mode==2)//чтение данных
    1956:	ee 85       	ldd	r30, Y+14	; 0x0e
    1958:	e2 30       	cpi	r30, 0x02	; 2
    195a:	41 f5       	brne	.+80     	; 0x19ac <FAT_WriteBlock+0x1b6>
   {
    if (current_block==Block) DRAM_WriteByte(dram_addr,b);//это выбранный блок
    195c:	2f 85       	ldd	r18, Y+15	; 0x0f
    195e:	38 89       	ldd	r19, Y+16	; 0x10
    1960:	8b 89       	ldd	r24, Y+19	; 0x13
    1962:	9c 89       	ldd	r25, Y+20	; 0x14
    1964:	28 17       	cp	r18, r24
    1966:	39 07       	cpc	r19, r25
    1968:	29 f4       	brne	.+10     	; 0x1974 <FAT_WriteBlock+0x17e>
    196a:	b1 01       	movw	r22, r2
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	0e 94 a3 01 	call	0x346	; 0x346 <DRAM_WriteByte>
	dram_addr++;
    1974:	08 94       	sec
    1976:	21 1c       	adc	r2, r1
    1978:	31 1c       	adc	r3, r1
	if (dram_addr>=block_size)//блок закончен
    197a:	24 14       	cp	r2, r4
    197c:	35 04       	cpc	r3, r5
    197e:	b0 f0       	brcs	.+44     	; 0x19ac <FAT_WriteBlock+0x1b6>
	{
	 if (current_block==Block)//закончился выбранный блок
    1980:	ef 85       	ldd	r30, Y+15	; 0x0f
    1982:	f8 89       	ldd	r31, Y+16	; 0x10
    1984:	2b 89       	ldd	r18, Y+19	; 0x13
    1986:	3c 89       	ldd	r19, Y+20	; 0x14
    1988:	e2 17       	cp	r30, r18
    198a:	f3 07       	cpc	r31, r19
    198c:	31 f4       	brne	.+12     	; 0x199a <FAT_WriteBlock+0x1a4>
	 {
	  *BlockSize=block_size;  
    198e:	e9 89       	ldd	r30, Y+17	; 0x11
    1990:	fa 89       	ldd	r31, Y+18	; 0x12
    1992:	51 82       	std	Z+1, r5	; 0x01
    1994:	40 82       	st	Z, r4
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	6b c0       	rjmp	.+214    	; 0x1a70 <FAT_WriteBlock+0x27a>
	  return(true);
	 }
	 //переходим к следующему блоку
	 block_size=0;
	 current_block++;
    199a:	2f 85       	ldd	r18, Y+15	; 0x0f
    199c:	38 89       	ldd	r19, Y+16	; 0x10
    199e:	2f 5f       	subi	r18, 0xFF	; 255
    19a0:	3f 4f       	sbci	r19, 0xFF	; 255
    19a2:	38 8b       	std	Y+16, r19	; 0x10
    19a4:	2f 87       	std	Y+15, r18	; 0x0f
    19a6:	44 24       	eor	r4, r4
    19a8:	55 24       	eor	r5, r5
    19aa:	1e 86       	std	Y+14, r1	; 0x0e
  unsigned long length=ClusterSize;
  if (length+i>=Size) length=Size-i;
  //получаем первый сектор кластера
  unsigned long FirstSectorofCluster=((CurrentCluster-2UL)*SecPerClus)+FirstDataSector; 
  unsigned long addr=FirstSectorofCluster*BytsPerSec;
  for(unsigned long m=0;m<length;m++,i++)
    19ac:	08 94       	sec
    19ae:	e1 1c       	adc	r14, r1
    19b0:	f1 1c       	adc	r15, r1
    19b2:	01 1d       	adc	r16, r1
    19b4:	11 1d       	adc	r17, r1
    19b6:	08 94       	sec
    19b8:	61 1c       	adc	r6, r1
    19ba:	71 1c       	adc	r7, r1
    19bc:	81 1c       	adc	r8, r1
    19be:	91 1c       	adc	r9, r1
    19c0:	ea 14       	cp	r14, r10
    19c2:	fb 04       	cpc	r15, r11
    19c4:	0c 05       	cpc	r16, r12
    19c6:	1d 05       	cpc	r17, r13
    19c8:	08 f4       	brcc	.+2      	; 0x19cc <FAT_WriteBlock+0x1d6>
    19ca:	a2 cf       	rjmp	.-188    	; 0x1910 <FAT_WriteBlock+0x11a>
	}
   } 
  }
  //переходим к следующему кластеру файла
  unsigned long FATClusterOffset=0;//смещение по таблице FAT в байтах (в FAT32 они 4-х байтные, а в FAT16 - двухбайтные)
  if (FATType==FAT16) FATClusterOffset=CurrentCluster*2UL;
    19cc:	e0 91 22 01 	lds	r30, 0x0122
    19d0:	e1 30       	cpi	r30, 0x01	; 1
    19d2:	21 f0       	breq	.+8      	; 0x19dc <FAT_WriteBlock+0x1e6>
    19d4:	ee 24       	eor	r14, r14
    19d6:	ff 24       	eor	r15, r15
    19d8:	87 01       	movw	r16, r14
    19da:	08 c0       	rjmp	.+16     	; 0x19ec <FAT_WriteBlock+0x1f6>
    19dc:	ea 80       	ldd	r14, Y+2	; 0x02
    19de:	fb 80       	ldd	r15, Y+3	; 0x03
    19e0:	0c 81       	ldd	r16, Y+4	; 0x04
    19e2:	1d 81       	ldd	r17, Y+5	; 0x05
    19e4:	ee 0c       	add	r14, r14
    19e6:	ff 1c       	adc	r15, r15
    19e8:	00 1f       	adc	r16, r16
    19ea:	11 1f       	adc	r17, r17
  unsigned long NextClusterAddr=ResvdSecCnt*BytsPerSec+FATClusterOffset;//адрес следующего кластера
    19ec:	20 91 4d 03 	lds	r18, 0x034D
    19f0:	30 91 4e 03 	lds	r19, 0x034E
    19f4:	40 91 4f 03 	lds	r20, 0x034F
    19f8:	50 91 50 03 	lds	r21, 0x0350
    19fc:	60 91 6d 03 	lds	r22, 0x036D
    1a00:	70 91 6e 03 	lds	r23, 0x036E
    1a04:	80 91 6f 03 	lds	r24, 0x036F
    1a08:	90 91 70 03 	lds	r25, 0x0370
  //считываем номер следующего кластера файла
  unsigned long NextCluster=0;
  if (FATType==FAT16) NextCluster=GetShort(NextClusterAddr);
    1a0c:	e1 30       	cpi	r30, 0x01	; 1
    1a0e:	79 f5       	brne	.+94     	; 0x1a6e <FAT_WriteBlock+0x278>
    1a10:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
    1a14:	e6 0e       	add	r14, r22
    1a16:	f7 1e       	adc	r15, r23
    1a18:	08 1f       	adc	r16, r24
    1a1a:	19 1f       	adc	r17, r25
    1a1c:	c8 01       	movw	r24, r16
    1a1e:	b7 01       	movw	r22, r14
    1a20:	0e 94 42 06 	call	0xc84	; 0xc84 <GetShort>
    1a24:	9b 01       	movw	r18, r22
    1a26:	ac 01       	movw	r20, r24
  if (NextCluster==0) break;//неиспользуемый кластер
    1a28:	61 15       	cp	r22, r1
    1a2a:	71 05       	cpc	r23, r1
    1a2c:	81 05       	cpc	r24, r1
    1a2e:	91 05       	cpc	r25, r1
    1a30:	f1 f0       	breq	.+60     	; 0x1a6e <FAT_WriteBlock+0x278>
  if (NextCluster>=CountofClusters+2UL) break;//номер больше максимально возможного номера кластера - конец файла или сбой
    1a32:	80 91 75 03 	lds	r24, 0x0375
    1a36:	90 91 76 03 	lds	r25, 0x0376
    1a3a:	a0 91 77 03 	lds	r26, 0x0377
    1a3e:	b0 91 78 03 	lds	r27, 0x0378
    1a42:	02 96       	adiw	r24, 0x02	; 2
    1a44:	a1 1d       	adc	r26, r1
    1a46:	b1 1d       	adc	r27, r1
    1a48:	28 17       	cp	r18, r24
    1a4a:	39 07       	cpc	r19, r25
    1a4c:	4a 07       	cpc	r20, r26
    1a4e:	5b 07       	cpc	r21, r27
    1a50:	70 f4       	brcc	.+28     	; 0x1a6e <FAT_WriteBlock+0x278>
  CurrentCluster=NextCluster;
    1a52:	2a 83       	std	Y+2, r18	; 0x02
    1a54:	3b 83       	std	Y+3, r19	; 0x03
    1a56:	4c 83       	std	Y+4, r20	; 0x04
    1a58:	5d 83       	std	Y+5, r21	; 0x05
 unsigned short block_size=0;//размер блока
 signed char Directory;//не директория ли файл
 *BlockSize=0;
 if (FAT_GetFileSearch(string,&CurrentCluster,&Size,&Directory)==false) return(false);
 unsigned char mode=0;              
 while(i<Size)
    1a5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a5e:	a8 85       	ldd	r26, Y+8	; 0x08
    1a60:	b9 85       	ldd	r27, Y+9	; 0x09
    1a62:	68 16       	cp	r6, r24
    1a64:	79 06       	cpc	r7, r25
    1a66:	8a 06       	cpc	r8, r26
    1a68:	9b 06       	cpc	r9, r27
    1a6a:	08 f4       	brcc	.+2      	; 0x1a6e <FAT_WriteBlock+0x278>
    1a6c:	00 cf       	rjmp	.-512    	; 0x186e <FAT_WriteBlock+0x78>
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
  if (NextCluster>=CountofClusters+2UL) break;//номер больше максимально возможного номера кластера - конец файла или сбой
  CurrentCluster=NextCluster;
 }
 //конец файла
 return(false);
}
    1a70:	66 96       	adiw	r28, 0x16	; 22
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	1f 91       	pop	r17
    1a82:	0f 91       	pop	r16
    1a84:	ff 90       	pop	r15
    1a86:	ef 90       	pop	r14
    1a88:	df 90       	pop	r13
    1a8a:	cf 90       	pop	r12
    1a8c:	bf 90       	pop	r11
    1a8e:	af 90       	pop	r10
    1a90:	9f 90       	pop	r9
    1a92:	8f 90       	pop	r8
    1a94:	7f 90       	pop	r7
    1a96:	6f 90       	pop	r6
    1a98:	5f 90       	pop	r5
    1a9a:	4f 90       	pop	r4
    1a9c:	3f 90       	pop	r3
    1a9e:	2f 90       	pop	r2
    1aa0:	08 95       	ret

00001aa2 <FAT_BeginFileSearch>:
}
//----------------------------------------------------------------------------------------------------
//начать поиск файла в кталоге
//----------------------------------------------------------------------------------------------------
bool FAT_BeginFileSearch(void)
{
    1aa2:	af 92       	push	r10
    1aa4:	bf 92       	push	r11
    1aa6:	cf 92       	push	r12
    1aa8:	df 92       	push	r13
    1aaa:	ef 92       	push	r14
    1aac:	ff 92       	push	r15
    1aae:	0f 93       	push	r16
    1ab0:	1f 93       	push	r17
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	29 97       	sbiw	r28, 0x09	; 9
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
 unsigned long FirstCluster;//первый кластер файла
 unsigned long Size;//размер файла
 signed char Directory;//не директория ли файл
 
 sFATRecordPointer.CurrentFolderAddr=sFATRecordPointer.BeginFolderAddr;
    1ac6:	e0 90 55 03 	lds	r14, 0x0355
    1aca:	f0 90 56 03 	lds	r15, 0x0356
    1ace:	00 91 57 03 	lds	r16, 0x0357
    1ad2:	10 91 58 03 	lds	r17, 0x0358
    1ad6:	e0 92 59 03 	sts	0x0359, r14
    1ada:	f0 92 5a 03 	sts	0x035A, r15
    1ade:	00 93 5b 03 	sts	0x035B, r16
    1ae2:	10 93 5c 03 	sts	0x035C, r17
 sFATRecordPointer.CurrentFolderCluster=sFATRecordPointer.BeginFolderCluster;
    1ae6:	80 91 5d 03 	lds	r24, 0x035D
    1aea:	90 91 5e 03 	lds	r25, 0x035E
    1aee:	a0 91 5f 03 	lds	r26, 0x035F
    1af2:	b0 91 60 03 	lds	r27, 0x0360
    1af6:	80 93 61 03 	sts	0x0361, r24
    1afa:	90 93 62 03 	sts	0x0362, r25
    1afe:	a0 93 63 03 	sts	0x0363, r26
    1b02:	b0 93 64 03 	sts	0x0364, r27
 sFATRecordPointer.BeginFolderClusterAddr=sFATRecordPointer.CurrentFolderAddr;
    1b06:	e0 92 65 03 	sts	0x0365, r14
    1b0a:	f0 92 66 03 	sts	0x0366, r15
    1b0e:	00 93 67 03 	sts	0x0367, r16
    1b12:	10 93 68 03 	sts	0x0368, r17
 if (sFATRecordPointer.BeginFolderAddr!=FirstRootFolderAddr)//это не корневая директория
    1b16:	80 91 81 03 	lds	r24, 0x0381
    1b1a:	90 91 82 03 	lds	r25, 0x0382
    1b1e:	a0 91 83 03 	lds	r26, 0x0383
    1b22:	b0 91 84 03 	lds	r27, 0x0384
    1b26:	a0 90 6d 03 	lds	r10, 0x036D
    1b2a:	b0 90 6e 03 	lds	r11, 0x036E
    1b2e:	c0 90 6f 03 	lds	r12, 0x036F
    1b32:	d0 90 70 03 	lds	r13, 0x0370
    1b36:	e8 16       	cp	r14, r24
    1b38:	f9 06       	cpc	r15, r25
    1b3a:	0a 07       	cpc	r16, r26
    1b3c:	1b 07       	cpc	r17, r27
    1b3e:	49 f0       	breq	.+18     	; 0x1b52 <FAT_BeginFileSearch+0xb0>
 {
  sFATRecordPointer.EndFolderClusterAddr=sFATRecordPointer.BeginFolderAddr+SecPerClus*BytsPerSec;
    1b40:	20 91 45 03 	lds	r18, 0x0345
    1b44:	30 91 46 03 	lds	r19, 0x0346
    1b48:	40 91 47 03 	lds	r20, 0x0347
    1b4c:	50 91 48 03 	lds	r21, 0x0348
    1b50:	08 c0       	rjmp	.+16     	; 0x1b62 <FAT_BeginFileSearch+0xc0>
 }
 else sFATRecordPointer.EndFolderClusterAddr=sFATRecordPointer.BeginFolderAddr+(RootDirSectors*BytsPerSec);//конечный адрес имён файлов внутри директории (или кластера)
    1b52:	20 91 79 03 	lds	r18, 0x0379
    1b56:	30 91 7a 03 	lds	r19, 0x037A
    1b5a:	40 91 7b 03 	lds	r20, 0x037B
    1b5e:	50 91 7c 03 	lds	r21, 0x037C
    1b62:	c6 01       	movw	r24, r12
    1b64:	b5 01       	movw	r22, r10
    1b66:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
    1b6a:	e6 0e       	add	r14, r22
    1b6c:	f7 1e       	adc	r15, r23
    1b6e:	08 1f       	adc	r16, r24
    1b70:	19 1f       	adc	r17, r25
    1b72:	e0 92 69 03 	sts	0x0369, r14
    1b76:	f0 92 6a 03 	sts	0x036A, r15
    1b7a:	00 93 6b 03 	sts	0x036B, r16
    1b7e:	10 93 6c 03 	sts	0x036C, r17
 //переходим к первому нужному нам файлу
 while(1)
 {
  if (FAT_GetFileSearch(NULL,&FirstCluster,&Size,&Directory)==false)
    1b82:	12 e0       	ldi	r17, 0x02	; 2
    1b84:	c1 2e       	mov	r12, r17
    1b86:	d1 2c       	mov	r13, r1
    1b88:	cc 0e       	add	r12, r28
    1b8a:	dd 1e       	adc	r13, r29
    1b8c:	b6 e0       	ldi	r27, 0x06	; 6
    1b8e:	eb 2e       	mov	r14, r27
    1b90:	f1 2c       	mov	r15, r1
    1b92:	ec 0e       	add	r14, r28
    1b94:	fd 1e       	adc	r15, r29
    1b96:	8e 01       	movw	r16, r28
    1b98:	0f 5f       	subi	r16, 0xFF	; 255
    1b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	b6 01       	movw	r22, r12
    1ba2:	a7 01       	movw	r20, r14
    1ba4:	98 01       	movw	r18, r16
    1ba6:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <FAT_GetFileSearch>
    1baa:	88 23       	and	r24, r24
    1bac:	11 f0       	breq	.+4      	; 0x1bb2 <FAT_BeginFileSearch+0x110>
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	04 c0       	rjmp	.+8      	; 0x1bba <FAT_BeginFileSearch+0x118>
  {
   if (FAT_NextFileSearch()==false) return(false);
    1bb2:	0e 94 ef 08 	call	0x11de	; 0x11de <FAT_NextFileSearch>
    1bb6:	88 23       	and	r24, r24
    1bb8:	89 f7       	brne	.-30     	; 0x1b9c <FAT_BeginFileSearch+0xfa>
  } 
  else return(true);
 }
 return(false);
}
    1bba:	29 96       	adiw	r28, 0x09	; 9
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	ff 90       	pop	r15
    1bd0:	ef 90       	pop	r14
    1bd2:	df 90       	pop	r13
    1bd4:	cf 90       	pop	r12
    1bd6:	bf 90       	pop	r11
    1bd8:	af 90       	pop	r10
    1bda:	08 95       	ret

00001bdc <FAT_EnterDirectory>:
}
//----------------------------------------------------------------------------------------------------
//зайти в директорию и найти первый файл
//----------------------------------------------------------------------------------------------------
bool FAT_EnterDirectory(unsigned long FirstCluster)
{ 
    1bdc:	2f 92       	push	r2
    1bde:	3f 92       	push	r3
    1be0:	4f 92       	push	r4
    1be2:	5f 92       	push	r5
    1be4:	6f 92       	push	r6
    1be6:	7f 92       	push	r7
    1be8:	8f 92       	push	r8
    1bea:	9f 92       	push	r9
    1bec:	af 92       	push	r10
    1bee:	bf 92       	push	r11
    1bf0:	cf 92       	push	r12
    1bf2:	df 92       	push	r13
    1bf4:	ef 92       	push	r14
    1bf6:	ff 92       	push	r15
    1bf8:	0f 93       	push	r16
    1bfa:	1f 93       	push	r17
    1bfc:	1b 01       	movw	r2, r22
    1bfe:	2c 01       	movw	r4, r24
    1c00:	60 90 6d 03 	lds	r6, 0x036D
    1c04:	70 90 6e 03 	lds	r7, 0x036E
    1c08:	80 90 6f 03 	lds	r8, 0x036F
    1c0c:	90 90 70 03 	lds	r9, 0x0370
 if (FirstCluster==0UL)//это корневая директория (номер первого кластера, распределяемого директории)
    1c10:	61 15       	cp	r22, r1
    1c12:	71 05       	cpc	r23, r1
    1c14:	81 05       	cpc	r24, r1
    1c16:	91 05       	cpc	r25, r1
    1c18:	d9 f4       	brne	.+54     	; 0x1c50 <FAT_EnterDirectory+0x74>
 {
  sFATRecordPointer.BeginFolderAddr=FirstRootFolderAddr; 
    1c1a:	e0 90 81 03 	lds	r14, 0x0381
    1c1e:	f0 90 82 03 	lds	r15, 0x0382
    1c22:	00 91 83 03 	lds	r16, 0x0383
    1c26:	10 91 84 03 	lds	r17, 0x0384
    1c2a:	e0 92 55 03 	sts	0x0355, r14
    1c2e:	f0 92 56 03 	sts	0x0356, r15
    1c32:	00 93 57 03 	sts	0x0357, r16
    1c36:	10 93 58 03 	sts	0x0358, r17
  sFATRecordPointer.EndFolderClusterAddr=sFATRecordPointer.BeginFolderAddr+(RootDirSectors*BytsPerSec);//конечный адрес имён файлов внутри директории (или кластера)
    1c3a:	20 91 79 03 	lds	r18, 0x0379
    1c3e:	30 91 7a 03 	lds	r19, 0x037A
    1c42:	40 91 7b 03 	lds	r20, 0x037B
    1c46:	50 91 7c 03 	lds	r21, 0x037C
    1c4a:	c4 01       	movw	r24, r8
    1c4c:	b3 01       	movw	r22, r6
    1c4e:	30 c0       	rjmp	.+96     	; 0x1cb0 <FAT_EnterDirectory+0xd4>
 }
 else
 {
  unsigned long FirstSectorofCluster=((FirstCluster-2UL)*SecPerClus)+FirstDataSector; 
    1c50:	a0 90 45 03 	lds	r10, 0x0345
    1c54:	b0 90 46 03 	lds	r11, 0x0346
    1c58:	c0 90 47 03 	lds	r12, 0x0347
    1c5c:	d0 90 48 03 	lds	r13, 0x0348
  sFATRecordPointer.BeginFolderAddr=FirstSectorofCluster*BytsPerSec;//начальный адрес имён файлов внутри директории
    1c60:	62 50       	subi	r22, 0x02	; 2
    1c62:	70 40       	sbci	r23, 0x00	; 0
    1c64:	80 40       	sbci	r24, 0x00	; 0
    1c66:	90 40       	sbci	r25, 0x00	; 0
    1c68:	a6 01       	movw	r20, r12
    1c6a:	95 01       	movw	r18, r10
    1c6c:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
    1c70:	9b 01       	movw	r18, r22
    1c72:	ac 01       	movw	r20, r24
    1c74:	60 91 41 03 	lds	r22, 0x0341
    1c78:	70 91 42 03 	lds	r23, 0x0342
    1c7c:	80 91 43 03 	lds	r24, 0x0343
    1c80:	90 91 44 03 	lds	r25, 0x0344
    1c84:	62 0f       	add	r22, r18
    1c86:	73 1f       	adc	r23, r19
    1c88:	84 1f       	adc	r24, r20
    1c8a:	95 1f       	adc	r25, r21
    1c8c:	a4 01       	movw	r20, r8
    1c8e:	93 01       	movw	r18, r6
    1c90:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
    1c94:	7b 01       	movw	r14, r22
    1c96:	8c 01       	movw	r16, r24
    1c98:	60 93 55 03 	sts	0x0355, r22
    1c9c:	70 93 56 03 	sts	0x0356, r23
    1ca0:	80 93 57 03 	sts	0x0357, r24
    1ca4:	90 93 58 03 	sts	0x0358, r25
  sFATRecordPointer.EndFolderClusterAddr=sFATRecordPointer.BeginFolderAddr+SecPerClus*BytsPerSec;
    1ca8:	c4 01       	movw	r24, r8
    1caa:	b3 01       	movw	r22, r6
    1cac:	a6 01       	movw	r20, r12
    1cae:	95 01       	movw	r18, r10
    1cb0:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
    1cb4:	e6 0e       	add	r14, r22
    1cb6:	f7 1e       	adc	r15, r23
    1cb8:	08 1f       	adc	r16, r24
    1cba:	19 1f       	adc	r17, r25
    1cbc:	e0 92 69 03 	sts	0x0369, r14
    1cc0:	f0 92 6a 03 	sts	0x036A, r15
    1cc4:	00 93 6b 03 	sts	0x036B, r16
    1cc8:	10 93 6c 03 	sts	0x036C, r17
 }
 sFATRecordPointer.BeginFolderCluster=FirstCluster;//начальный кластер имени файла внутри директории
    1ccc:	20 92 5d 03 	sts	0x035D, r2
    1cd0:	30 92 5e 03 	sts	0x035E, r3
    1cd4:	40 92 5f 03 	sts	0x035F, r4
    1cd8:	50 92 60 03 	sts	0x0360, r5
 sFATRecordPointer.CurrentFolderCluster=sFATRecordPointer.BeginFolderCluster;//текущий кластер имени файла внутри директории
    1cdc:	20 92 61 03 	sts	0x0361, r2
    1ce0:	30 92 62 03 	sts	0x0362, r3
    1ce4:	40 92 63 03 	sts	0x0363, r4
    1ce8:	50 92 64 03 	sts	0x0364, r5
 sFATRecordPointer.CurrentFolderAddr=sFATRecordPointer.BeginFolderAddr;//текущий адрес имён файлов внутри директории
    1cec:	80 91 55 03 	lds	r24, 0x0355
    1cf0:	90 91 56 03 	lds	r25, 0x0356
    1cf4:	a0 91 57 03 	lds	r26, 0x0357
    1cf8:	b0 91 58 03 	lds	r27, 0x0358
    1cfc:	80 93 59 03 	sts	0x0359, r24
    1d00:	90 93 5a 03 	sts	0x035A, r25
    1d04:	a0 93 5b 03 	sts	0x035B, r26
    1d08:	b0 93 5c 03 	sts	0x035C, r27
 sFATRecordPointer.BeginFolderClusterAddr=sFATRecordPointer.BeginFolderAddr; 
    1d0c:	80 93 65 03 	sts	0x0365, r24
    1d10:	90 93 66 03 	sts	0x0366, r25
    1d14:	a0 93 67 03 	sts	0x0367, r26
    1d18:	b0 93 68 03 	sts	0x0368, r27
 return(FAT_BeginFileSearch());
    1d1c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <FAT_BeginFileSearch>
}
    1d20:	1f 91       	pop	r17
    1d22:	0f 91       	pop	r16
    1d24:	ff 90       	pop	r15
    1d26:	ef 90       	pop	r14
    1d28:	df 90       	pop	r13
    1d2a:	cf 90       	pop	r12
    1d2c:	bf 90       	pop	r11
    1d2e:	af 90       	pop	r10
    1d30:	9f 90       	pop	r9
    1d32:	8f 90       	pop	r8
    1d34:	7f 90       	pop	r7
    1d36:	6f 90       	pop	r6
    1d38:	5f 90       	pop	r5
    1d3a:	4f 90       	pop	r4
    1d3c:	3f 90       	pop	r3
    1d3e:	2f 90       	pop	r2
    1d40:	08 95       	ret

00001d42 <WaitAnyKey>:
}
//----------------------------------------------------------------------------------------------------
//ожидание любой клавиши
//----------------------------------------------------------------------------------------------------
void WaitAnyKey(void)
{
    1d42:	80 ed       	ldi	r24, 0xD0	; 208
    1d44:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d46:	20 e9       	ldi	r18, 0x90	; 144
    1d48:	31 e0       	ldi	r19, 0x01	; 1
    1d4a:	f9 01       	movw	r30, r18
    1d4c:	31 97       	sbiw	r30, 0x01	; 1
    1d4e:	f1 f7       	brne	.-4      	; 0x1d4c <WaitAnyKey+0xa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d50:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d52:	d9 f7       	brne	.-10     	; 0x1d4a <WaitAnyKey+0x8>
 _delay_ms(200);
 while(1)
 {
  if (BUTTON_UP_PIN&(1<<BUTTON_UP)) break;
    1d54:	83 99       	sbic	0x10, 3	; 16
    1d56:	06 c0       	rjmp	.+12     	; 0x1d64 <WaitAnyKey+0x22>
  if (BUTTON_DOWN_PIN&(1<<BUTTON_DOWN)) break;
    1d58:	81 99       	sbic	0x10, 1	; 16
    1d5a:	04 c0       	rjmp	.+8      	; 0x1d64 <WaitAnyKey+0x22>
  if (BUTTON_CENTER_PIN&(1<<BUTTON_CENTER)) break;    
    1d5c:	82 99       	sbic	0x10, 2	; 16
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <WaitAnyKey+0x22>
  if (BUTTON_SELECT_PIN&(1<<BUTTON_SELECT)) break;
    1d60:	84 9b       	sbis	0x10, 4	; 16
    1d62:	f8 cf       	rjmp	.-16     	; 0x1d54 <WaitAnyKey+0x12>
    1d64:	08 95       	ret

00001d66 <InitAVR>:
//----------------------------------------------------------------------------------------------------
//инициализация контроллера
//----------------------------------------------------------------------------------------------------
void InitAVR(void)
{
 cli();
    1d66:	f8 94       	cli
 
 //настраиваем порты
 DDRA=0;
    1d68:	1a ba       	out	0x1a, r1	; 26
 DDRB=0;
    1d6a:	17 ba       	out	0x17, r1	; 23
 DDRD=0; 
    1d6c:	11 ba       	out	0x11, r1	; 17
 DDRC=0;
    1d6e:	14 ba       	out	0x14, r1	; 20
 
 BUTTON_UP_DDR&=0xff^(1<<BUTTON_UP);
    1d70:	8b 98       	cbi	0x11, 3	; 17
 BUTTON_DOWN_DDR&=0xff^(1<<BUTTON_DOWN);
    1d72:	89 98       	cbi	0x11, 1	; 17
 BUTTON_CENTER_DDR&=0xff^(1<<BUTTON_CENTER);
    1d74:	8a 98       	cbi	0x11, 2	; 17
 BUTTON_SELECT_DDR&=0xff^(1<<BUTTON_SELECT);
    1d76:	8c 98       	cbi	0x11, 4	; 17

 TAPE_OUT_DDR|=(1<<TAPE_OUT);
    1d78:	88 9a       	sbi	0x11, 0	; 17
 
 //задаём состояние портов
 PORTA=0xff;
    1d7a:	8f ef       	ldi	r24, 0xFF	; 255
    1d7c:	8b bb       	out	0x1b, r24	; 27
 PORTB=0xff;
    1d7e:	88 bb       	out	0x18, r24	; 24
 PORTD=0xff;
    1d80:	82 bb       	out	0x12, r24	; 18
 PORTC=0xff;
    1d82:	85 bb       	out	0x15, r24	; 21
 
 //настраиваем таймер T0
 TCCR0=((0<<CS02)|(1<<CS01)|(1<<CS00));//выбран режим деления тактовых импульсов на 64
    1d84:	83 e0       	ldi	r24, 0x03	; 3
    1d86:	83 bf       	out	0x33, r24	; 51
 TCNT0=0;//начальное значение таймера
    1d88:	12 be       	out	0x32, r1	; 50
 TIMSK=(1<<TOIE0);//прерывание по переполнению таймера (таймер T0 восьмибитный и считает на увеличение до 0xff)
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	89 bf       	out	0x39, r24	; 57
 
 TAPE_OUT_PORT&=0xff^(1<<TAPE_OUT);
    1d8e:	90 98       	cbi	0x12, 0	; 18
}
    1d90:	08 95       	ret

00001d92 <__vector_9>:
//----------------------------------------------------------------------------------------------------
//обработчик вектора прерывания таймера T0 (8-ми разрядный таймер) по переполнению
//----------------------------------------------------------------------------------------------------
ISR(TIMER0_OVF_vect)
{ 
    1d92:	1f 92       	push	r1
    1d94:	0f 92       	push	r0
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	0f 92       	push	r0
    1d9a:	11 24       	eor	r1, r1
    1d9c:	2f 93       	push	r18
    1d9e:	3f 93       	push	r19
    1da0:	4f 93       	push	r20
    1da2:	5f 93       	push	r21
    1da4:	6f 93       	push	r22
    1da6:	7f 93       	push	r23
    1da8:	8f 93       	push	r24
    1daa:	9f 93       	push	r25
    1dac:	af 93       	push	r26
    1dae:	bf 93       	push	r27
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
    1db4:	ef 93       	push	r30
    1db6:	ff 93       	push	r31
 static unsigned char byte=0;//выдаваемый байт
 static unsigned char index=0;//номер выдаваемого бита
 static unsigned short addr=0;//текущий адрес
 TCNT0=0;
    1db8:	12 be       	out	0x32, r1	; 50
 if (TapeOutMode==TAPE_OUT_STOP)
    1dba:	80 91 1c 01 	lds	r24, 0x011C
    1dbe:	84 30       	cpi	r24, 0x04	; 4
    1dc0:	11 f4       	brne	.+4      	; 0x1dc6 <__vector_9+0x34>
 {
  TAPE_OUT_PORT&=0xff^(1<<TAPE_OUT);
    1dc2:	90 98       	cbi	0x12, 0	; 18
    1dc4:	aa c0       	rjmp	.+340    	; 0x1f1a <__vector_9+0x188>
  return;
 }
 if (TapeOutVolume==true)
    1dc6:	80 91 1d 01 	lds	r24, 0x011D
    1dca:	81 30       	cpi	r24, 0x01	; 1
    1dcc:	21 f4       	brne	.+8      	; 0x1dd6 <__vector_9+0x44>
 {
  TAPE_OUT_PORT|=1<<TAPE_OUT;
    1dce:	90 9a       	sbi	0x12, 0	; 18
  TapeOutVolume=false;
    1dd0:	10 92 1d 01 	sts	0x011D, r1
    1dd4:	04 c0       	rjmp	.+8      	; 0x1dde <__vector_9+0x4c>
 }
 else
 {
  TAPE_OUT_PORT&=0xff^(1<<TAPE_OUT);  
    1dd6:	90 98       	cbi	0x12, 0	; 18
  TapeOutVolume=true;
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	80 93 1d 01 	sts	0x011D, r24
 }
 //выводим пилот-тон
 if (TapeOutMode==TAPE_OUT_LEAD)
    1dde:	80 91 1c 01 	lds	r24, 0x011C
    1de2:	88 23       	and	r24, r24
    1de4:	f1 f4       	brne	.+60     	; 0x1e22 <__vector_9+0x90>
 {
  TCNT0=255-(142>>Speed);//начальное значение таймера
    1de6:	80 91 27 01 	lds	r24, 0x0127
    1dea:	2e e8       	ldi	r18, 0x8E	; 142
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <__vector_9+0x62>
    1df0:	35 95       	asr	r19
    1df2:	27 95       	ror	r18
    1df4:	8a 95       	dec	r24
    1df6:	e2 f7       	brpl	.-8      	; 0x1df0 <__vector_9+0x5e>
    1df8:	20 95       	com	r18
    1dfa:	22 bf       	out	0x32, r18	; 50
  if (LeadToneCounter>0) LeadToneCounter--;
    1dfc:	80 91 1a 01 	lds	r24, 0x011A
    1e00:	90 91 1b 01 	lds	r25, 0x011B
    1e04:	18 16       	cp	r1, r24
    1e06:	19 06       	cpc	r1, r25
    1e08:	54 f4       	brge	.+20     	; 0x1e1e <__vector_9+0x8c>
    1e0a:	80 91 1a 01 	lds	r24, 0x011A
    1e0e:	90 91 1b 01 	lds	r25, 0x011B
    1e12:	01 97       	sbiw	r24, 0x01	; 1
    1e14:	90 93 1b 01 	sts	0x011B, r25
    1e18:	80 93 1a 01 	sts	0x011A, r24
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <__vector_9+0x90>
  else
  {
   TapeOutMode=TAPE_OUT_SYNCHRO_1;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	10 c0       	rjmp	.+32     	; 0x1e42 <__vector_9+0xb0>
   return;
  }
 }
 //выводим синхросигнал 1
 if (TapeOutMode==TAPE_OUT_SYNCHRO_1)
    1e22:	80 91 1c 01 	lds	r24, 0x011C
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	79 f4       	brne	.+30     	; 0x1e48 <__vector_9+0xb6>
 {
  TCNT0=255-(43>>Speed);//начальное значение таймера
    1e2a:	80 91 27 01 	lds	r24, 0x0127
    1e2e:	2b e2       	ldi	r18, 0x2B	; 43
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <__vector_9+0xa6>
    1e34:	35 95       	asr	r19
    1e36:	27 95       	ror	r18
    1e38:	8a 95       	dec	r24
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <__vector_9+0xa2>
    1e3c:	20 95       	com	r18
    1e3e:	22 bf       	out	0x32, r18	; 50
  TapeOutMode=TAPE_OUT_SYNCHRO_2;
    1e40:	82 e0       	ldi	r24, 0x02	; 2
    1e42:	80 93 1c 01 	sts	0x011C, r24
    1e46:	69 c0       	rjmp	.+210    	; 0x1f1a <__vector_9+0x188>
  return;
 }
 //выводим синхросигнал 2
 if (TapeOutMode==TAPE_OUT_SYNCHRO_2)
    1e48:	80 91 1c 01 	lds	r24, 0x011C
    1e4c:	82 30       	cpi	r24, 0x02	; 2
    1e4e:	c1 f4       	brne	.+48     	; 0x1e80 <__vector_9+0xee>
 {
  TCNT0=255-(48>>Speed);//начальное значение таймера
    1e50:	20 91 27 01 	lds	r18, 0x0127
    1e54:	80 e3       	ldi	r24, 0x30	; 48
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <__vector_9+0xcc>
    1e5a:	95 95       	asr	r25
    1e5c:	87 95       	ror	r24
    1e5e:	2a 95       	dec	r18
    1e60:	e2 f7       	brpl	.-8      	; 0x1e5a <__vector_9+0xc8>
    1e62:	80 95       	com	r24
    1e64:	82 bf       	out	0x32, r24	; 50
  TapeOutMode=TAPE_OUT_DATA;
    1e66:	83 e0       	ldi	r24, 0x03	; 3
    1e68:	80 93 1c 01 	sts	0x011C, r24
  index=16;
    1e6c:	80 e1       	ldi	r24, 0x10	; 16
    1e6e:	80 93 25 01 	sts	0x0125, r24
  byte=0;
    1e72:	10 92 26 01 	sts	0x0126, r1
  addr=0;
    1e76:	10 92 24 01 	sts	0x0124, r1
    1e7a:	10 92 23 01 	sts	0x0123, r1
    1e7e:	4d c0       	rjmp	.+154    	; 0x1f1a <__vector_9+0x188>
  return;
 }
 //передаём данные 
 if (TapeOutMode==TAPE_OUT_DATA)
    1e80:	80 91 1c 01 	lds	r24, 0x011C
    1e84:	83 30       	cpi	r24, 0x03	; 3
    1e86:	09 f0       	breq	.+2      	; 0x1e8a <__vector_9+0xf8>
    1e88:	48 c0       	rjmp	.+144    	; 0x1f1a <__vector_9+0x188>
 {   
  if (index>=16)
    1e8a:	80 91 25 01 	lds	r24, 0x0125
    1e8e:	80 31       	cpi	r24, 0x10	; 16
    1e90:	30 f1       	brcs	.+76     	; 0x1ede <__vector_9+0x14c>
  {     
   if (addr>=BlockSize)
    1e92:	c0 91 23 01 	lds	r28, 0x0123
    1e96:	d0 91 24 01 	lds	r29, 0x0124
    1e9a:	80 91 16 01 	lds	r24, 0x0116
    1e9e:	90 91 17 01 	lds	r25, 0x0117
    1ea2:	c8 17       	cp	r28, r24
    1ea4:	d9 07       	cpc	r29, r25
    1ea6:	40 f0       	brcs	.+16     	; 0x1eb8 <__vector_9+0x126>
   {
    TapeOutMode=TAPE_OUT_STOP;
    1ea8:	84 e0       	ldi	r24, 0x04	; 4
    1eaa:	80 93 1c 01 	sts	0x011C, r24
	DataCounter=0;
    1eae:	10 92 19 01 	sts	0x0119, r1
    1eb2:	10 92 18 01 	sts	0x0118, r1
    1eb6:	31 c0       	rjmp	.+98     	; 0x1f1a <__vector_9+0x188>
	return;
   }
   index=0;
    1eb8:	10 92 25 01 	sts	0x0125, r1
   byte=DRAM_ReadByte(addr);
    1ebc:	be 01       	movw	r22, r28
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	0e 94 89 01 	call	0x312	; 0x312 <DRAM_ReadByte>
    1ec6:	80 93 26 01 	sts	0x0126, r24
   addr++;
    1eca:	ce 01       	movw	r24, r28
    1ecc:	01 96       	adiw	r24, 0x01	; 1
    1ece:	90 93 24 01 	sts	0x0124, r25
    1ed2:	80 93 23 01 	sts	0x0123, r24
   DataCounter=addr;
    1ed6:	90 93 19 01 	sts	0x0119, r25
    1eda:	80 93 18 01 	sts	0x0118, r24
  }
  //выдаём бит
  if (byte&128) TCNT0=255-(112>>Speed);//начальное значение таймера
    1ede:	30 91 26 01 	lds	r19, 0x0126
    1ee2:	37 ff       	sbrs	r19, 7
    1ee4:	05 c0       	rjmp	.+10     	; 0x1ef0 <__vector_9+0x15e>
    1ee6:	20 91 27 01 	lds	r18, 0x0127
    1eea:	80 e7       	ldi	r24, 0x70	; 112
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	04 c0       	rjmp	.+8      	; 0x1ef8 <__vector_9+0x166>
            else TCNT0=255-(56>>Speed);//начальное значение таймера
    1ef0:	20 91 27 01 	lds	r18, 0x0127
    1ef4:	88 e3       	ldi	r24, 0x38	; 56
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <__vector_9+0x16c>
    1efa:	95 95       	asr	r25
    1efc:	87 95       	ror	r24
    1efe:	2a 95       	dec	r18
    1f00:	e2 f7       	brpl	.-8      	; 0x1efa <__vector_9+0x168>
    1f02:	80 95       	com	r24
    1f04:	82 bf       	out	0x32, r24	; 50
  if ((index%2)==1) byte<<=1;  
    1f06:	80 91 25 01 	lds	r24, 0x0125
    1f0a:	80 ff       	sbrs	r24, 0
    1f0c:	03 c0       	rjmp	.+6      	; 0x1f14 <__vector_9+0x182>
    1f0e:	33 0f       	add	r19, r19
    1f10:	30 93 26 01 	sts	0x0126, r19
  index++;
    1f14:	8f 5f       	subi	r24, 0xFF	; 255
    1f16:	80 93 25 01 	sts	0x0125, r24
  return;		
 } 
    1f1a:	ff 91       	pop	r31
    1f1c:	ef 91       	pop	r30
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	bf 91       	pop	r27
    1f24:	af 91       	pop	r26
    1f26:	9f 91       	pop	r25
    1f28:	8f 91       	pop	r24
    1f2a:	7f 91       	pop	r23
    1f2c:	6f 91       	pop	r22
    1f2e:	5f 91       	pop	r21
    1f30:	4f 91       	pop	r20
    1f32:	3f 91       	pop	r19
    1f34:	2f 91       	pop	r18
    1f36:	0f 90       	pop	r0
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	0f 90       	pop	r0
    1f3c:	1f 90       	pop	r1
    1f3e:	18 95       	reti

00001f40 <OutputImage>:
}
//----------------------------------------------------------------------------------------------------
//запуск образа
//----------------------------------------------------------------------------------------------------
void OutputImage(void)
{
    1f40:	2f 92       	push	r2
    1f42:	3f 92       	push	r3
    1f44:	4f 92       	push	r4
    1f46:	5f 92       	push	r5
    1f48:	6f 92       	push	r6
    1f4a:	7f 92       	push	r7
    1f4c:	8f 92       	push	r8
    1f4e:	9f 92       	push	r9
    1f50:	af 92       	push	r10
    1f52:	bf 92       	push	r11
    1f54:	cf 92       	push	r12
    1f56:	df 92       	push	r13
    1f58:	ef 92       	push	r14
    1f5a:	ff 92       	push	r15
    1f5c:	0f 93       	push	r16
    1f5e:	1f 93       	push	r17
    1f60:	cf 93       	push	r28
    1f62:	df 93       	push	r29
    1f64:	88 e8       	ldi	r24, 0x88	; 136
    1f66:	93 e1       	ldi	r25, 0x13	; 19
    1f68:	20 e9       	ldi	r18, 0x90	; 144
    1f6a:	31 e0       	ldi	r19, 0x01	; 1
    1f6c:	f9 01       	movw	r30, r18
    1f6e:	31 97       	sbiw	r30, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <OutputImage+0x2e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f72:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f74:	d9 f7       	brne	.-10     	; 0x1f6c <OutputImage+0x2c>
    1f76:	00 e0       	ldi	r16, 0x00	; 0
    1f78:	10 e0       	ldi	r17, 0x00	; 0
 unsigned short block=0;
 while(1)
 {  
  if (FAT_WriteBlock(&BlockSize,block)==false) break;//блоки файла закончились 
  //выводим номер блока файла
  sprintf(string,"Блок:%u [%u]",block+1,BlockSize);
    1f7a:	58 e2       	ldi	r21, 0x28	; 40
    1f7c:	a5 2e       	mov	r10, r21
    1f7e:	53 e0       	ldi	r21, 0x03	; 3
    1f80:	b5 2e       	mov	r11, r21
    1f82:	40 e6       	ldi	r20, 0x60	; 96
    1f84:	84 2e       	mov	r8, r20
    1f86:	40 e0       	ldi	r20, 0x00	; 0
    1f88:	94 2e       	mov	r9, r20
  WH1602_SetTextUpLine(string);  
  //запускаем таймер и регенерируем память    
  TCNT0=0;//начальное значение таймера
  LeadToneCounter=6000<<Speed;
    1f8a:	30 e7       	ldi	r19, 0x70	; 112
    1f8c:	23 2e       	mov	r2, r19
    1f8e:	37 e1       	ldi	r19, 0x17	; 23
    1f90:	33 2e       	mov	r3, r19
    1f92:	20 e9       	ldi	r18, 0x90	; 144
    1f94:	e2 2e       	mov	r14, r18
    1f96:	21 e0       	ldi	r18, 0x01	; 1
    1f98:	f2 2e       	mov	r15, r18
  {
   cli();
   DRAM_Refresh();
   if (TapeOutMode==TAPE_OUT_STOP) 
   {    
    sprintf(string,"Блок:%u [0]",block+1);
    1f9a:	9d e6       	ldi	r25, 0x6D	; 109
    1f9c:	49 2e       	mov	r4, r25
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	59 2e       	mov	r5, r25
    1fa2:	80 e4       	ldi	r24, 0x40	; 64
    1fa4:	68 2e       	mov	r6, r24
    1fa6:	8c e9       	ldi	r24, 0x9C	; 156
    1fa8:	78 2e       	mov	r7, r24
 _delay_ms(500);
 //повторяем для каждого блока tap-файла
 unsigned short block=0;
 while(1)
 {  
  if (FAT_WriteBlock(&BlockSize,block)==false) break;//блоки файла закончились 
    1faa:	86 e1       	ldi	r24, 0x16	; 22
    1fac:	91 e0       	ldi	r25, 0x01	; 1
    1fae:	b8 01       	movw	r22, r16
    1fb0:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <FAT_WriteBlock>
    1fb4:	88 23       	and	r24, r24
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <OutputImage+0x7a>
    1fb8:	21 c1       	rjmp	.+578    	; 0x21fc <OutputImage+0x2bc>
  //выводим номер блока файла
  sprintf(string,"Блок:%u [%u]",block+1,BlockSize);
    1fba:	68 01       	movw	r12, r16
    1fbc:	08 94       	sec
    1fbe:	c1 1c       	adc	r12, r1
    1fc0:	d1 1c       	adc	r13, r1
    1fc2:	2d b7       	in	r18, 0x3d	; 61
    1fc4:	3e b7       	in	r19, 0x3e	; 62
    1fc6:	28 50       	subi	r18, 0x08	; 8
    1fc8:	30 40       	sbci	r19, 0x00	; 0
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	3e bf       	out	0x3e, r19	; 62
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	2d bf       	out	0x3d, r18	; 61
    1fd4:	ed b7       	in	r30, 0x3d	; 61
    1fd6:	fe b7       	in	r31, 0x3e	; 62
    1fd8:	31 96       	adiw	r30, 0x01	; 1
    1fda:	ad b7       	in	r26, 0x3d	; 61
    1fdc:	be b7       	in	r27, 0x3e	; 62
    1fde:	12 96       	adiw	r26, 0x02	; 2
    1fe0:	bc 92       	st	X, r11
    1fe2:	ae 92       	st	-X, r10
    1fe4:	11 97       	sbiw	r26, 0x01	; 1
    1fe6:	93 82       	std	Z+3, r9	; 0x03
    1fe8:	82 82       	std	Z+2, r8	; 0x02
    1fea:	d5 82       	std	Z+5, r13	; 0x05
    1fec:	c4 82       	std	Z+4, r12	; 0x04
    1fee:	80 91 16 01 	lds	r24, 0x0116
    1ff2:	90 91 17 01 	lds	r25, 0x0117
    1ff6:	97 83       	std	Z+7, r25	; 0x07
    1ff8:	86 83       	std	Z+6, r24	; 0x06
    1ffa:	0e 94 32 18 	call	0x3064	; 0x3064 <sprintf>
  WH1602_SetTextUpLine(string);  
    1ffe:	2d b7       	in	r18, 0x3d	; 61
    2000:	3e b7       	in	r19, 0x3e	; 62
    2002:	28 5f       	subi	r18, 0xF8	; 248
    2004:	3f 4f       	sbci	r19, 0xFF	; 255
    2006:	0f b6       	in	r0, 0x3f	; 63
    2008:	f8 94       	cli
    200a:	3e bf       	out	0x3e, r19	; 62
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	2d bf       	out	0x3d, r18	; 61
    2010:	c5 01       	movw	r24, r10
    2012:	0e 94 60 02 	call	0x4c0	; 0x4c0 <WH1602_SetTextUpLine>
  //запускаем таймер и регенерируем память    
  TCNT0=0;//начальное значение таймера
    2016:	12 be       	out	0x32, r1	; 50
  LeadToneCounter=6000<<Speed;
    2018:	80 91 27 01 	lds	r24, 0x0127
    201c:	d1 01       	movw	r26, r2
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <OutputImage+0xe4>
    2020:	aa 0f       	add	r26, r26
    2022:	bb 1f       	adc	r27, r27
    2024:	8a 95       	dec	r24
    2026:	e2 f7       	brpl	.-8      	; 0x2020 <OutputImage+0xe0>
    2028:	b0 93 1b 01 	sts	0x011B, r27
    202c:	a0 93 1a 01 	sts	0x011A, r26
  TapeOutMode=TAPE_OUT_LEAD;
    2030:	10 92 1c 01 	sts	0x011C, r1
  TapeOutVolume=0;    
    2034:	10 92 1d 01 	sts	0x011D, r1
  DataCounter=0;
    2038:	10 92 19 01 	sts	0x0119, r1
    203c:	10 92 18 01 	sts	0x0118, r1
  unsigned short dl=0;
  sei();  
    2040:	78 94       	sei
    2042:	c0 e0       	ldi	r28, 0x00	; 0
    2044:	d0 e0       	ldi	r29, 0x00	; 0
  while(1)
  {
   cli();
    2046:	f8 94       	cli
   DRAM_Refresh();
    2048:	0e 94 21 01 	call	0x242	; 0x242 <DRAM_Refresh>
   if (TapeOutMode==TAPE_OUT_STOP) 
    204c:	80 91 1c 01 	lds	r24, 0x011C
    2050:	84 30       	cpi	r24, 0x04	; 4
    2052:	09 f0       	breq	.+2      	; 0x2056 <OutputImage+0x116>
    2054:	62 c0       	rjmp	.+196    	; 0x211a <OutputImage+0x1da>
   {    
    sprintf(string,"Блок:%u [0]",block+1);
    2056:	00 d0       	rcall	.+0      	; 0x2058 <OutputImage+0x118>
    2058:	00 d0       	rcall	.+0      	; 0x205a <OutputImage+0x11a>
    205a:	00 d0       	rcall	.+0      	; 0x205c <OutputImage+0x11c>
    205c:	ed b7       	in	r30, 0x3d	; 61
    205e:	fe b7       	in	r31, 0x3e	; 62
    2060:	31 96       	adiw	r30, 0x01	; 1
    2062:	ad b7       	in	r26, 0x3d	; 61
    2064:	be b7       	in	r27, 0x3e	; 62
    2066:	12 96       	adiw	r26, 0x02	; 2
    2068:	bc 92       	st	X, r11
    206a:	ae 92       	st	-X, r10
    206c:	11 97       	sbiw	r26, 0x01	; 1
    206e:	53 82       	std	Z+3, r5	; 0x03
    2070:	42 82       	std	Z+2, r4	; 0x02
    2072:	d5 82       	std	Z+5, r13	; 0x05
    2074:	c4 82       	std	Z+4, r12	; 0x04
    2076:	0e 94 32 18 	call	0x3064	; 0x3064 <sprintf>
    WH1602_SetTextUpLine(string);
    207a:	2d b7       	in	r18, 0x3d	; 61
    207c:	3e b7       	in	r19, 0x3e	; 62
    207e:	2a 5f       	subi	r18, 0xFA	; 250
    2080:	3f 4f       	sbci	r19, 0xFF	; 255
    2082:	0f b6       	in	r0, 0x3f	; 63
    2084:	f8 94       	cli
    2086:	3e bf       	out	0x3e, r19	; 62
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	2d bf       	out	0x3d, r18	; 61
    208c:	c5 01       	movw	r24, r10
    208e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <WH1602_SetTextUpLine>
    unsigned short new_block=block+1;
    //формируем паузу
    int delay=200;
    if (BlockSize>0x13) delay=500;//передавался файл
    2092:	80 91 16 01 	lds	r24, 0x0116
    2096:	90 91 17 01 	lds	r25, 0x0117
    209a:	44 97       	sbiw	r24, 0x14	; 20
    209c:	18 f0       	brcs	.+6      	; 0x20a4 <OutputImage+0x164>
    209e:	44 ef       	ldi	r20, 0xF4	; 244
    20a0:	51 e0       	ldi	r21, 0x01	; 1
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <OutputImage+0x168>
    20a4:	48 ec       	ldi	r20, 0xC8	; 200
    20a6:	50 e0       	ldi	r21, 0x00	; 0
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	31 c0       	rjmp	.+98     	; 0x2110 <OutputImage+0x1d0>
    20ae:	c3 01       	movw	r24, r6
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <OutputImage+0x170>
    for(unsigned short n=0;n<delay;n++)
    {
     _delay_ms(10);
     if (BUTTON_SELECT_PIN&(1<<BUTTON_SELECT))//выход
    20b4:	84 99       	sbic	0x10, 4	; 16
    20b6:	a2 c0       	rjmp	.+324    	; 0x21fc <OutputImage+0x2bc>
     {    
	  TAPE_OUT_PORT&=0xff^(1<<TAPE_OUT);
	  return;
     }   
     if (BUTTON_CENTER_PIN&(1<<BUTTON_CENTER))//пауза
    20b8:	82 9b       	sbis	0x10, 2	; 16
    20ba:	10 c0       	rjmp	.+32     	; 0x20dc <OutputImage+0x19c>
    20bc:	80 ed       	ldi	r24, 0xD0	; 208
    20be:	97 e0       	ldi	r25, 0x07	; 7
    20c0:	f7 01       	movw	r30, r14
    20c2:	31 97       	sbiw	r30, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <OutputImage+0x182>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c8:	d9 f7       	brne	.-10     	; 0x20c0 <OutputImage+0x180>
     {
	  _delay_ms(200);
	  while(1)
	  {
	   if (BUTTON_CENTER_PIN&(1<<BUTTON_CENTER)) break;
    20ca:	82 9b       	sbis	0x10, 2	; 16
    20cc:	fe cf       	rjmp	.-4      	; 0x20ca <OutputImage+0x18a>
    20ce:	80 ed       	ldi	r24, 0xD0	; 208
    20d0:	97 e0       	ldi	r25, 0x07	; 7
    20d2:	f7 01       	movw	r30, r14
    20d4:	31 97       	sbiw	r30, 0x01	; 1
    20d6:	f1 f7       	brne	.-4      	; 0x20d4 <OutputImage+0x194>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20da:	d9 f7       	brne	.-10     	; 0x20d2 <OutputImage+0x192>
	  }
	  _delay_ms(200);
     }
     if (BUTTON_UP_PIN&(1<<BUTTON_UP))//на блок вперёд
    20dc:	83 9b       	sbis	0x10, 3	; 16
    20de:	08 c0       	rjmp	.+16     	; 0x20f0 <OutputImage+0x1b0>
    20e0:	80 ed       	ldi	r24, 0xD0	; 208
    20e2:	97 e0       	ldi	r25, 0x07	; 7
    20e4:	f7 01       	movw	r30, r14
    20e6:	31 97       	sbiw	r30, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <OutputImage+0x1a6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ec:	d9 f7       	brne	.-10     	; 0x20e4 <OutputImage+0x1a4>
    20ee:	83 c0       	rjmp	.+262    	; 0x21f6 <OutputImage+0x2b6>
     {
      _delay_ms(200);
      new_block=block+1;
      break;
     }
     if (BUTTON_DOWN_PIN&(1<<BUTTON_DOWN))//на блок назад
    20f0:	81 9b       	sbis	0x10, 1	; 16
    20f2:	0c c0       	rjmp	.+24     	; 0x210c <OutputImage+0x1cc>
    20f4:	80 ed       	ldi	r24, 0xD0	; 208
    20f6:	97 e0       	ldi	r25, 0x07	; 7
    20f8:	f7 01       	movw	r30, r14
    20fa:	31 97       	sbiw	r30, 0x01	; 1
    20fc:	f1 f7       	brne	.-4      	; 0x20fa <OutputImage+0x1ba>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fe:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2100:	d9 f7       	brne	.-10     	; 0x20f8 <OutputImage+0x1b8>
     {
      _delay_ms(200);
      if (block>0) new_block=block-1;
    2102:	01 15       	cp	r16, r1
    2104:	11 05       	cpc	r17, r1
    2106:	09 f4       	brne	.+2      	; 0x210a <OutputImage+0x1ca>
    2108:	76 c0       	rjmp	.+236    	; 0x21f6 <OutputImage+0x2b6>
    210a:	72 c0       	rjmp	.+228    	; 0x21f0 <OutputImage+0x2b0>
    WH1602_SetTextUpLine(string);
    unsigned short new_block=block+1;
    //формируем паузу
    int delay=200;
    if (BlockSize>0x13) delay=500;//передавался файл
    for(unsigned short n=0;n<delay;n++)
    210c:	2f 5f       	subi	r18, 0xFF	; 255
    210e:	3f 4f       	sbci	r19, 0xFF	; 255
    2110:	24 17       	cp	r18, r20
    2112:	35 07       	cpc	r19, r21
    2114:	08 f4       	brcc	.+2      	; 0x2118 <OutputImage+0x1d8>
    2116:	cb cf       	rjmp	.-106    	; 0x20ae <OutputImage+0x16e>
    2118:	6e c0       	rjmp	.+220    	; 0x21f6 <OutputImage+0x2b6>
     }
    }
	block=new_block;
    break;   
   }
   unsigned short dc=BlockSize-DataCounter;
    211a:	20 91 16 01 	lds	r18, 0x0116
    211e:	30 91 17 01 	lds	r19, 0x0117
    2122:	40 91 18 01 	lds	r20, 0x0118
    2126:	50 91 19 01 	lds	r21, 0x0119
   unsigned short tm=TapeOutMode;
    212a:	80 91 1c 01 	lds	r24, 0x011C
   sei();
    212e:	78 94       	sei
   if (tm==TAPE_OUT_DATA)
    2130:	83 30       	cpi	r24, 0x03	; 3
    2132:	69 f5       	brne	.+90     	; 0x218e <OutputImage+0x24e>
   {       
    if (dl==30000)
    2134:	85 e7       	ldi	r24, 0x75	; 117
    2136:	c0 33       	cpi	r28, 0x30	; 48
    2138:	d8 07       	cpc	r29, r24
    213a:	41 f5       	brne	.+80     	; 0x218c <OutputImage+0x24c>
	{
     sprintf(string,"Блок:%u [%u]",block+1,dc);
    213c:	ad b7       	in	r26, 0x3d	; 61
    213e:	be b7       	in	r27, 0x3e	; 62
    2140:	18 97       	sbiw	r26, 0x08	; 8
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	be bf       	out	0x3e, r27	; 62
    2148:	0f be       	out	0x3f, r0	; 63
    214a:	ad bf       	out	0x3d, r26	; 61
    214c:	ed b7       	in	r30, 0x3d	; 61
    214e:	fe b7       	in	r31, 0x3e	; 62
    2150:	31 96       	adiw	r30, 0x01	; 1
    2152:	12 96       	adiw	r26, 0x02	; 2
    2154:	bc 92       	st	X, r11
    2156:	ae 92       	st	-X, r10
    2158:	11 97       	sbiw	r26, 0x01	; 1
    215a:	93 82       	std	Z+3, r9	; 0x03
    215c:	82 82       	std	Z+2, r8	; 0x02
    215e:	d5 82       	std	Z+5, r13	; 0x05
    2160:	c4 82       	std	Z+4, r12	; 0x04
    2162:	24 1b       	sub	r18, r20
    2164:	35 0b       	sbc	r19, r21
    2166:	37 83       	std	Z+7, r19	; 0x07
    2168:	26 83       	std	Z+6, r18	; 0x06
    216a:	0e 94 32 18 	call	0x3064	; 0x3064 <sprintf>
     WH1602_SetTextUpLine(string);
    216e:	2d b7       	in	r18, 0x3d	; 61
    2170:	3e b7       	in	r19, 0x3e	; 62
    2172:	28 5f       	subi	r18, 0xF8	; 248
    2174:	3f 4f       	sbci	r19, 0xFF	; 255
    2176:	0f b6       	in	r0, 0x3f	; 63
    2178:	f8 94       	cli
    217a:	3e bf       	out	0x3e, r19	; 62
    217c:	0f be       	out	0x3f, r0	; 63
    217e:	2d bf       	out	0x3d, r18	; 61
    2180:	c5 01       	movw	r24, r10
    2182:	0e 94 60 02 	call	0x4c0	; 0x4c0 <WH1602_SetTextUpLine>
    2186:	c0 e0       	ldi	r28, 0x00	; 0
    2188:	d0 e0       	ldi	r29, 0x00	; 0
    218a:	01 c0       	rjmp	.+2      	; 0x218e <OutputImage+0x24e>
	 dl=0;
	}
	else dl++;
    218c:	21 96       	adiw	r28, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    218e:	85 e3       	ldi	r24, 0x35	; 53
    2190:	8a 95       	dec	r24
    2192:	f1 f7       	brne	.-4      	; 0x2190 <OutputImage+0x250>
   }
   _delay_us(10);
   if (BUTTON_SELECT_PIN&(1<<BUTTON_SELECT))//выход
    2194:	84 9b       	sbis	0x10, 4	; 16
    2196:	02 c0       	rjmp	.+4      	; 0x219c <OutputImage+0x25c>
   {
    cli();
    2198:	f8 94       	cli
    219a:	30 c0       	rjmp	.+96     	; 0x21fc <OutputImage+0x2bc>
	TAPE_OUT_PORT&=0xff^(1<<TAPE_OUT);
	return;
   }   
   if (BUTTON_CENTER_PIN&(1<<BUTTON_CENTER))//пауза
    219c:	82 9b       	sbis	0x10, 2	; 16
    219e:	12 c0       	rjmp	.+36     	; 0x21c4 <OutputImage+0x284>
   {
	cli();
    21a0:	f8 94       	cli
    21a2:	80 ed       	ldi	r24, 0xD0	; 208
    21a4:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21a6:	f7 01       	movw	r30, r14
    21a8:	31 97       	sbiw	r30, 0x01	; 1
    21aa:	f1 f7       	brne	.-4      	; 0x21a8 <OutputImage+0x268>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ae:	d9 f7       	brne	.-10     	; 0x21a6 <OutputImage+0x266>
	_delay_ms(200);
	while(1)
	{
	 if (BUTTON_CENTER_PIN&(1<<BUTTON_CENTER)) break;
    21b0:	82 9b       	sbis	0x10, 2	; 16
    21b2:	fe cf       	rjmp	.-4      	; 0x21b0 <OutputImage+0x270>
	}
	sei();
    21b4:	78 94       	sei
    21b6:	80 ed       	ldi	r24, 0xD0	; 208
    21b8:	97 e0       	ldi	r25, 0x07	; 7
    21ba:	f7 01       	movw	r30, r14
    21bc:	31 97       	sbiw	r30, 0x01	; 1
    21be:	f1 f7       	brne	.-4      	; 0x21bc <OutputImage+0x27c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c2:	d9 f7       	brne	.-10     	; 0x21ba <OutputImage+0x27a>
	_delay_ms(200);
   }
   
   if (BUTTON_UP_PIN&(1<<BUTTON_UP))//на блок вперёд
    21c4:	83 9b       	sbis	0x10, 3	; 16
    21c6:	08 c0       	rjmp	.+16     	; 0x21d8 <OutputImage+0x298>
    21c8:	80 ed       	ldi	r24, 0xD0	; 208
    21ca:	97 e0       	ldi	r25, 0x07	; 7
    21cc:	f7 01       	movw	r30, r14
    21ce:	31 97       	sbiw	r30, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <OutputImage+0x28e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d4:	d9 f7       	brne	.-10     	; 0x21cc <OutputImage+0x28c>
    21d6:	0f c0       	rjmp	.+30     	; 0x21f6 <OutputImage+0x2b6>
   {
    _delay_ms(200);
    block++;
    break;
   }
   if (BUTTON_DOWN_PIN&(1<<BUTTON_DOWN))//на блок назад
    21d8:	81 9b       	sbis	0x10, 1	; 16
    21da:	35 cf       	rjmp	.-406    	; 0x2046 <OutputImage+0x106>
    21dc:	80 ed       	ldi	r24, 0xD0	; 208
    21de:	97 e0       	ldi	r25, 0x07	; 7
    21e0:	f7 01       	movw	r30, r14
    21e2:	31 97       	sbiw	r30, 0x01	; 1
    21e4:	f1 f7       	brne	.-4      	; 0x21e2 <OutputImage+0x2a2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e8:	d9 f7       	brne	.-10     	; 0x21e0 <OutputImage+0x2a0>
   {
    _delay_ms(200);
    if (block>0) block--;
    21ea:	01 15       	cp	r16, r1
    21ec:	11 05       	cpc	r17, r1
    21ee:	21 f0       	breq	.+8      	; 0x21f8 <OutputImage+0x2b8>
    21f0:	01 50       	subi	r16, 0x01	; 1
    21f2:	10 40       	sbci	r17, 0x00	; 0
    21f4:	01 c0       	rjmp	.+2      	; 0x21f8 <OutputImage+0x2b8>
    21f6:	86 01       	movw	r16, r12
    break;
   }
  }
  cli();
    21f8:	f8 94       	cli
    21fa:	d7 ce       	rjmp	.-594    	; 0x1faa <OutputImage+0x6a>
 }
 TAPE_OUT_PORT&=0xff^(1<<TAPE_OUT);
    21fc:	90 98       	cbi	0x12, 0	; 18
}
    21fe:	df 91       	pop	r29
    2200:	cf 91       	pop	r28
    2202:	1f 91       	pop	r17
    2204:	0f 91       	pop	r16
    2206:	ff 90       	pop	r15
    2208:	ef 90       	pop	r14
    220a:	df 90       	pop	r13
    220c:	cf 90       	pop	r12
    220e:	bf 90       	pop	r11
    2210:	af 90       	pop	r10
    2212:	9f 90       	pop	r9
    2214:	8f 90       	pop	r8
    2216:	7f 90       	pop	r7
    2218:	6f 90       	pop	r6
    221a:	5f 90       	pop	r5
    221c:	4f 90       	pop	r4
    221e:	3f 90       	pop	r3
    2220:	2f 90       	pop	r2
    2222:	08 95       	ret

00002224 <MemoryTest>:
}
//----------------------------------------------------------------------------------------------------
//тест памяти
//----------------------------------------------------------------------------------------------------
void MemoryTest(void)
{ 
    2224:	2f 92       	push	r2
    2226:	3f 92       	push	r3
    2228:	4f 92       	push	r4
    222a:	5f 92       	push	r5
    222c:	6f 92       	push	r6
    222e:	7f 92       	push	r7
    2230:	8f 92       	push	r8
    2232:	9f 92       	push	r9
    2234:	af 92       	push	r10
    2236:	bf 92       	push	r11
    2238:	cf 92       	push	r12
    223a:	df 92       	push	r13
    223c:	ef 92       	push	r14
    223e:	ff 92       	push	r15
    2240:	0f 93       	push	r16
    2242:	1f 93       	push	r17
    2244:	cf 93       	push	r28
    2246:	df 93       	push	r29
 unsigned char last_p=0xff;
 WH1602_SetTextProgmemUpLine(Text_Main_Memory_Test);  
    2248:	86 e6       	ldi	r24, 0x66	; 102
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	0e 94 42 03 	call	0x684	; 0x684 <WH1602_SetTextProgmemUpLine>
    2250:	1f ef       	ldi	r17, 0xFF	; 255
    2252:	88 24       	eor	r8, r8
    2254:	99 24       	eor	r9, r9
    2256:	54 01       	movw	r10, r8
    2258:	77 24       	eor	r7, r7
 for(unsigned short b=0;b<=255;b++)
 {   
  unsigned char progress=(unsigned char)(100UL*(long)b/255UL);
  if (progress!=last_p)
  {
   sprintf(string,"Выполнено:%i %%",progress);
    225a:	c8 e2       	ldi	r28, 0x28	; 40
    225c:	d3 e0       	ldi	r29, 0x03	; 3
    225e:	69 e7       	ldi	r22, 0x79	; 121
    2260:	26 2e       	mov	r2, r22
    2262:	60 e0       	ldi	r22, 0x00	; 0
    2264:	36 2e       	mov	r3, r22
{ 
 unsigned char last_p=0xff;
 WH1602_SetTextProgmemUpLine(Text_Main_Memory_Test);  
 for(unsigned short b=0;b<=255;b++)
 {   
  unsigned char progress=(unsigned char)(100UL*(long)b/255UL);
    2266:	c5 01       	movw	r24, r10
    2268:	b4 01       	movw	r22, r8
    226a:	2f ef       	ldi	r18, 0xFF	; 255
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e0       	ldi	r20, 0x00	; 0
    2270:	50 e0       	ldi	r21, 0x00	; 0
    2272:	0e 94 09 18 	call	0x3012	; 0x3012 <__udivmodsi4>
    2276:	62 2e       	mov	r6, r18
  if (progress!=last_p)
    2278:	21 17       	cp	r18, r17
    227a:	e9 f0       	breq	.+58     	; 0x22b6 <MemoryTest+0x92>
  {
   sprintf(string,"Выполнено:%i %%",progress);
    227c:	00 d0       	rcall	.+0      	; 0x227e <MemoryTest+0x5a>
    227e:	00 d0       	rcall	.+0      	; 0x2280 <MemoryTest+0x5c>
    2280:	00 d0       	rcall	.+0      	; 0x2282 <MemoryTest+0x5e>
    2282:	ed b7       	in	r30, 0x3d	; 61
    2284:	fe b7       	in	r31, 0x3e	; 62
    2286:	31 96       	adiw	r30, 0x01	; 1
    2288:	ad b7       	in	r26, 0x3d	; 61
    228a:	be b7       	in	r27, 0x3e	; 62
    228c:	12 96       	adiw	r26, 0x02	; 2
    228e:	dc 93       	st	X, r29
    2290:	ce 93       	st	-X, r28
    2292:	11 97       	sbiw	r26, 0x01	; 1
    2294:	33 82       	std	Z+3, r3	; 0x03
    2296:	22 82       	std	Z+2, r2	; 0x02
    2298:	24 83       	std	Z+4, r18	; 0x04
    229a:	15 82       	std	Z+5, r1	; 0x05
    229c:	0e 94 32 18 	call	0x3064	; 0x3064 <sprintf>
   WH1602_SetTextDownLine(string); 
    22a0:	8d b7       	in	r24, 0x3d	; 61
    22a2:	9e b7       	in	r25, 0x3e	; 62
    22a4:	06 96       	adiw	r24, 0x06	; 6
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	9e bf       	out	0x3e, r25	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	8d bf       	out	0x3d, r24	; 61
    22b0:	ce 01       	movw	r24, r28
    22b2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <WH1602_SetTextDownLine>
    22b6:	ee 24       	eor	r14, r14
    22b8:	ff 24       	eor	r15, r15
    22ba:	87 01       	movw	r16, r14
  } 
  //записываем в ОЗУ значения 
  for(unsigned long addr=0;addr<131072UL;addr++)
  {   
   unsigned char byte=(b+addr)&0xff;
   DRAM_WriteByte(addr,byte);   
    22bc:	47 2d       	mov	r20, r7
    22be:	4e 0d       	add	r20, r14
    22c0:	c8 01       	movw	r24, r16
    22c2:	b7 01       	movw	r22, r14
    22c4:	0e 94 a3 01 	call	0x346	; 0x346 <DRAM_WriteByte>
   DRAM_Refresh();
    22c8:	0e 94 21 01 	call	0x242	; 0x242 <DRAM_Refresh>
   sprintf(string,"Выполнено:%i %%",progress);
   WH1602_SetTextDownLine(string); 
   last_p=progress;
  } 
  //записываем в ОЗУ значения 
  for(unsigned long addr=0;addr<131072UL;addr++)
    22cc:	08 94       	sec
    22ce:	e1 1c       	adc	r14, r1
    22d0:	f1 1c       	adc	r15, r1
    22d2:	01 1d       	adc	r16, r1
    22d4:	11 1d       	adc	r17, r1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	e9 16       	cp	r14, r25
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	f9 06       	cpc	r15, r25
    22de:	92 e0       	ldi	r25, 0x02	; 2
    22e0:	09 07       	cpc	r16, r25
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	19 07       	cpc	r17, r25
    22e6:	51 f7       	brne	.-44     	; 0x22bc <MemoryTest+0x98>
    22e8:	cc 24       	eor	r12, r12
    22ea:	dd 24       	eor	r13, r13
    22ec:	76 01       	movw	r14, r12
    22ee:	47 2c       	mov	r4, r7
    22f0:	4c 0c       	add	r4, r12
  }
  //проверяем, что записанное в ОЗУ совпадает со считанным
  for(unsigned long addr=0;addr<131072UL;addr++)
  {   
   unsigned char byte=(b+addr)&0xff;
   unsigned char byte_r=DRAM_ReadByte(addr);
    22f2:	c7 01       	movw	r24, r14
    22f4:	b6 01       	movw	r22, r12
    22f6:	0e 94 89 01 	call	0x312	; 0x312 <DRAM_ReadByte>
    22fa:	58 2e       	mov	r5, r24
   DRAM_Refresh();
    22fc:	0e 94 21 01 	call	0x242	; 0x242 <DRAM_Refresh>
   if (byte!=byte_r)
    2300:	45 14       	cp	r4, r5
    2302:	b1 f1       	breq	.+108    	; 0x2370 <MemoryTest+0x14c>
   {
    WH1602_SetTextProgmemUpLine(Text_Main_Memory_Test_Error);
    2304:	88 e7       	ldi	r24, 0x78	; 120
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	0e 94 42 03 	call	0x684	; 0x684 <WH1602_SetTextProgmemUpLine>
    sprintf(string,"%05x = [%02x , %02x]",(unsigned int)addr,byte,byte_r);
    230c:	ad b7       	in	r26, 0x3d	; 61
    230e:	be b7       	in	r27, 0x3e	; 62
    2310:	1a 97       	sbiw	r26, 0x0a	; 10
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	f8 94       	cli
    2316:	be bf       	out	0x3e, r27	; 62
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	ad bf       	out	0x3d, r26	; 61
    231c:	ed b7       	in	r30, 0x3d	; 61
    231e:	fe b7       	in	r31, 0x3e	; 62
    2320:	31 96       	adiw	r30, 0x01	; 1
    2322:	08 e2       	ldi	r16, 0x28	; 40
    2324:	13 e0       	ldi	r17, 0x03	; 3
    2326:	12 96       	adiw	r26, 0x02	; 2
    2328:	1c 93       	st	X, r17
    232a:	0e 93       	st	-X, r16
    232c:	11 97       	sbiw	r26, 0x01	; 1
    232e:	89 e8       	ldi	r24, 0x89	; 137
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	93 83       	std	Z+3, r25	; 0x03
    2334:	82 83       	std	Z+2, r24	; 0x02
    2336:	d5 82       	std	Z+5, r13	; 0x05
    2338:	c4 82       	std	Z+4, r12	; 0x04
    233a:	46 82       	std	Z+6, r4	; 0x06
    233c:	17 82       	std	Z+7, r1	; 0x07
    233e:	50 86       	std	Z+8, r5	; 0x08
    2340:	11 86       	std	Z+9, r1	; 0x09
    2342:	0e 94 32 18 	call	0x3064	; 0x3064 <sprintf>
    WH1602_SetTextDownLine(string);
    2346:	8d b7       	in	r24, 0x3d	; 61
    2348:	9e b7       	in	r25, 0x3e	; 62
    234a:	0a 96       	adiw	r24, 0x0a	; 10
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	9e bf       	out	0x3e, r25	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	8d bf       	out	0x3d, r24	; 61
    2356:	c8 01       	movw	r24, r16
    2358:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <WH1602_SetTextDownLine>
    235c:	80 e5       	ldi	r24, 0x50	; 80
    235e:	93 ec       	ldi	r25, 0xC3	; 195
    2360:	20 e9       	ldi	r18, 0x90	; 144
    2362:	31 e0       	ldi	r19, 0x01	; 1
    2364:	f9 01       	movw	r30, r18
    2366:	31 97       	sbiw	r30, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <MemoryTest+0x142>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236c:	d9 f7       	brne	.-10     	; 0x2364 <MemoryTest+0x140>
    236e:	34 c0       	rjmp	.+104    	; 0x23d8 <MemoryTest+0x1b4>
   unsigned char byte=(b+addr)&0xff;
   DRAM_WriteByte(addr,byte);   
   DRAM_Refresh();
  }
  //проверяем, что записанное в ОЗУ совпадает со считанным
  for(unsigned long addr=0;addr<131072UL;addr++)
    2370:	08 94       	sec
    2372:	c1 1c       	adc	r12, r1
    2374:	d1 1c       	adc	r13, r1
    2376:	e1 1c       	adc	r14, r1
    2378:	f1 1c       	adc	r15, r1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	c9 16       	cp	r12, r25
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	d9 06       	cpc	r13, r25
    2382:	92 e0       	ldi	r25, 0x02	; 2
    2384:	e9 06       	cpc	r14, r25
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	f9 06       	cpc	r15, r25
    238a:	09 f0       	breq	.+2      	; 0x238e <MemoryTest+0x16a>
    238c:	b0 cf       	rjmp	.-160    	; 0x22ee <MemoryTest+0xca>
    238e:	84 e6       	ldi	r24, 0x64	; 100
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	a0 e0       	ldi	r26, 0x00	; 0
    2394:	b0 e0       	ldi	r27, 0x00	; 0
    2396:	88 0e       	add	r8, r24
    2398:	99 1e       	adc	r9, r25
    239a:	aa 1e       	adc	r10, r26
    239c:	bb 1e       	adc	r11, r27
    239e:	73 94       	inc	r7
    23a0:	16 2d       	mov	r17, r6
//----------------------------------------------------------------------------------------------------
void MemoryTest(void)
{ 
 unsigned char last_p=0xff;
 WH1602_SetTextProgmemUpLine(Text_Main_Memory_Test);  
 for(unsigned short b=0;b<=255;b++)
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	89 16       	cp	r8, r25
    23a6:	94 e6       	ldi	r25, 0x64	; 100
    23a8:	99 06       	cpc	r9, r25
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	a9 06       	cpc	r10, r25
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	b9 06       	cpc	r11, r25
    23b2:	09 f0       	breq	.+2      	; 0x23b6 <MemoryTest+0x192>
    23b4:	58 cf       	rjmp	.-336    	; 0x2266 <MemoryTest+0x42>
	_delay_ms(5000);
    return;
   }
  }
 }*/
 WH1602_SetTextProgmemUpLine(Text_Main_Memory_Test_OK);
    23b6:	8a e8       	ldi	r24, 0x8A	; 138
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	0e 94 42 03 	call	0x684	; 0x684 <WH1602_SetTextProgmemUpLine>
 WH1602_SetTextDownLine("");
    23be:	8e e9       	ldi	r24, 0x9E	; 158
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <WH1602_SetTextDownLine>
    23c6:	80 e3       	ldi	r24, 0x30	; 48
    23c8:	95 e7       	ldi	r25, 0x75	; 117
    23ca:	20 e9       	ldi	r18, 0x90	; 144
    23cc:	31 e0       	ldi	r19, 0x01	; 1
    23ce:	f9 01       	movw	r30, r18
    23d0:	31 97       	sbiw	r30, 0x01	; 1
    23d2:	f1 f7       	brne	.-4      	; 0x23d0 <MemoryTest+0x1ac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d6:	d9 f7       	brne	.-10     	; 0x23ce <MemoryTest+0x1aa>
 _delay_ms(3000);
}
    23d8:	df 91       	pop	r29
    23da:	cf 91       	pop	r28
    23dc:	1f 91       	pop	r17
    23de:	0f 91       	pop	r16
    23e0:	ff 90       	pop	r15
    23e2:	ef 90       	pop	r14
    23e4:	df 90       	pop	r13
    23e6:	cf 90       	pop	r12
    23e8:	bf 90       	pop	r11
    23ea:	af 90       	pop	r10
    23ec:	9f 90       	pop	r9
    23ee:	8f 90       	pop	r8
    23f0:	7f 90       	pop	r7
    23f2:	6f 90       	pop	r6
    23f4:	5f 90       	pop	r5
    23f6:	4f 90       	pop	r4
    23f8:	3f 90       	pop	r3
    23fa:	2f 90       	pop	r2
    23fc:	08 95       	ret

000023fe <TapeMenu>:

//----------------------------------------------------------------------------------------------------
//меню магнитофона
//----------------------------------------------------------------------------------------------------
void TapeMenu(void)
{
    23fe:	2f 92       	push	r2
    2400:	3f 92       	push	r3
    2402:	4f 92       	push	r4
    2404:	5f 92       	push	r5
    2406:	6f 92       	push	r6
    2408:	7f 92       	push	r7
    240a:	8f 92       	push	r8
    240c:	9f 92       	push	r9
    240e:	af 92       	push	r10
    2410:	bf 92       	push	r11
    2412:	cf 92       	push	r12
    2414:	df 92       	push	r13
    2416:	ef 92       	push	r14
    2418:	ff 92       	push	r15
    241a:	0f 93       	push	r16
    241c:	1f 93       	push	r17
    241e:	df 93       	push	r29
    2420:	cf 93       	push	r28
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	e1 97       	sbiw	r28, 0x31	; 49
    2428:	0f b6       	in	r0, 0x3f	; 63
    242a:	f8 94       	cli
    242c:	de bf       	out	0x3e, r29	; 62
    242e:	0f be       	out	0x3f, r0	; 63
    2430:	cd bf       	out	0x3d, r28	; 61
 unsigned char n;
 //переходим к первому имени файла на карте
 if (FAT_BeginFileSearch()==false)
    2432:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <FAT_BeginFileSearch>
    2436:	88 23       	and	r24, r24
    2438:	91 f4       	brne	.+36     	; 0x245e <TapeMenu+0x60>
 {
  WH1602_SetTextProgmemUpLine(Text_Tape_Menu_No_Image); 
    243a:	8c e9       	ldi	r24, 0x9C	; 156
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	0e 94 42 03 	call	0x684	; 0x684 <WH1602_SetTextProgmemUpLine>
  WH1602_SetTextDownLine(""); 
    2442:	8e e9       	ldi	r24, 0x9E	; 158
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <WH1602_SetTextDownLine>
    244a:	80 e2       	ldi	r24, 0x20	; 32
    244c:	9e e4       	ldi	r25, 0x4E	; 78
    244e:	20 e9       	ldi	r18, 0x90	; 144
    2450:	31 e0       	ldi	r19, 0x01	; 1
    2452:	f9 01       	movw	r30, r18
    2454:	31 97       	sbiw	r30, 0x01	; 1
    2456:	f1 f7       	brne	.-4      	; 0x2454 <TapeMenu+0x56>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2458:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245a:	d9 f7       	brne	.-10     	; 0x2452 <TapeMenu+0x54>
    245c:	f5 c0       	rjmp	.+490    	; 0x2648 <TapeMenu+0x24a>
 unsigned long FirstCluster;//первый кластер файла
 unsigned long Size;//размер файла
 unsigned short index=1;//номер файла
 unsigned short level_index[20];//20 уровней вложенности
 unsigned char level=0;
 level_index[0]=index;
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	9b 87       	std	Y+11, r25	; 0x0b
    2464:	8a 87       	std	Y+10, r24	; 0x0a
    2466:	61 e0       	ldi	r22, 0x01	; 1
    2468:	e6 2e       	mov	r14, r22
    246a:	f1 2c       	mov	r15, r1
    246c:	dd 24       	eor	r13, r13
 while(1)
 { 
  //выводим данные с SD-карты
  //читаем имя файла 
  if (FAT_GetFileSearch(string,&FirstCluster,&Size,&Directory)==true) WH1602_SetTextDownLine(string);
    246e:	58 e2       	ldi	r21, 0x28	; 40
    2470:	85 2e       	mov	r8, r21
    2472:	53 e0       	ldi	r21, 0x03	; 3
    2474:	95 2e       	mov	r9, r21
    2476:	5e 01       	movw	r10, r28
    2478:	08 94       	sec
    247a:	a1 1c       	adc	r10, r1
    247c:	b1 1c       	adc	r11, r1
  if (Directory==false) sprintf(string,"[%02u:%05u] Файл",level,index);
    247e:	4f e9       	ldi	r20, 0x9F	; 159
    2480:	24 2e       	mov	r2, r20
    2482:	40 e0       	ldi	r20, 0x00	; 0
    2484:	34 2e       	mov	r3, r20
    2486:	30 e9       	ldi	r19, 0x90	; 144
    2488:	43 2e       	mov	r4, r19
    248a:	31 e0       	ldi	r19, 0x01	; 1
    248c:	53 2e       	mov	r5, r19
     FAT_EnterDirectory(FirstCluster);//заходим в директорию	
	 //проматываем до выбранного файла
	 index=1;
	 if (level<20)
	 {
	  for(unsigned short s=1;s<level_index[level];s++)
    248e:	21 e0       	ldi	r18, 0x01	; 1
    2490:	62 2e       	mov	r6, r18
    2492:	71 2c       	mov	r7, r1
    2494:	01 c0       	rjmp	.+2      	; 0x2498 <TapeMenu+0x9a>
 unsigned long FirstCluster;//первый кластер файла
 unsigned long Size;//размер файла
 unsigned short index=1;//номер файла
 unsigned short level_index[20];//20 уровней вложенности
 unsigned char level=0;
 level_index[0]=index;
    2496:	78 01       	movw	r14, r16
 while(1)
 { 
  //выводим данные с SD-карты
  //читаем имя файла 
  if (FAT_GetFileSearch(string,&FirstCluster,&Size,&Directory)==true) WH1602_SetTextDownLine(string);
    2498:	88 e2       	ldi	r24, 0x28	; 40
    249a:	93 e0       	ldi	r25, 0x03	; 3
    249c:	be 01       	movw	r22, r28
    249e:	6e 5f       	subi	r22, 0xFE	; 254
    24a0:	7f 4f       	sbci	r23, 0xFF	; 255
    24a2:	ae 01       	movw	r20, r28
    24a4:	4a 5f       	subi	r20, 0xFA	; 250
    24a6:	5f 4f       	sbci	r21, 0xFF	; 255
    24a8:	95 01       	movw	r18, r10
    24aa:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <FAT_GetFileSearch>
    24ae:	81 30       	cpi	r24, 0x01	; 1
    24b0:	21 f4       	brne	.+8      	; 0x24ba <TapeMenu+0xbc>
    24b2:	88 e2       	ldi	r24, 0x28	; 40
    24b4:	93 e0       	ldi	r25, 0x03	; 3
    24b6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <WH1602_SetTextDownLine>
  if (Directory==false) sprintf(string,"[%02u:%05u] Файл",level,index);
    24ba:	89 81       	ldd	r24, Y+1	; 0x01
    24bc:	88 23       	and	r24, r24
    24be:	11 f5       	brne	.+68     	; 0x2504 <TapeMenu+0x106>
    24c0:	8d b7       	in	r24, 0x3d	; 61
    24c2:	9e b7       	in	r25, 0x3e	; 62
    24c4:	08 97       	sbiw	r24, 0x08	; 8
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	9e bf       	out	0x3e, r25	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	8d bf       	out	0x3d, r24	; 61
    24d0:	ed b7       	in	r30, 0x3d	; 61
    24d2:	fe b7       	in	r31, 0x3e	; 62
    24d4:	31 96       	adiw	r30, 0x01	; 1
    24d6:	ad b7       	in	r26, 0x3d	; 61
    24d8:	be b7       	in	r27, 0x3e	; 62
    24da:	12 96       	adiw	r26, 0x02	; 2
    24dc:	9c 92       	st	X, r9
    24de:	8e 92       	st	-X, r8
    24e0:	11 97       	sbiw	r26, 0x01	; 1
    24e2:	33 82       	std	Z+3, r3	; 0x03
    24e4:	22 82       	std	Z+2, r2	; 0x02
    24e6:	d4 82       	std	Z+4, r13	; 0x04
    24e8:	15 82       	std	Z+5, r1	; 0x05
    24ea:	f7 82       	std	Z+7, r15	; 0x07
    24ec:	e6 82       	std	Z+6, r14	; 0x06
    24ee:	0e 94 32 18 	call	0x3064	; 0x3064 <sprintf>
    24f2:	8d b7       	in	r24, 0x3d	; 61
    24f4:	9e b7       	in	r25, 0x3e	; 62
    24f6:	08 96       	adiw	r24, 0x08	; 8
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	9e bf       	out	0x3e, r25	; 62
    24fe:	0f be       	out	0x3f, r0	; 63
    2500:	8d bf       	out	0x3d, r24	; 61
    2502:	21 c0       	rjmp	.+66     	; 0x2546 <TapeMenu+0x148>
                   else sprintf(string,"[%02u:%05u] Папка",level,index);
    2504:	ad b7       	in	r26, 0x3d	; 61
    2506:	be b7       	in	r27, 0x3e	; 62
    2508:	18 97       	sbiw	r26, 0x08	; 8
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	f8 94       	cli
    250e:	be bf       	out	0x3e, r27	; 62
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	ad bf       	out	0x3d, r26	; 61
    2514:	ed b7       	in	r30, 0x3d	; 61
    2516:	fe b7       	in	r31, 0x3e	; 62
    2518:	31 96       	adiw	r30, 0x01	; 1
    251a:	12 96       	adiw	r26, 0x02	; 2
    251c:	9c 92       	st	X, r9
    251e:	8e 92       	st	-X, r8
    2520:	11 97       	sbiw	r26, 0x01	; 1
    2522:	80 eb       	ldi	r24, 0xB0	; 176
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	93 83       	std	Z+3, r25	; 0x03
    2528:	82 83       	std	Z+2, r24	; 0x02
    252a:	d4 82       	std	Z+4, r13	; 0x04
    252c:	15 82       	std	Z+5, r1	; 0x05
    252e:	f7 82       	std	Z+7, r15	; 0x07
    2530:	e6 82       	std	Z+6, r14	; 0x06
    2532:	0e 94 32 18 	call	0x3064	; 0x3064 <sprintf>
    2536:	ad b7       	in	r26, 0x3d	; 61
    2538:	be b7       	in	r27, 0x3e	; 62
    253a:	18 96       	adiw	r26, 0x08	; 8
    253c:	0f b6       	in	r0, 0x3f	; 63
    253e:	f8 94       	cli
    2540:	be bf       	out	0x3e, r27	; 62
    2542:	0f be       	out	0x3f, r0	; 63
    2544:	ad bf       	out	0x3d, r26	; 61
  WH1602_SetTextUpLine(string);  
    2546:	88 e2       	ldi	r24, 0x28	; 40
    2548:	93 e0       	ldi	r25, 0x03	; 3
    254a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <WH1602_SetTextUpLine>
    254e:	80 ed       	ldi	r24, 0xD0	; 208
    2550:	97 e0       	ldi	r25, 0x07	; 7
    2552:	f2 01       	movw	r30, r4
    2554:	31 97       	sbiw	r30, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <TapeMenu+0x156>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2558:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    255a:	d9 f7       	brne	.-10     	; 0x2552 <TapeMenu+0x154>
  _delay_ms(200);
  //ждём нажатий кнопок
  while(1)
  {
   if (BUTTON_UP_PIN&(1<<BUTTON_UP))
    255c:	83 9b       	sbis	0x10, 3	; 16
    255e:	14 c0       	rjmp	.+40     	; 0x2588 <TapeMenu+0x18a>
   {
    unsigned char i=1;
	if (BUTTON_CENTER_PIN&(1<<BUTTON_CENTER)) i=10;
    2560:	82 9b       	sbis	0x10, 2	; 16
    2562:	03 c0       	rjmp	.+6      	; 0x256a <TapeMenu+0x16c>
    2564:	9a e0       	ldi	r25, 0x0A	; 10
    2566:	c9 2e       	mov	r12, r25
    2568:	02 c0       	rjmp	.+4      	; 0x256e <TapeMenu+0x170>
    256a:	cc 24       	eor	r12, r12
    256c:	c3 94       	inc	r12
    256e:	87 01       	movw	r16, r14
	for(n=0;n<i;n++)
	{
	 if (FAT_PrevFileSearch()==true) index--;
    2570:	0e 94 5f 07 	call	0xebe	; 0xebe <FAT_PrevFileSearch>
    2574:	81 30       	cpi	r24, 0x01	; 1
    2576:	09 f0       	breq	.+2      	; 0x257a <TapeMenu+0x17c>
    2578:	8e cf       	rjmp	.-228    	; 0x2496 <TapeMenu+0x98>
    257a:	01 50       	subi	r16, 0x01	; 1
    257c:	10 40       	sbci	r17, 0x00	; 0
  {
   if (BUTTON_UP_PIN&(1<<BUTTON_UP))
   {
    unsigned char i=1;
	if (BUTTON_CENTER_PIN&(1<<BUTTON_CENTER)) i=10;
	for(n=0;n<i;n++)
    257e:	8e 2d       	mov	r24, r14
    2580:	80 1b       	sub	r24, r16
    2582:	8c 15       	cp	r24, r12
    2584:	a8 f3       	brcs	.-22     	; 0x2570 <TapeMenu+0x172>
    2586:	87 cf       	rjmp	.-242    	; 0x2496 <TapeMenu+0x98>
	 if (FAT_PrevFileSearch()==true) index--;
	                             else break;
	}
    break;
   }
   if (BUTTON_DOWN_PIN&(1<<BUTTON_DOWN))
    2588:	81 9b       	sbis	0x10, 1	; 16
    258a:	14 c0       	rjmp	.+40     	; 0x25b4 <TapeMenu+0x1b6>
   {
    unsigned char i=1;
	if (BUTTON_CENTER_PIN&(1<<BUTTON_CENTER)) i=10;
    258c:	82 9b       	sbis	0x10, 2	; 16
    258e:	03 c0       	rjmp	.+6      	; 0x2596 <TapeMenu+0x198>
    2590:	8a e0       	ldi	r24, 0x0A	; 10
    2592:	c8 2e       	mov	r12, r24
    2594:	02 c0       	rjmp	.+4      	; 0x259a <TapeMenu+0x19c>
    2596:	cc 24       	eor	r12, r12
    2598:	c3 94       	inc	r12
    259a:	87 01       	movw	r16, r14
	for(n=0;n<i;n++)
	{
     if (FAT_NextFileSearch()==true) index++;
    259c:	0e 94 ef 08 	call	0x11de	; 0x11de <FAT_NextFileSearch>
    25a0:	81 30       	cpi	r24, 0x01	; 1
    25a2:	09 f0       	breq	.+2      	; 0x25a6 <TapeMenu+0x1a8>
    25a4:	78 cf       	rjmp	.-272    	; 0x2496 <TapeMenu+0x98>
    25a6:	0f 5f       	subi	r16, 0xFF	; 255
    25a8:	1f 4f       	sbci	r17, 0xFF	; 255
   }
   if (BUTTON_DOWN_PIN&(1<<BUTTON_DOWN))
   {
    unsigned char i=1;
	if (BUTTON_CENTER_PIN&(1<<BUTTON_CENTER)) i=10;
	for(n=0;n<i;n++)
    25aa:	80 2f       	mov	r24, r16
    25ac:	8e 19       	sub	r24, r14
    25ae:	8c 15       	cp	r24, r12
    25b0:	a8 f3       	brcs	.-22     	; 0x259c <TapeMenu+0x19e>
    25b2:	71 cf       	rjmp	.-286    	; 0x2496 <TapeMenu+0x98>
     if (FAT_NextFileSearch()==true) index++;
	                             else break;
	}
    break;
   }   
   if (BUTTON_SELECT_PIN&(1<<BUTTON_SELECT))
    25b4:	84 9b       	sbis	0x10, 4	; 16
    25b6:	d2 cf       	rjmp	.-92     	; 0x255c <TapeMenu+0x15e>
   {
    if (Directory==0) OutputImage();//для файла - запускаем на выполнение
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	88 23       	and	r24, r24
    25bc:	19 f4       	brne	.+6      	; 0x25c4 <TapeMenu+0x1c6>
    25be:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <OutputImage>
    25c2:	6a cf       	rjmp	.-300    	; 0x2498 <TapeMenu+0x9a>
    else
	{
	 if (level<20) level_index[level]=index;//запоминаем достигнутый уровень
    25c4:	b3 e1       	ldi	r27, 0x13	; 19
    25c6:	bd 15       	cp	r27, r13
    25c8:	40 f0       	brcs	.+16     	; 0x25da <TapeMenu+0x1dc>
    25ca:	ed 2d       	mov	r30, r13
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	ee 0f       	add	r30, r30
    25d0:	ff 1f       	adc	r31, r31
    25d2:	ea 0d       	add	r30, r10
    25d4:	fb 1d       	adc	r31, r11
    25d6:	f2 86       	std	Z+10, r15	; 0x0a
    25d8:	e1 86       	std	Z+9, r14	; 0x09
     if (Directory<0)//если мы вышли на уровень вверх
    25da:	87 ff       	sbrs	r24, 7
    25dc:	04 c0       	rjmp	.+8      	; 0x25e6 <TapeMenu+0x1e8>
	 {
	  if (level>0) level--;
    25de:	dd 20       	and	r13, r13
    25e0:	71 f0       	breq	.+28     	; 0x25fe <TapeMenu+0x200>
    25e2:	da 94       	dec	r13
    25e4:	0c c0       	rjmp	.+24     	; 0x25fe <TapeMenu+0x200>
	 }
	 else
	 {
	  level++;
    25e6:	d3 94       	inc	r13
      if (level<20) level_index[level]=1;
    25e8:	83 e1       	ldi	r24, 0x13	; 19
    25ea:	8d 15       	cp	r24, r13
    25ec:	40 f0       	brcs	.+16     	; 0x25fe <TapeMenu+0x200>
    25ee:	ed 2d       	mov	r30, r13
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	ee 0f       	add	r30, r30
    25f4:	ff 1f       	adc	r31, r31
    25f6:	ea 0d       	add	r30, r10
    25f8:	fb 1d       	adc	r31, r11
    25fa:	72 86       	std	Z+10, r7	; 0x0a
    25fc:	61 86       	std	Z+9, r6	; 0x09
	 }
     FAT_EnterDirectory(FirstCluster);//заходим в директорию	
    25fe:	6a 81       	ldd	r22, Y+2	; 0x02
    2600:	7b 81       	ldd	r23, Y+3	; 0x03
    2602:	8c 81       	ldd	r24, Y+4	; 0x04
    2604:	9d 81       	ldd	r25, Y+5	; 0x05
    2606:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <FAT_EnterDirectory>
	 //проматываем до выбранного файла
	 index=1;
	 if (level<20)
    260a:	93 e1       	ldi	r25, 0x13	; 19
    260c:	9d 15       	cp	r25, r13
    260e:	20 f4       	brcc	.+8      	; 0x2618 <TapeMenu+0x21a>
    2610:	b1 e0       	ldi	r27, 0x01	; 1
    2612:	eb 2e       	mov	r14, r27
    2614:	f1 2c       	mov	r15, r1
    2616:	40 cf       	rjmp	.-384    	; 0x2498 <TapeMenu+0x9a>
	 {
	  for(unsigned short s=1;s<level_index[level];s++)
    2618:	ed 2d       	mov	r30, r13
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	ee 0f       	add	r30, r30
    261e:	ff 1f       	adc	r31, r31
    2620:	ea 0d       	add	r30, r10
    2622:	fb 1d       	adc	r31, r11
    2624:	01 85       	ldd	r16, Z+9	; 0x09
    2626:	12 85       	ldd	r17, Z+10	; 0x0a
    2628:	71 e0       	ldi	r23, 0x01	; 1
    262a:	e7 2e       	mov	r14, r23
    262c:	f1 2c       	mov	r15, r1
    262e:	08 c0       	rjmp	.+16     	; 0x2640 <TapeMenu+0x242>
	  {
       if (FAT_NextFileSearch()==true) index++;
    2630:	0e 94 ef 08 	call	0x11de	; 0x11de <FAT_NextFileSearch>
    2634:	81 30       	cpi	r24, 0x01	; 1
    2636:	09 f0       	breq	.+2      	; 0x263a <TapeMenu+0x23c>
    2638:	2f cf       	rjmp	.-418    	; 0x2498 <TapeMenu+0x9a>
    263a:	08 94       	sec
    263c:	e1 1c       	adc	r14, r1
    263e:	f1 1c       	adc	r15, r1
     FAT_EnterDirectory(FirstCluster);//заходим в директорию	
	 //проматываем до выбранного файла
	 index=1;
	 if (level<20)
	 {
	  for(unsigned short s=1;s<level_index[level];s++)
    2640:	e0 16       	cp	r14, r16
    2642:	f1 06       	cpc	r15, r17
    2644:	a8 f3       	brcs	.-22     	; 0x2630 <TapeMenu+0x232>
    2646:	28 cf       	rjmp	.-432    	; 0x2498 <TapeMenu+0x9a>
	}
    break;
   }
  }
 } 
}
    2648:	e1 96       	adiw	r28, 0x31	; 49
    264a:	0f b6       	in	r0, 0x3f	; 63
    264c:	f8 94       	cli
    264e:	de bf       	out	0x3e, r29	; 62
    2650:	0f be       	out	0x3f, r0	; 63
    2652:	cd bf       	out	0x3d, r28	; 61
    2654:	cf 91       	pop	r28
    2656:	df 91       	pop	r29
    2658:	1f 91       	pop	r17
    265a:	0f 91       	pop	r16
    265c:	ff 90       	pop	r15
    265e:	ef 90       	pop	r14
    2660:	df 90       	pop	r13
    2662:	cf 90       	pop	r12
    2664:	bf 90       	pop	r11
    2666:	af 90       	pop	r10
    2668:	9f 90       	pop	r9
    266a:	8f 90       	pop	r8
    266c:	7f 90       	pop	r7
    266e:	6f 90       	pop	r6
    2670:	5f 90       	pop	r5
    2672:	4f 90       	pop	r4
    2674:	3f 90       	pop	r3
    2676:	2f 90       	pop	r2
    2678:	08 95       	ret

0000267a <SD_Init>:
bool SD_ReadBlock(unsigned long BlockAddr,unsigned char *Addr);//считать блок в 512 байт в память
//----------------------------------------------------------------------------------------------------
//инициализация карты памяти
//----------------------------------------------------------------------------------------------------
void SD_Init(void)
{
    267a:	ff 92       	push	r15
    267c:	0f 93       	push	r16
    267e:	1f 93       	push	r17
    2680:	cf 93       	push	r28
    2682:	df 93       	push	r29
 WH1602_SetTextUpLine("");
    2684:	8e e9       	ldi	r24, 0x9E	; 158
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	0e 94 60 02 	call	0x4c0	; 0x4c0 <WH1602_SetTextUpLine>
 WH1602_SetTextDownLine("");
    268c:	8e e9       	ldi	r24, 0x9E	; 158
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <WH1602_SetTextDownLine>
 SD_CS_DDR|=(1<<SD_CS);
    2694:	bc 9a       	sbi	0x17, 4	; 23
 SD_DI_DDR|=(1<<SD_DI);
    2696:	bd 9a       	sbi	0x17, 5	; 23
 SD_SCK_DDR|=(1<<SD_SCK);
    2698:	bf 9a       	sbi	0x17, 7	; 23
 SD_DO_DDR&=0xff^(1<<SD_DO);
    269a:	be 98       	cbi	0x17, 6	; 23
    269c:	80 e1       	ldi	r24, 0x10	; 16
    269e:	97 e2       	ldi	r25, 0x27	; 39
    26a0:	20 e9       	ldi	r18, 0x90	; 144
    26a2:	31 e0       	ldi	r19, 0x01	; 1
    26a4:	f9 01       	movw	r30, r18
    26a6:	31 97       	sbiw	r30, 0x01	; 1
    26a8:	f1 f7       	brne	.-4      	; 0x26a6 <SD_Init+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ac:	d9 f7       	brne	.-10     	; 0x26a4 <SD_Init+0x2a>
 //вывод SPI SS в режиме MASTER сконфигурирован как выход и на SPI не влияет
 _delay_ms(1000);//пауза, пока карта не включится
 unsigned char n;
 //шлём не менее 74 импульсов синхронизации при высоком уровне на CS и DI 
 SD_CS_PORT|=(1<<SD_CS);
    26ae:	c4 9a       	sbi	0x18, 4	; 24
    26b0:	88 e8       	ldi	r24, 0x88	; 136
    26b2:	93 e1       	ldi	r25, 0x13	; 19
    26b4:	20 e9       	ldi	r18, 0x90	; 144
    26b6:	31 e0       	ldi	r19, 0x01	; 1
    26b8:	f9 01       	movw	r30, r18
    26ba:	31 97       	sbiw	r30, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <SD_Init+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26be:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26c0:	d9 f7       	brne	.-10     	; 0x26b8 <SD_Init+0x3e>
 _delay_ms(500);
 SD_DI_PORT|=(1<<SD_DI);
    26c2:	c5 9a       	sbi	0x18, 5	; 24
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	40 ea       	ldi	r20, 0xA0	; 160
    26c8:	5f e0       	ldi	r21, 0x0F	; 15
 for(n=0;n<250;n++)
 {
  SD_SCK_PORT|=(1<<SD_SCK);
    26ca:	c7 9a       	sbi	0x18, 7	; 24
    26cc:	ca 01       	movw	r24, r20
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f1 f7       	brne	.-4      	; 0x26ce <SD_Init+0x54>
  _delay_ms(1);
  SD_SCK_PORT&=0xff^(1<<SD_SCK);
    26d2:	c7 98       	cbi	0x18, 7	; 24
    26d4:	ca 01       	movw	r24, r20
    26d6:	01 97       	sbiw	r24, 0x01	; 1
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <SD_Init+0x5c>
 unsigned char n;
 //шлём не менее 74 импульсов синхронизации при высоком уровне на CS и DI 
 SD_CS_PORT|=(1<<SD_CS);
 _delay_ms(500);
 SD_DI_PORT|=(1<<SD_DI);
 for(n=0;n<250;n++)
    26da:	2f 5f       	subi	r18, 0xFF	; 255
    26dc:	2a 3f       	cpi	r18, 0xFA	; 250
    26de:	a9 f7       	brne	.-22     	; 0x26ca <SD_Init+0x50>
  SD_SCK_PORT|=(1<<SD_SCK);
  _delay_ms(1);
  SD_SCK_PORT&=0xff^(1<<SD_SCK);
  _delay_ms(1);
 }
 SD_CS_PORT&=0xff^(1<<SD_CS);
    26e0:	c4 98       	cbi	0x18, 4	; 24
 //настраиваем SPI
 SPCR=(0<<SPIE)|(1<<SPE)|(0<<DORD)|(1<<MSTR)|(0<<CPOL)|(0<<CPHA)|(1<<SPR1)|(1<<SPR0);
    26e2:	83 e5       	ldi	r24, 0x53	; 83
    26e4:	8d b9       	out	0x0d, r24	; 13
 SPSR=(0<<SPI2X);//удвоенная скорость SPI
    26e6:	1e b8       	out	0x0e, r1	; 14
    26e8:	88 ee       	ldi	r24, 0xE8	; 232
    26ea:	93 e0       	ldi	r25, 0x03	; 3
    26ec:	20 e9       	ldi	r18, 0x90	; 144
    26ee:	31 e0       	ldi	r19, 0x01	; 1
    26f0:	f9 01       	movw	r30, r18
    26f2:	31 97       	sbiw	r30, 0x01	; 1
    26f4:	f1 f7       	brne	.-4      	; 0x26f2 <SD_Init+0x78>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f8:	d9 f7       	brne	.-10     	; 0x26f0 <SD_Init+0x76>
 _delay_ms(100);
 unsigned char answer=SD_SendCommandR1(0x40,0x00,0x00,0x00,0x00);//CMD0 
    26fa:	80 e4       	ldi	r24, 0x40	; 64
    26fc:	60 e0       	ldi	r22, 0x00	; 0
    26fe:	40 e0       	ldi	r20, 0x00	; 0
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	00 e0       	ldi	r16, 0x00	; 0
    2704:	0e 94 1d 04 	call	0x83a	; 0x83a <SD_SendCommandR1>
 if (answer!=1)//ошибка
    2708:	81 30       	cpi	r24, 0x01	; 1
    270a:	91 f0       	breq	.+36     	; 0x2730 <SD_Init+0xb6>
 {
  WH1602_SetTextProgmemUpLine(Text_SD_No_SPI_Up);
    270c:	82 e3       	ldi	r24, 0x32	; 50
    270e:	91 e0       	ldi	r25, 0x01	; 1
    2710:	0e 94 42 03 	call	0x684	; 0x684 <WH1602_SetTextProgmemUpLine>
  WH1602_SetTextProgmemDownLine(Text_SD_No_SPI_Down);
    2714:	84 e4       	ldi	r24, 0x44	; 68
    2716:	91 e0       	ldi	r25, 0x01	; 1
    2718:	0e 94 ad 03 	call	0x75a	; 0x75a <WH1602_SetTextProgmemDownLine>
    271c:	80 e3       	ldi	r24, 0x30	; 48
    271e:	95 e7       	ldi	r25, 0x75	; 117
    2720:	20 e9       	ldi	r18, 0x90	; 144
    2722:	31 e0       	ldi	r19, 0x01	; 1
    2724:	f9 01       	movw	r30, r18
    2726:	31 97       	sbiw	r30, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <SD_Init+0xac>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    272a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272c:	d9 f7       	brne	.-10     	; 0x2724 <SD_Init+0xaa>
    272e:	80 c0       	rjmp	.+256    	; 0x2830 <SD_Init+0x1b6>
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
    2730:	8f ef       	ldi	r24, 0xFF	; 255
    2732:	8f b9       	out	0x0f, r24	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
    2734:	77 9b       	sbis	0x0e, 7	; 14
    2736:	fe cf       	rjmp	.-4      	; 0x2734 <SD_Init+0xba>
 unsigned char res=SPDR;
    2738:	8f b1       	in	r24, 0x0f	; 15
    273a:	c0 e0       	ldi	r28, 0x00	; 0
    273c:	d0 e0       	ldi	r29, 0x00	; 0
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
    273e:	ff 24       	eor	r15, r15
    2740:	fa 94       	dec	r15
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2742:	15 e3       	ldi	r17, 0x35	; 53
 }
 SD_TransmitData(0xff);
 unsigned short m;
 for(m=0;m<65535;m++)
 {
  answer=SD_SendCommandR1(0x41,0x00,0x00,0x00,0x00);//CMD1
    2744:	81 e4       	ldi	r24, 0x41	; 65
    2746:	60 e0       	ldi	r22, 0x00	; 0
    2748:	40 e0       	ldi	r20, 0x00	; 0
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	00 e0       	ldi	r16, 0x00	; 0
    274e:	0e 94 1d 04 	call	0x83a	; 0x83a <SD_SendCommandR1>
//----------------------------------------------------------------------------------------------------
//послать данные SD-карте и принять ответ
//----------------------------------------------------------------------------------------------------
inline unsigned char SD_TransmitData(unsigned char data)
{ 
 SPDR=data;//передаём
    2752:	ff b8       	out	0x0f, r15	; 15
 while(!(SPSR&(1<<SPIF)));//ждём завершения передачи и получения ответа
    2754:	77 9b       	sbis	0x0e, 7	; 14
    2756:	fe cf       	rjmp	.-4      	; 0x2754 <SD_Init+0xda>
 unsigned char res=SPDR;
    2758:	9f b1       	in	r25, 0x0f	; 15
 unsigned short m;
 for(m=0;m<65535;m++)
 {
  answer=SD_SendCommandR1(0x41,0x00,0x00,0x00,0x00);//CMD1
  SD_TransmitData(0xff);
  if (answer==0) break;//инициализация успешна
    275a:	88 23       	and	r24, r24
    275c:	b1 f0       	breq	.+44     	; 0x278a <SD_Init+0x110>
    275e:	81 2f       	mov	r24, r17
    2760:	8a 95       	dec	r24
    2762:	f1 f7       	brne	.-4      	; 0x2760 <SD_Init+0xe6>
  _delay_ms(3000);
  return;
 }
 SD_TransmitData(0xff);
 unsigned short m;
 for(m=0;m<65535;m++)
    2764:	21 96       	adiw	r28, 0x01	; 1
    2766:	8f ef       	ldi	r24, 0xFF	; 255
    2768:	cf 3f       	cpi	r28, 0xFF	; 255
    276a:	d8 07       	cpc	r29, r24
    276c:	59 f7       	brne	.-42     	; 0x2744 <SD_Init+0xca>
  if (answer==0) break;//инициализация успешна
  _delay_us(10);
 }
 if (m==65535)
 {
  WH1602_SetTextProgmemUpLine(Text_SD_No_Response);
    276e:	86 e5       	ldi	r24, 0x56	; 86
    2770:	91 e0       	ldi	r25, 0x01	; 1
    2772:	0e 94 42 03 	call	0x684	; 0x684 <WH1602_SetTextProgmemUpLine>
    2776:	80 e3       	ldi	r24, 0x30	; 48
    2778:	95 e7       	ldi	r25, 0x75	; 117
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    277a:	20 e9       	ldi	r18, 0x90	; 144
    277c:	31 e0       	ldi	r19, 0x01	; 1
    277e:	f9 01       	movw	r30, r18
    2780:	31 97       	sbiw	r30, 0x01	; 1
    2782:	f1 f7       	brne	.-4      	; 0x2780 <SD_Init+0x106>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2784:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2786:	d9 f7       	brne	.-10     	; 0x277e <SD_Init+0x104>
    2788:	53 c0       	rjmp	.+166    	; 0x2830 <SD_Init+0x1b6>
  _delay_ms(3000); 
  return; 
 } 
 //узнаем объём карты памяти
 unsigned long SD_Size=SD_GetSize();
    278a:	0e 94 8d 04 	call	0x91a	; 0x91a <SD_GetSize>
    278e:	9b 01       	movw	r18, r22
    2790:	ac 01       	movw	r20, r24
 if (SD_Size==0xffffUL)//ошибка
    2792:	2f 3f       	cpi	r18, 0xFF	; 255
    2794:	9f ef       	ldi	r25, 0xFF	; 255
    2796:	39 07       	cpc	r19, r25
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	49 07       	cpc	r20, r25
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	59 07       	cpc	r21, r25
    27a0:	91 f4       	brne	.+36     	; 0x27c6 <SD_Init+0x14c>
 {
  WH1602_SetTextProgmemUpLine(Text_SD_Size_Error_Up);
    27a2:	88 e6       	ldi	r24, 0x68	; 104
    27a4:	91 e0       	ldi	r25, 0x01	; 1
    27a6:	0e 94 42 03 	call	0x684	; 0x684 <WH1602_SetTextProgmemUpLine>
  WH1602_SetTextProgmemDownLine(Text_SD_Size_Error_Down);
    27aa:	8a e7       	ldi	r24, 0x7A	; 122
    27ac:	91 e0       	ldi	r25, 0x01	; 1
    27ae:	0e 94 ad 03 	call	0x75a	; 0x75a <WH1602_SetTextProgmemDownLine>
    27b2:	80 e3       	ldi	r24, 0x30	; 48
    27b4:	95 e7       	ldi	r25, 0x75	; 117
    27b6:	20 e9       	ldi	r18, 0x90	; 144
    27b8:	31 e0       	ldi	r19, 0x01	; 1
    27ba:	f9 01       	movw	r30, r18
    27bc:	31 97       	sbiw	r30, 0x01	; 1
    27be:	f1 f7       	brne	.-4      	; 0x27bc <SD_Init+0x142>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c2:	d9 f7       	brne	.-10     	; 0x27ba <SD_Init+0x140>
    27c4:	35 c0       	rjmp	.+106    	; 0x2830 <SD_Init+0x1b6>
  _delay_ms(3000);
  return;
 }
 unsigned short size=(unsigned short)(SD_Size>>20);
 sprintf(string,"%i МБ",size);
    27c6:	00 d0       	rcall	.+0      	; 0x27c8 <SD_Init+0x14e>
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <SD_Init+0x150>
    27ca:	00 d0       	rcall	.+0      	; 0x27cc <SD_Init+0x152>
    27cc:	ed b7       	in	r30, 0x3d	; 61
    27ce:	fe b7       	in	r31, 0x3e	; 62
    27d0:	31 96       	adiw	r30, 0x01	; 1
    27d2:	08 e2       	ldi	r16, 0x28	; 40
    27d4:	13 e0       	ldi	r17, 0x03	; 3
    27d6:	ad b7       	in	r26, 0x3d	; 61
    27d8:	be b7       	in	r27, 0x3e	; 62
    27da:	12 96       	adiw	r26, 0x02	; 2
    27dc:	1c 93       	st	X, r17
    27de:	0e 93       	st	-X, r16
    27e0:	11 97       	sbiw	r26, 0x01	; 1
    27e2:	82 ec       	ldi	r24, 0xC2	; 194
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	93 83       	std	Z+3, r25	; 0x03
    27e8:	82 83       	std	Z+2, r24	; 0x02
    27ea:	74 e1       	ldi	r23, 0x14	; 20
    27ec:	56 95       	lsr	r21
    27ee:	47 95       	ror	r20
    27f0:	37 95       	ror	r19
    27f2:	27 95       	ror	r18
    27f4:	7a 95       	dec	r23
    27f6:	d1 f7       	brne	.-12     	; 0x27ec <SD_Init+0x172>
    27f8:	35 83       	std	Z+5, r19	; 0x05
    27fa:	24 83       	std	Z+4, r18	; 0x04
    27fc:	0e 94 32 18 	call	0x3064	; 0x3064 <sprintf>
 WH1602_SetTextProgmemUpLine(Text_SD_Size);
    2800:	8d b7       	in	r24, 0x3d	; 61
    2802:	9e b7       	in	r25, 0x3e	; 62
    2804:	06 96       	adiw	r24, 0x06	; 6
    2806:	0f b6       	in	r0, 0x3f	; 63
    2808:	f8 94       	cli
    280a:	9e bf       	out	0x3e, r25	; 62
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	8d bf       	out	0x3d, r24	; 61
    2810:	8c e8       	ldi	r24, 0x8C	; 140
    2812:	91 e0       	ldi	r25, 0x01	; 1
    2814:	0e 94 42 03 	call	0x684	; 0x684 <WH1602_SetTextProgmemUpLine>
 WH1602_SetTextDownLine(string);
    2818:	c8 01       	movw	r24, r16
    281a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <WH1602_SetTextDownLine>
    281e:	80 e1       	ldi	r24, 0x10	; 16
    2820:	97 e2       	ldi	r25, 0x27	; 39
    2822:	20 e9       	ldi	r18, 0x90	; 144
    2824:	31 e0       	ldi	r19, 0x01	; 1
    2826:	f9 01       	movw	r30, r18
    2828:	31 97       	sbiw	r30, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <SD_Init+0x1ae>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282e:	d9 f7       	brne	.-10     	; 0x2826 <SD_Init+0x1ac>
 _delay_ms(1000);
}
    2830:	df 91       	pop	r29
    2832:	cf 91       	pop	r28
    2834:	1f 91       	pop	r17
    2836:	0f 91       	pop	r16
    2838:	ff 90       	pop	r15
    283a:	08 95       	ret

0000283c <FAT_Init>:
bool FAT_WriteBlock(unsigned short *BlockSize,unsigned short Block);//записать в ОЗУ блок файла
//----------------------------------------------------------------------------------------------------
//Инициализация FAT
//----------------------------------------------------------------------------------------------------
void FAT_Init(void)
{
    283c:	6f 92       	push	r6
    283e:	7f 92       	push	r7
    2840:	8f 92       	push	r8
    2842:	9f 92       	push	r9
    2844:	af 92       	push	r10
    2846:	bf 92       	push	r11
    2848:	cf 92       	push	r12
    284a:	df 92       	push	r13
    284c:	ef 92       	push	r14
    284e:	ff 92       	push	r15
    2850:	0f 93       	push	r16
    2852:	1f 93       	push	r17
 WH1602_SetTextUpLine("");
    2854:	8e e9       	ldi	r24, 0x9E	; 158
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	0e 94 60 02 	call	0x4c0	; 0x4c0 <WH1602_SetTextUpLine>
 WH1602_SetTextDownLine("");
    285c:	8e e9       	ldi	r24, 0x9E	; 158
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <WH1602_SetTextDownLine>

 LastReadSector=0xffffffffUL;
    2864:	8f ef       	ldi	r24, 0xFF	; 255
    2866:	9f ef       	ldi	r25, 0xFF	; 255
    2868:	af ef       	ldi	r26, 0xFF	; 255
    286a:	bf ef       	ldi	r27, 0xFF	; 255
    286c:	80 93 12 01 	sts	0x0112, r24
    2870:	90 93 13 01 	sts	0x0113, r25
    2874:	a0 93 14 01 	sts	0x0114, r26
    2878:	b0 93 15 01 	sts	0x0115, r27
 //ищем FAT
 FATOffset=0;
    287c:	10 92 1e 01 	sts	0x011E, r1
    2880:	10 92 1f 01 	sts	0x011F, r1
    2884:	10 92 20 01 	sts	0x0120, r1
    2888:	10 92 21 01 	sts	0x0121, r1
    288c:	ee 24       	eor	r14, r14
    288e:	ff 24       	eor	r15, r15
    2890:	87 01       	movw	r16, r14
 WH1602_SetTextDownLine(str);
 _delay_ms(10000);*/
 
 for(unsigned long fo=0;fo<33554432UL;fo++)
 {
  unsigned char b=GetByte(fo); 
    2892:	c8 01       	movw	r24, r16
    2894:	b7 01       	movw	r22, r14
    2896:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
  if (b==0xE9 || b==0xEB)
    289a:	69 3e       	cpi	r22, 0xE9	; 233
    289c:	11 f0       	breq	.+4      	; 0x28a2 <FAT_Init+0x66>
    289e:	6b 3e       	cpi	r22, 0xEB	; 235
    28a0:	e9 f4       	brne	.+58     	; 0x28dc <FAT_Init+0xa0>
  {
   b=GetByte(fo+511UL);
    28a2:	c8 01       	movw	r24, r16
    28a4:	b7 01       	movw	r22, r14
    28a6:	61 50       	subi	r22, 0x01	; 1
    28a8:	7e 4f       	sbci	r23, 0xFE	; 254
    28aa:	8f 4f       	sbci	r24, 0xFF	; 255
    28ac:	9f 4f       	sbci	r25, 0xFF	; 255
    28ae:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
   if (b==0xAA)   
    28b2:	6a 3a       	cpi	r22, 0xAA	; 170
    28b4:	99 f4       	brne	.+38     	; 0x28dc <FAT_Init+0xa0>
   {
    b=GetByte(fo+510UL);
    28b6:	c8 01       	movw	r24, r16
    28b8:	b7 01       	movw	r22, r14
    28ba:	62 50       	subi	r22, 0x02	; 2
    28bc:	7e 4f       	sbci	r23, 0xFE	; 254
    28be:	8f 4f       	sbci	r24, 0xFF	; 255
    28c0:	9f 4f       	sbci	r25, 0xFF	; 255
    28c2:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    if (b==0x55)
    28c6:	65 35       	cpi	r22, 0x55	; 85
    28c8:	49 f4       	brne	.+18     	; 0x28dc <FAT_Init+0xa0>
	{
     FATOffset=fo;
    28ca:	e0 92 1e 01 	sts	0x011E, r14
    28ce:	f0 92 1f 01 	sts	0x011F, r15
    28d2:	00 93 20 01 	sts	0x0120, r16
    28d6:	10 93 21 01 	sts	0x0121, r17
    28da:	0e c0       	rjmp	.+28     	; 0x28f8 <FAT_Init+0xbc>
 char str[16];
 sprintf(str,"%x %x %x",a,b,c);
 WH1602_SetTextDownLine(str);
 _delay_ms(10000);*/
 
 for(unsigned long fo=0;fo<33554432UL;fo++)
    28dc:	08 94       	sec
    28de:	e1 1c       	adc	r14, r1
    28e0:	f1 1c       	adc	r15, r1
    28e2:	01 1d       	adc	r16, r1
    28e4:	11 1d       	adc	r17, r1
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	e2 16       	cp	r14, r18
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	f2 06       	cpc	r15, r18
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	02 07       	cpc	r16, r18
    28f2:	22 e0       	ldi	r18, 0x02	; 2
    28f4:	12 07       	cpc	r17, r18
    28f6:	69 f6       	brne	.-102    	; 0x2892 <FAT_Init+0x56>
     break;
	}
   } 
  }
 }
 LastReadSector=0xffffffffUL;
    28f8:	8f ef       	ldi	r24, 0xFF	; 255
    28fa:	9f ef       	ldi	r25, 0xFF	; 255
    28fc:	af ef       	ldi	r26, 0xFF	; 255
    28fe:	bf ef       	ldi	r27, 0xFF	; 255
    2900:	80 93 12 01 	sts	0x0112, r24
    2904:	90 93 13 01 	sts	0x0113, r25
    2908:	a0 93 14 01 	sts	0x0114, r26
    290c:	b0 93 15 01 	sts	0x0115, r27
 
 SecPerClus=GetByte(BPB_SecPerClus);//количество секторов в кластере
    2910:	6d e0       	ldi	r22, 0x0D	; 13
    2912:	70 e0       	ldi	r23, 0x00	; 0
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    291c:	60 93 45 03 	sts	0x0345, r22
    2920:	70 93 46 03 	sts	0x0346, r23
    2924:	80 93 47 03 	sts	0x0347, r24
    2928:	90 93 48 03 	sts	0x0348, r25
 BytsPerSec=GetShort(BPB_BytsPerSec);//количество байт в секторе
    292c:	6b e0       	ldi	r22, 0x0B	; 11
    292e:	70 e0       	ldi	r23, 0x00	; 0
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	0e 94 42 06 	call	0xc84	; 0xc84 <GetShort>
    2938:	60 93 6d 03 	sts	0x036D, r22
    293c:	70 93 6e 03 	sts	0x036E, r23
    2940:	80 93 6f 03 	sts	0x036F, r24
    2944:	90 93 70 03 	sts	0x0370, r25
 ResvdSecCnt=GetShort(BPB_ResvdSecCnt);//размер резервной области
    2948:	6e e0       	ldi	r22, 0x0E	; 14
    294a:	70 e0       	ldi	r23, 0x00	; 0
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	0e 94 42 06 	call	0xc84	; 0xc84 <GetShort>
    2954:	60 93 4d 03 	sts	0x034D, r22
    2958:	70 93 4e 03 	sts	0x034E, r23
    295c:	80 93 4f 03 	sts	0x034F, r24
    2960:	90 93 50 03 	sts	0x0350, r25
 
 //определяем количество секторов, занятых корневой директорией 
 RootDirSectors=(unsigned long)(ceil((GetShort(BPB_RootEntCnt)*32UL+(BytsPerSec-1UL))/BytsPerSec));
    2964:	61 e1       	ldi	r22, 0x11	; 17
    2966:	70 e0       	ldi	r23, 0x00	; 0
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	0e 94 42 06 	call	0xc84	; 0xc84 <GetShort>
    2970:	7b 01       	movw	r14, r22
    2972:	8c 01       	movw	r16, r24
    2974:	20 91 6d 03 	lds	r18, 0x036D
    2978:	30 91 6e 03 	lds	r19, 0x036E
    297c:	40 91 6f 03 	lds	r20, 0x036F
    2980:	50 91 70 03 	lds	r21, 0x0370
    2984:	ca 01       	movw	r24, r20
    2986:	b9 01       	movw	r22, r18
    2988:	61 50       	subi	r22, 0x01	; 1
    298a:	70 40       	sbci	r23, 0x00	; 0
    298c:	80 40       	sbci	r24, 0x00	; 0
    298e:	90 40       	sbci	r25, 0x00	; 0
    2990:	e5 e0       	ldi	r30, 0x05	; 5
    2992:	ee 0c       	add	r14, r14
    2994:	ff 1c       	adc	r15, r15
    2996:	00 1f       	adc	r16, r16
    2998:	11 1f       	adc	r17, r17
    299a:	ea 95       	dec	r30
    299c:	d1 f7       	brne	.-12     	; 0x2992 <FAT_Init+0x156>
    299e:	6e 0d       	add	r22, r14
    29a0:	7f 1d       	adc	r23, r15
    29a2:	80 1f       	adc	r24, r16
    29a4:	91 1f       	adc	r25, r17
    29a6:	0e 94 09 18 	call	0x3012	; 0x3012 <__udivmodsi4>
    29aa:	ca 01       	movw	r24, r20
    29ac:	b9 01       	movw	r22, r18
    29ae:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__floatunsisf>
    29b2:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <ceil>
    29b6:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__fixunssfsi>
    29ba:	60 93 79 03 	sts	0x0379, r22
    29be:	70 93 7a 03 	sts	0x037A, r23
    29c2:	80 93 7b 03 	sts	0x037B, r24
    29c6:	90 93 7c 03 	sts	0x037C, r25
 //определяем размер таблицы FAT
 FATSz=GetShort(BPB_FATSz16);//размер одной таблицы FAT в секторах
    29ca:	66 e1       	ldi	r22, 0x16	; 22
    29cc:	70 e0       	ldi	r23, 0x00	; 0
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0e 94 42 06 	call	0xc84	; 0xc84 <GetShort>
    29d6:	60 93 51 03 	sts	0x0351, r22
    29da:	70 93 52 03 	sts	0x0352, r23
    29de:	80 93 53 03 	sts	0x0353, r24
    29e2:	90 93 54 03 	sts	0x0354, r25
 if (FATSz==0) FATSz=GetLong(BPB_FATSz32);
    29e6:	61 15       	cp	r22, r1
    29e8:	71 05       	cpc	r23, r1
    29ea:	81 05       	cpc	r24, r1
    29ec:	91 05       	cpc	r25, r1
    29ee:	71 f4       	brne	.+28     	; 0x2a0c <FAT_Init+0x1d0>
    29f0:	64 e2       	ldi	r22, 0x24	; 36
    29f2:	70 e0       	ldi	r23, 0x00	; 0
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	90 e0       	ldi	r25, 0x00	; 0
    29f8:	0e 94 a0 09 	call	0x1340	; 0x1340 <GetLong>
    29fc:	60 93 51 03 	sts	0x0351, r22
    2a00:	70 93 52 03 	sts	0x0352, r23
    2a04:	80 93 53 03 	sts	0x0353, r24
    2a08:	90 93 54 03 	sts	0x0354, r25
 //определяем количество секторов в регионе данных диска
 unsigned long TotSec=GetShort(BPB_TotSec16);//общее количество секторов на диске
    2a0c:	63 e1       	ldi	r22, 0x13	; 19
    2a0e:	70 e0       	ldi	r23, 0x00	; 0
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	0e 94 42 06 	call	0xc84	; 0xc84 <GetShort>
    2a18:	5b 01       	movw	r10, r22
    2a1a:	6c 01       	movw	r12, r24
 if (TotSec==0) TotSec=GetLong(BPB_TotSec32);
    2a1c:	61 15       	cp	r22, r1
    2a1e:	71 05       	cpc	r23, r1
    2a20:	81 05       	cpc	r24, r1
    2a22:	91 05       	cpc	r25, r1
    2a24:	41 f4       	brne	.+16     	; 0x2a36 <FAT_Init+0x1fa>
    2a26:	60 e2       	ldi	r22, 0x20	; 32
    2a28:	70 e0       	ldi	r23, 0x00	; 0
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	0e 94 a0 09 	call	0x1340	; 0x1340 <GetLong>
    2a32:	5b 01       	movw	r10, r22
    2a34:	6c 01       	movw	r12, r24
 DataSec=TotSec-(ResvdSecCnt+GetByte(BPB_NumFATs)*FATSz+RootDirSectors);
    2a36:	e0 90 4d 03 	lds	r14, 0x034D
    2a3a:	f0 90 4e 03 	lds	r15, 0x034E
    2a3e:	00 91 4f 03 	lds	r16, 0x034F
    2a42:	10 91 50 03 	lds	r17, 0x0350
    2a46:	60 e1       	ldi	r22, 0x10	; 16
    2a48:	70 e0       	ldi	r23, 0x00	; 0
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    2a52:	20 91 79 03 	lds	r18, 0x0379
    2a56:	30 91 7a 03 	lds	r19, 0x037A
    2a5a:	40 91 7b 03 	lds	r20, 0x037B
    2a5e:	50 91 7c 03 	lds	r21, 0x037C
    2a62:	35 01       	movw	r6, r10
    2a64:	46 01       	movw	r8, r12
    2a66:	6e 18       	sub	r6, r14
    2a68:	7f 08       	sbc	r7, r15
    2a6a:	80 0a       	sbc	r8, r16
    2a6c:	91 0a       	sbc	r9, r17
    2a6e:	84 01       	movw	r16, r8
    2a70:	73 01       	movw	r14, r6
    2a72:	e2 1a       	sub	r14, r18
    2a74:	f3 0a       	sbc	r15, r19
    2a76:	04 0b       	sbc	r16, r20
    2a78:	15 0b       	sbc	r17, r21
    2a7a:	20 91 51 03 	lds	r18, 0x0351
    2a7e:	30 91 52 03 	lds	r19, 0x0352
    2a82:	40 91 53 03 	lds	r20, 0x0353
    2a86:	50 91 54 03 	lds	r21, 0x0354
    2a8a:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
    2a8e:	e6 1a       	sub	r14, r22
    2a90:	f7 0a       	sbc	r15, r23
    2a92:	08 0b       	sbc	r16, r24
    2a94:	19 0b       	sbc	r17, r25
    2a96:	e0 92 71 03 	sts	0x0371, r14
    2a9a:	f0 92 72 03 	sts	0x0372, r15
    2a9e:	00 93 73 03 	sts	0x0373, r16
    2aa2:	10 93 74 03 	sts	0x0374, r17
 //определяем количество кластеров для данных (которые начинаются с номера 2! Это КОЛИЧЕСТВО, а не номер последнего кластера)
 CountofClusters=(unsigned long)floor(DataSec/SecPerClus);
    2aa6:	20 91 45 03 	lds	r18, 0x0345
    2aaa:	30 91 46 03 	lds	r19, 0x0346
    2aae:	40 91 47 03 	lds	r20, 0x0347
    2ab2:	50 91 48 03 	lds	r21, 0x0348
    2ab6:	c8 01       	movw	r24, r16
    2ab8:	b7 01       	movw	r22, r14
    2aba:	0e 94 09 18 	call	0x3012	; 0x3012 <__udivmodsi4>
    2abe:	ca 01       	movw	r24, r20
    2ac0:	b9 01       	movw	r22, r18
    2ac2:	0e 94 31 17 	call	0x2e62	; 0x2e62 <__floatunsisf>
    2ac6:	0e 94 6e 17 	call	0x2edc	; 0x2edc <floor>
    2aca:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <__fixunssfsi>
    2ace:	60 93 75 03 	sts	0x0375, r22
    2ad2:	70 93 76 03 	sts	0x0376, r23
    2ad6:	80 93 77 03 	sts	0x0377, r24
    2ada:	90 93 78 03 	sts	0x0378, r25
 //определяем первый сектор данных
 FirstDataSector=ResvdSecCnt+(GetByte(BPB_NumFATs)*FATSz)+RootDirSectors;
    2ade:	e0 90 4d 03 	lds	r14, 0x034D
    2ae2:	f0 90 4e 03 	lds	r15, 0x034E
    2ae6:	00 91 4f 03 	lds	r16, 0x034F
    2aea:	10 91 50 03 	lds	r17, 0x0350
    2aee:	60 e1       	ldi	r22, 0x10	; 16
    2af0:	70 e0       	ldi	r23, 0x00	; 0
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    2afa:	20 91 79 03 	lds	r18, 0x0379
    2afe:	30 91 7a 03 	lds	r19, 0x037A
    2b02:	40 91 7b 03 	lds	r20, 0x037B
    2b06:	50 91 7c 03 	lds	r21, 0x037C
    2b0a:	e2 0e       	add	r14, r18
    2b0c:	f3 1e       	adc	r15, r19
    2b0e:	04 1f       	adc	r16, r20
    2b10:	15 1f       	adc	r17, r21
    2b12:	20 91 51 03 	lds	r18, 0x0351
    2b16:	30 91 52 03 	lds	r19, 0x0352
    2b1a:	40 91 53 03 	lds	r20, 0x0353
    2b1e:	50 91 54 03 	lds	r21, 0x0354
    2b22:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
    2b26:	e6 0e       	add	r14, r22
    2b28:	f7 1e       	adc	r15, r23
    2b2a:	08 1f       	adc	r16, r24
    2b2c:	19 1f       	adc	r17, r25
    2b2e:	e0 92 41 03 	sts	0x0341, r14
    2b32:	f0 92 42 03 	sts	0x0342, r15
    2b36:	00 93 43 03 	sts	0x0343, r16
    2b3a:	10 93 44 03 	sts	0x0344, r17
 //определим тип файловой системы

 FATType=FAT12;
    2b3e:	10 92 22 01 	sts	0x0122, r1
 WH1602_SetTextProgmemUpLine(Text_FAT_Type);
    2b42:	8e e9       	ldi	r24, 0x9E	; 158
    2b44:	91 e0       	ldi	r25, 0x01	; 1
    2b46:	0e 94 42 03 	call	0x684	; 0x684 <WH1602_SetTextProgmemUpLine>
 if (CountofClusters<4085UL)
    2b4a:	80 91 75 03 	lds	r24, 0x0375
    2b4e:	90 91 76 03 	lds	r25, 0x0376
    2b52:	a0 91 77 03 	lds	r26, 0x0377
    2b56:	b0 91 78 03 	lds	r27, 0x0378
    2b5a:	85 3f       	cpi	r24, 0xF5	; 245
    2b5c:	2f e0       	ldi	r18, 0x0F	; 15
    2b5e:	92 07       	cpc	r25, r18
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	a2 07       	cpc	r26, r18
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	b2 07       	cpc	r27, r18
    2b68:	80 f4       	brcc	.+32     	; 0x2b8a <FAT_Init+0x34e>
 {
  WH1602_SetTextProgmemDownLine(Text_FAT12);
    2b6a:	84 ed       	ldi	r24, 0xD4	; 212
    2b6c:	91 e0       	ldi	r25, 0x01	; 1
    2b6e:	0e 94 ad 03 	call	0x75a	; 0x75a <WH1602_SetTextProgmemDownLine>
    2b72:	80 e5       	ldi	r24, 0x50	; 80
    2b74:	93 ec       	ldi	r25, 0xC3	; 195
    2b76:	20 e9       	ldi	r18, 0x90	; 144
    2b78:	31 e0       	ldi	r19, 0x01	; 1
    2b7a:	f9 01       	movw	r30, r18
    2b7c:	31 97       	sbiw	r30, 0x01	; 1
    2b7e:	f1 f7       	brne	.-4      	; 0x2b7c <FAT_Init+0x340>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b80:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b82:	d9 f7       	brne	.-10     	; 0x2b7a <FAT_Init+0x33e>
  _delay_ms(5000);
  FATType=FAT12;
    2b84:	10 92 22 01 	sts	0x0122, r1
    2b88:	24 c0       	rjmp	.+72     	; 0x2bd2 <FAT_Init+0x396>
 }
 else
 {
  if (CountofClusters<65525UL)
    2b8a:	85 5f       	subi	r24, 0xF5	; 245
    2b8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b8e:	a0 40       	sbci	r26, 0x00	; 0
    2b90:	b0 40       	sbci	r27, 0x00	; 0
    2b92:	78 f4       	brcc	.+30     	; 0x2bb2 <FAT_Init+0x376>
  {
   WH1602_SetTextProgmemDownLine(Text_FAT16);
    2b94:	82 ec       	ldi	r24, 0xC2	; 194
    2b96:	91 e0       	ldi	r25, 0x01	; 1
    2b98:	0e 94 ad 03 	call	0x75a	; 0x75a <WH1602_SetTextProgmemDownLine>
    2b9c:	80 e2       	ldi	r24, 0x20	; 32
    2b9e:	9e e4       	ldi	r25, 0x4E	; 78
    2ba0:	20 e9       	ldi	r18, 0x90	; 144
    2ba2:	31 e0       	ldi	r19, 0x01	; 1
    2ba4:	f9 01       	movw	r30, r18
    2ba6:	31 97       	sbiw	r30, 0x01	; 1
    2ba8:	f1 f7       	brne	.-4      	; 0x2ba6 <FAT_Init+0x36a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2baa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bac:	d9 f7       	brne	.-10     	; 0x2ba4 <FAT_Init+0x368>
   _delay_ms(2000);
   FATType=FAT16;
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	0e c0       	rjmp	.+28     	; 0x2bce <FAT_Init+0x392>
  }
  else
  {
   WH1602_SetTextProgmemDownLine(Text_FAT32);
    2bb2:	80 eb       	ldi	r24, 0xB0	; 176
    2bb4:	91 e0       	ldi	r25, 0x01	; 1
    2bb6:	0e 94 ad 03 	call	0x75a	; 0x75a <WH1602_SetTextProgmemDownLine>
    2bba:	80 e5       	ldi	r24, 0x50	; 80
    2bbc:	93 ec       	ldi	r25, 0xC3	; 195
    2bbe:	20 e9       	ldi	r18, 0x90	; 144
    2bc0:	31 e0       	ldi	r19, 0x01	; 1
    2bc2:	f9 01       	movw	r30, r18
    2bc4:	31 97       	sbiw	r30, 0x01	; 1
    2bc6:	f1 f7       	brne	.-4      	; 0x2bc4 <FAT_Init+0x388>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bca:	d9 f7       	brne	.-10     	; 0x2bc2 <FAT_Init+0x386>
   _delay_ms(5000);
   FATType=FAT32;
    2bcc:	82 e0       	ldi	r24, 0x02	; 2
    2bce:	80 93 22 01 	sts	0x0122, r24
  }
 }
 if (FATType==FAT12) return;//не поддерживаем
    2bd2:	80 91 22 01 	lds	r24, 0x0122
    2bd6:	88 23       	and	r24, r24
    2bd8:	09 f4       	brne	.+2      	; 0x2bdc <FAT_Init+0x3a0>
    2bda:	95 c0       	rjmp	.+298    	; 0x2d06 <FAT_Init+0x4ca>
 if (FATType==FAT32) return;//не поддерживаем
    2bdc:	82 30       	cpi	r24, 0x02	; 2
    2bde:	09 f4       	brne	.+2      	; 0x2be2 <FAT_Init+0x3a6>
    2be0:	92 c0       	rjmp	.+292    	; 0x2d06 <FAT_Init+0x4ca>
 //определяем начало корневой директории (для FAT16 - это сектор и отдельная область, для FAT32 - это ФАЙЛ в области данных с кластером BPB_RootClus)
 FirstRootFolderSecNum=ResvdSecCnt+(GetByte(BPB_NumFATs)*FATSz);
    2be2:	a0 90 4d 03 	lds	r10, 0x034D
    2be6:	b0 90 4e 03 	lds	r11, 0x034E
    2bea:	c0 90 4f 03 	lds	r12, 0x034F
    2bee:	d0 90 50 03 	lds	r13, 0x0350
    2bf2:	60 e1       	ldi	r22, 0x10	; 16
    2bf4:	70 e0       	ldi	r23, 0x00	; 0
    2bf6:	80 e0       	ldi	r24, 0x00	; 0
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <GetByte>
    2bfe:	20 91 51 03 	lds	r18, 0x0351
    2c02:	30 91 52 03 	lds	r19, 0x0352
    2c06:	40 91 53 03 	lds	r20, 0x0353
    2c0a:	50 91 54 03 	lds	r21, 0x0354
    2c0e:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
    2c12:	7b 01       	movw	r14, r22
    2c14:	8c 01       	movw	r16, r24
    2c16:	ea 0c       	add	r14, r10
    2c18:	fb 1c       	adc	r15, r11
    2c1a:	0c 1d       	adc	r16, r12
    2c1c:	1d 1d       	adc	r17, r13
    2c1e:	e0 92 49 03 	sts	0x0349, r14
    2c22:	f0 92 4a 03 	sts	0x034A, r15
    2c26:	00 93 4b 03 	sts	0x034B, r16
    2c2a:	10 93 4c 03 	sts	0x034C, r17
 ClusterSize=SecPerClus*BytsPerSec;//размер кластера в байтах 
    2c2e:	a0 90 6d 03 	lds	r10, 0x036D
    2c32:	b0 90 6e 03 	lds	r11, 0x036E
    2c36:	c0 90 6f 03 	lds	r12, 0x036F
    2c3a:	d0 90 70 03 	lds	r13, 0x0370
    2c3e:	20 91 45 03 	lds	r18, 0x0345
    2c42:	30 91 46 03 	lds	r19, 0x0346
    2c46:	40 91 47 03 	lds	r20, 0x0347
    2c4a:	50 91 48 03 	lds	r21, 0x0348
    2c4e:	c6 01       	movw	r24, r12
    2c50:	b5 01       	movw	r22, r10
    2c52:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
    2c56:	60 93 7d 03 	sts	0x037D, r22
    2c5a:	70 93 7e 03 	sts	0x037E, r23
    2c5e:	80 93 7f 03 	sts	0x037F, r24
    2c62:	90 93 80 03 	sts	0x0380, r25

 //читаем корневую директорию
 FirstRootFolderAddr=FirstRootFolderSecNum*BytsPerSec;//начальный адрес корневой директории
    2c66:	c8 01       	movw	r24, r16
    2c68:	b7 01       	movw	r22, r14
    2c6a:	a6 01       	movw	r20, r12
    2c6c:	95 01       	movw	r18, r10
    2c6e:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
    2c72:	7b 01       	movw	r14, r22
    2c74:	8c 01       	movw	r16, r24
    2c76:	60 93 81 03 	sts	0x0381, r22
    2c7a:	70 93 82 03 	sts	0x0382, r23
    2c7e:	80 93 83 03 	sts	0x0383, r24
    2c82:	90 93 84 03 	sts	0x0384, r25
 //настраиваем структуру для поиска внутри директории
 sFATRecordPointer.BeginFolderAddr=FirstRootFolderAddr;//начальный адрес имён файлов внутри директории
    2c86:	60 93 55 03 	sts	0x0355, r22
    2c8a:	70 93 56 03 	sts	0x0356, r23
    2c8e:	80 93 57 03 	sts	0x0357, r24
    2c92:	90 93 58 03 	sts	0x0358, r25
 sFATRecordPointer.CurrentFolderAddr=sFATRecordPointer.BeginFolderAddr;//текущий адрес имён файлов внутри директории
    2c96:	60 93 59 03 	sts	0x0359, r22
    2c9a:	70 93 5a 03 	sts	0x035A, r23
    2c9e:	80 93 5b 03 	sts	0x035B, r24
    2ca2:	90 93 5c 03 	sts	0x035C, r25
 sFATRecordPointer.BeginFolderCluster=0;//начальный кластер имени файла внутри директории
    2ca6:	10 92 5d 03 	sts	0x035D, r1
    2caa:	10 92 5e 03 	sts	0x035E, r1
    2cae:	10 92 5f 03 	sts	0x035F, r1
    2cb2:	10 92 60 03 	sts	0x0360, r1
 sFATRecordPointer.CurrentFolderCluster=0;//текущий кластер имени файла внутри директории
    2cb6:	10 92 61 03 	sts	0x0361, r1
    2cba:	10 92 62 03 	sts	0x0362, r1
    2cbe:	10 92 63 03 	sts	0x0363, r1
    2cc2:	10 92 64 03 	sts	0x0364, r1
 sFATRecordPointer.EndFolderClusterAddr=sFATRecordPointer.BeginFolderAddr+(RootDirSectors*BytsPerSec);//конечный адрес имён файлов внутри директории (или кластера)
    2cc6:	20 91 79 03 	lds	r18, 0x0379
    2cca:	30 91 7a 03 	lds	r19, 0x037A
    2cce:	40 91 7b 03 	lds	r20, 0x037B
    2cd2:	50 91 7c 03 	lds	r21, 0x037C
    2cd6:	c6 01       	movw	r24, r12
    2cd8:	b5 01       	movw	r22, r10
    2cda:	0e 94 ea 17 	call	0x2fd4	; 0x2fd4 <__mulsi3>
    2cde:	6e 0d       	add	r22, r14
    2ce0:	7f 1d       	adc	r23, r15
    2ce2:	80 1f       	adc	r24, r16
    2ce4:	91 1f       	adc	r25, r17
    2ce6:	60 93 69 03 	sts	0x0369, r22
    2cea:	70 93 6a 03 	sts	0x036A, r23
    2cee:	80 93 6b 03 	sts	0x036B, r24
    2cf2:	90 93 6c 03 	sts	0x036C, r25
 sFATRecordPointer.BeginFolderClusterAddr=sFATRecordPointer.CurrentFolderAddr;//адрес начального кластера директории
    2cf6:	e0 92 65 03 	sts	0x0365, r14
    2cfa:	f0 92 66 03 	sts	0x0366, r15
    2cfe:	00 93 67 03 	sts	0x0367, r16
    2d02:	10 93 68 03 	sts	0x0368, r17
}
    2d06:	1f 91       	pop	r17
    2d08:	0f 91       	pop	r16
    2d0a:	ff 90       	pop	r15
    2d0c:	ef 90       	pop	r14
    2d0e:	df 90       	pop	r13
    2d10:	cf 90       	pop	r12
    2d12:	bf 90       	pop	r11
    2d14:	af 90       	pop	r10
    2d16:	9f 90       	pop	r9
    2d18:	8f 90       	pop	r8
    2d1a:	7f 90       	pop	r7
    2d1c:	6f 90       	pop	r6
    2d1e:	08 95       	ret

00002d20 <main>:

//----------------------------------------------------------------------------------------------------
//основная функция программы
//----------------------------------------------------------------------------------------------------
int main(void)
{ 
    2d20:	1f 93       	push	r17
    2d22:	cf 93       	push	r28
    2d24:	df 93       	push	r29
 InitAVR();
    2d26:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <InitAVR>
 DRAM_Init();
    2d2a:	0e 94 12 01 	call	0x224	; 0x224 <DRAM_Init>
 WH1602_Init(); 
    2d2e:	0e 94 1a 02 	call	0x434	; 0x434 <WH1602_Init>
 SD_Init();
    2d32:	0e 94 3d 13 	call	0x267a	; 0x267a <SD_Init>
 FAT_Init();
    2d36:	0e 94 1e 14 	call	0x283c	; 0x283c <FAT_Init>
    2d3a:	10 e0       	ldi	r17, 0x00	; 0
    2d3c:	c0 e9       	ldi	r28, 0x90	; 144
    2d3e:	d1 e0       	ldi	r29, 0x01	; 1
    2d40:	01 c0       	rjmp	.+2      	; 0x2d44 <main+0x24>
    2d42:	13 e0       	ldi	r17, 0x03	; 3
 //запускаем основное меню
 unsigned char select_item=0;
 while(1)
 {  
  WH1602_SetTextProgmemUpLine(Text_Main_Menu_Select);
    2d44:	84 e5       	ldi	r24, 0x54	; 84
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	0e 94 42 03 	call	0x684	; 0x684 <WH1602_SetTextProgmemUpLine>
  if (select_item==0) strcpy(string,"> Магнитофон x1 <");
    2d4c:	11 23       	and	r17, r17
    2d4e:	29 f4       	brne	.+10     	; 0x2d5a <main+0x3a>
    2d50:	88 e2       	ldi	r24, 0x28	; 40
    2d52:	93 e0       	ldi	r25, 0x03	; 3
    2d54:	68 ec       	ldi	r22, 0xC8	; 200
    2d56:	70 e0       	ldi	r23, 0x00	; 0
    2d58:	14 c0       	rjmp	.+40     	; 0x2d82 <main+0x62>
  if (select_item==1) strcpy(string,"> Магнитофон x2 <");
    2d5a:	11 30       	cpi	r17, 0x01	; 1
    2d5c:	29 f4       	brne	.+10     	; 0x2d68 <main+0x48>
    2d5e:	88 e2       	ldi	r24, 0x28	; 40
    2d60:	93 e0       	ldi	r25, 0x03	; 3
    2d62:	6a ed       	ldi	r22, 0xDA	; 218
    2d64:	70 e0       	ldi	r23, 0x00	; 0
    2d66:	0d c0       	rjmp	.+26     	; 0x2d82 <main+0x62>
  if (select_item==2) strcpy(string,"> Магнитофон x4 <"); 
    2d68:	12 30       	cpi	r17, 0x02	; 2
    2d6a:	29 f4       	brne	.+10     	; 0x2d76 <main+0x56>
    2d6c:	88 e2       	ldi	r24, 0x28	; 40
    2d6e:	93 e0       	ldi	r25, 0x03	; 3
    2d70:	6c ee       	ldi	r22, 0xEC	; 236
    2d72:	70 e0       	ldi	r23, 0x00	; 0
    2d74:	06 c0       	rjmp	.+12     	; 0x2d82 <main+0x62>
  if (select_item==3) strcpy(string,">  Тест памяти  <");
    2d76:	13 30       	cpi	r17, 0x03	; 3
    2d78:	31 f4       	brne	.+12     	; 0x2d86 <main+0x66>
    2d7a:	88 e2       	ldi	r24, 0x28	; 40
    2d7c:	93 e0       	ldi	r25, 0x03	; 3
    2d7e:	6e ef       	ldi	r22, 0xFE	; 254
    2d80:	70 e0       	ldi	r23, 0x00	; 0
    2d82:	0e 94 2b 18 	call	0x3056	; 0x3056 <strcpy>
  WH1602_SetTextDownLine(string); 
    2d86:	88 e2       	ldi	r24, 0x28	; 40
    2d88:	93 e0       	ldi	r25, 0x03	; 3
    2d8a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <WH1602_SetTextDownLine>
    2d8e:	88 e8       	ldi	r24, 0x88	; 136
    2d90:	93 e1       	ldi	r25, 0x13	; 19
    2d92:	fe 01       	movw	r30, r28
    2d94:	31 97       	sbiw	r30, 0x01	; 1
    2d96:	f1 f7       	brne	.-4      	; 0x2d94 <main+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d98:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9a:	d9 f7       	brne	.-10     	; 0x2d92 <main+0x72>
  _delay_ms(500);
  //ждём нажатий кнопок
  while(1)
  {
   if (BUTTON_UP_PIN&(1<<BUTTON_UP))
    2d9c:	83 9b       	sbis	0x10, 3	; 16
    2d9e:	04 c0       	rjmp	.+8      	; 0x2da8 <main+0x88>
   {
    if (select_item==0) select_item=3;
    2da0:	11 23       	and	r17, r17
    2da2:	79 f2       	breq	.-98     	; 0x2d42 <main+0x22>
                   else select_item--;
    2da4:	11 50       	subi	r17, 0x01	; 1
    2da6:	ce cf       	rjmp	.-100    	; 0x2d44 <main+0x24>
    break;
   }
   if (BUTTON_DOWN_PIN&(1<<BUTTON_DOWN))
    2da8:	81 9b       	sbis	0x10, 1	; 16
    2daa:	06 c0       	rjmp	.+12     	; 0x2db8 <main+0x98>
   {
    if (select_item==3) select_item=0;
    2dac:	13 30       	cpi	r17, 0x03	; 3
    2dae:	11 f4       	brne	.+4      	; 0x2db4 <main+0x94>
    2db0:	10 e0       	ldi	r17, 0x00	; 0
    2db2:	c8 cf       	rjmp	.-112    	; 0x2d44 <main+0x24>
                   else select_item++;       
    2db4:	1f 5f       	subi	r17, 0xFF	; 255
    2db6:	c6 cf       	rjmp	.-116    	; 0x2d44 <main+0x24>
    break;
   }
   if (BUTTON_SELECT_PIN&(1<<BUTTON_SELECT))
    2db8:	84 9b       	sbis	0x10, 4	; 16
    2dba:	f0 cf       	rjmp	.-32     	; 0x2d9c <main+0x7c>
   {
    if (select_item==0) 
    2dbc:	11 23       	and	r17, r17
    2dbe:	19 f4       	brne	.+6      	; 0x2dc6 <main+0xa6>
	{
	 Speed=0;
    2dc0:	10 92 27 01 	sts	0x0127, r1
    2dc4:	06 c0       	rjmp	.+12     	; 0x2dd2 <main+0xb2>
	 TapeMenu();
	}
    if (select_item==1) 
    2dc6:	11 30       	cpi	r17, 0x01	; 1
    2dc8:	11 f0       	breq	.+4      	; 0x2dce <main+0xae>
	{
	 Speed=1;
	 TapeMenu();
	}
    if (select_item==2)
    2dca:	12 30       	cpi	r17, 0x02	; 2
    2dcc:	29 f4       	brne	.+10     	; 0x2dd8 <main+0xb8>
	{
	 Speed=2;
    2dce:	10 93 27 01 	sts	0x0127, r17
     TapeMenu();
    2dd2:	0e 94 ff 11 	call	0x23fe	; 0x23fe <TapeMenu>
    2dd6:	b6 cf       	rjmp	.-148    	; 0x2d44 <main+0x24>
	}
    if (select_item==3) MemoryTest();
    2dd8:	13 30       	cpi	r17, 0x03	; 3
    2dda:	09 f0       	breq	.+2      	; 0x2dde <main+0xbe>
    2ddc:	b3 cf       	rjmp	.-154    	; 0x2d44 <main+0x24>
    2dde:	0e 94 12 11 	call	0x2224	; 0x2224 <MemoryTest>
    2de2:	b0 cf       	rjmp	.-160    	; 0x2d44 <main+0x24>

00002de4 <ceil>:
    2de4:	d9 d0       	rcall	.+434    	; 0x2f98 <__fp_trunc>
    2de6:	80 f0       	brcs	.+32     	; 0x2e08 <ceil+0x24>
    2de8:	9f 37       	cpi	r25, 0x7F	; 127
    2dea:	40 f4       	brcc	.+16     	; 0x2dfc <ceil+0x18>
    2dec:	91 11       	cpse	r25, r1
    2dee:	0e f4       	brtc	.+2      	; 0x2df2 <ceil+0xe>
    2df0:	eb c0       	rjmp	.+470    	; 0x2fc8 <__fp_szero>
    2df2:	60 e0       	ldi	r22, 0x00	; 0
    2df4:	70 e0       	ldi	r23, 0x00	; 0
    2df6:	80 e8       	ldi	r24, 0x80	; 128
    2df8:	9f e3       	ldi	r25, 0x3F	; 63
    2dfa:	08 95       	ret
    2dfc:	26 f0       	brts	.+8      	; 0x2e06 <ceil+0x22>
    2dfe:	1b 16       	cp	r1, r27
    2e00:	61 1d       	adc	r22, r1
    2e02:	71 1d       	adc	r23, r1
    2e04:	81 1d       	adc	r24, r1
    2e06:	7d c0       	rjmp	.+250    	; 0x2f02 <__fp_mintl>
    2e08:	97 c0       	rjmp	.+302    	; 0x2f38 <__fp_mpack>

00002e0a <__fixunssfsi>:
    2e0a:	ac d0       	rcall	.+344    	; 0x2f64 <__fp_splitA>
    2e0c:	88 f0       	brcs	.+34     	; 0x2e30 <__fixunssfsi+0x26>
    2e0e:	9f 57       	subi	r25, 0x7F	; 127
    2e10:	90 f0       	brcs	.+36     	; 0x2e36 <__fixunssfsi+0x2c>
    2e12:	b9 2f       	mov	r27, r25
    2e14:	99 27       	eor	r25, r25
    2e16:	b7 51       	subi	r27, 0x17	; 23
    2e18:	a0 f0       	brcs	.+40     	; 0x2e42 <__fixunssfsi+0x38>
    2e1a:	d1 f0       	breq	.+52     	; 0x2e50 <__fixunssfsi+0x46>
    2e1c:	66 0f       	add	r22, r22
    2e1e:	77 1f       	adc	r23, r23
    2e20:	88 1f       	adc	r24, r24
    2e22:	99 1f       	adc	r25, r25
    2e24:	1a f0       	brmi	.+6      	; 0x2e2c <__fixunssfsi+0x22>
    2e26:	ba 95       	dec	r27
    2e28:	c9 f7       	brne	.-14     	; 0x2e1c <__fixunssfsi+0x12>
    2e2a:	12 c0       	rjmp	.+36     	; 0x2e50 <__fixunssfsi+0x46>
    2e2c:	b1 30       	cpi	r27, 0x01	; 1
    2e2e:	81 f0       	breq	.+32     	; 0x2e50 <__fixunssfsi+0x46>
    2e30:	ca d0       	rcall	.+404    	; 0x2fc6 <__fp_zero>
    2e32:	b1 e0       	ldi	r27, 0x01	; 1
    2e34:	08 95       	ret
    2e36:	c7 c0       	rjmp	.+398    	; 0x2fc6 <__fp_zero>
    2e38:	67 2f       	mov	r22, r23
    2e3a:	78 2f       	mov	r23, r24
    2e3c:	88 27       	eor	r24, r24
    2e3e:	b8 5f       	subi	r27, 0xF8	; 248
    2e40:	39 f0       	breq	.+14     	; 0x2e50 <__fixunssfsi+0x46>
    2e42:	b9 3f       	cpi	r27, 0xF9	; 249
    2e44:	cc f3       	brlt	.-14     	; 0x2e38 <__fixunssfsi+0x2e>
    2e46:	86 95       	lsr	r24
    2e48:	77 95       	ror	r23
    2e4a:	67 95       	ror	r22
    2e4c:	b3 95       	inc	r27
    2e4e:	d9 f7       	brne	.-10     	; 0x2e46 <__fixunssfsi+0x3c>
    2e50:	3e f4       	brtc	.+14     	; 0x2e60 <__fixunssfsi+0x56>
    2e52:	90 95       	com	r25
    2e54:	80 95       	com	r24
    2e56:	70 95       	com	r23
    2e58:	61 95       	neg	r22
    2e5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e5c:	8f 4f       	sbci	r24, 0xFF	; 255
    2e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e60:	08 95       	ret

00002e62 <__floatunsisf>:
    2e62:	e8 94       	clt
    2e64:	09 c0       	rjmp	.+18     	; 0x2e78 <__floatsisf+0x12>

00002e66 <__floatsisf>:
    2e66:	97 fb       	bst	r25, 7
    2e68:	3e f4       	brtc	.+14     	; 0x2e78 <__floatsisf+0x12>
    2e6a:	90 95       	com	r25
    2e6c:	80 95       	com	r24
    2e6e:	70 95       	com	r23
    2e70:	61 95       	neg	r22
    2e72:	7f 4f       	sbci	r23, 0xFF	; 255
    2e74:	8f 4f       	sbci	r24, 0xFF	; 255
    2e76:	9f 4f       	sbci	r25, 0xFF	; 255
    2e78:	99 23       	and	r25, r25
    2e7a:	a9 f0       	breq	.+42     	; 0x2ea6 <__floatsisf+0x40>
    2e7c:	f9 2f       	mov	r31, r25
    2e7e:	96 e9       	ldi	r25, 0x96	; 150
    2e80:	bb 27       	eor	r27, r27
    2e82:	93 95       	inc	r25
    2e84:	f6 95       	lsr	r31
    2e86:	87 95       	ror	r24
    2e88:	77 95       	ror	r23
    2e8a:	67 95       	ror	r22
    2e8c:	b7 95       	ror	r27
    2e8e:	f1 11       	cpse	r31, r1
    2e90:	f8 cf       	rjmp	.-16     	; 0x2e82 <__floatsisf+0x1c>
    2e92:	fa f4       	brpl	.+62     	; 0x2ed2 <__floatsisf+0x6c>
    2e94:	bb 0f       	add	r27, r27
    2e96:	11 f4       	brne	.+4      	; 0x2e9c <__floatsisf+0x36>
    2e98:	60 ff       	sbrs	r22, 0
    2e9a:	1b c0       	rjmp	.+54     	; 0x2ed2 <__floatsisf+0x6c>
    2e9c:	6f 5f       	subi	r22, 0xFF	; 255
    2e9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ea4:	16 c0       	rjmp	.+44     	; 0x2ed2 <__floatsisf+0x6c>
    2ea6:	88 23       	and	r24, r24
    2ea8:	11 f0       	breq	.+4      	; 0x2eae <__floatsisf+0x48>
    2eaa:	96 e9       	ldi	r25, 0x96	; 150
    2eac:	11 c0       	rjmp	.+34     	; 0x2ed0 <__floatsisf+0x6a>
    2eae:	77 23       	and	r23, r23
    2eb0:	21 f0       	breq	.+8      	; 0x2eba <__floatsisf+0x54>
    2eb2:	9e e8       	ldi	r25, 0x8E	; 142
    2eb4:	87 2f       	mov	r24, r23
    2eb6:	76 2f       	mov	r23, r22
    2eb8:	05 c0       	rjmp	.+10     	; 0x2ec4 <__floatsisf+0x5e>
    2eba:	66 23       	and	r22, r22
    2ebc:	71 f0       	breq	.+28     	; 0x2eda <__floatsisf+0x74>
    2ebe:	96 e8       	ldi	r25, 0x86	; 134
    2ec0:	86 2f       	mov	r24, r22
    2ec2:	70 e0       	ldi	r23, 0x00	; 0
    2ec4:	60 e0       	ldi	r22, 0x00	; 0
    2ec6:	2a f0       	brmi	.+10     	; 0x2ed2 <__floatsisf+0x6c>
    2ec8:	9a 95       	dec	r25
    2eca:	66 0f       	add	r22, r22
    2ecc:	77 1f       	adc	r23, r23
    2ece:	88 1f       	adc	r24, r24
    2ed0:	da f7       	brpl	.-10     	; 0x2ec8 <__floatsisf+0x62>
    2ed2:	88 0f       	add	r24, r24
    2ed4:	96 95       	lsr	r25
    2ed6:	87 95       	ror	r24
    2ed8:	97 f9       	bld	r25, 7
    2eda:	08 95       	ret

00002edc <floor>:
    2edc:	5d d0       	rcall	.+186    	; 0x2f98 <__fp_trunc>
    2ede:	80 f0       	brcs	.+32     	; 0x2f00 <floor+0x24>
    2ee0:	9f 37       	cpi	r25, 0x7F	; 127
    2ee2:	40 f4       	brcc	.+16     	; 0x2ef4 <floor+0x18>
    2ee4:	91 11       	cpse	r25, r1
    2ee6:	0e f0       	brts	.+2      	; 0x2eea <floor+0xe>
    2ee8:	6f c0       	rjmp	.+222    	; 0x2fc8 <__fp_szero>
    2eea:	60 e0       	ldi	r22, 0x00	; 0
    2eec:	70 e0       	ldi	r23, 0x00	; 0
    2eee:	80 e8       	ldi	r24, 0x80	; 128
    2ef0:	9f eb       	ldi	r25, 0xBF	; 191
    2ef2:	08 95       	ret
    2ef4:	26 f4       	brtc	.+8      	; 0x2efe <floor+0x22>
    2ef6:	1b 16       	cp	r1, r27
    2ef8:	61 1d       	adc	r22, r1
    2efa:	71 1d       	adc	r23, r1
    2efc:	81 1d       	adc	r24, r1
    2efe:	01 c0       	rjmp	.+2      	; 0x2f02 <__fp_mintl>
    2f00:	1b c0       	rjmp	.+54     	; 0x2f38 <__fp_mpack>

00002f02 <__fp_mintl>:
    2f02:	88 23       	and	r24, r24
    2f04:	71 f4       	brne	.+28     	; 0x2f22 <__fp_mintl+0x20>
    2f06:	77 23       	and	r23, r23
    2f08:	21 f0       	breq	.+8      	; 0x2f12 <__fp_mintl+0x10>
    2f0a:	98 50       	subi	r25, 0x08	; 8
    2f0c:	87 2b       	or	r24, r23
    2f0e:	76 2f       	mov	r23, r22
    2f10:	07 c0       	rjmp	.+14     	; 0x2f20 <__fp_mintl+0x1e>
    2f12:	66 23       	and	r22, r22
    2f14:	11 f4       	brne	.+4      	; 0x2f1a <__fp_mintl+0x18>
    2f16:	99 27       	eor	r25, r25
    2f18:	0d c0       	rjmp	.+26     	; 0x2f34 <__fp_mintl+0x32>
    2f1a:	90 51       	subi	r25, 0x10	; 16
    2f1c:	86 2b       	or	r24, r22
    2f1e:	70 e0       	ldi	r23, 0x00	; 0
    2f20:	60 e0       	ldi	r22, 0x00	; 0
    2f22:	2a f0       	brmi	.+10     	; 0x2f2e <__fp_mintl+0x2c>
    2f24:	9a 95       	dec	r25
    2f26:	66 0f       	add	r22, r22
    2f28:	77 1f       	adc	r23, r23
    2f2a:	88 1f       	adc	r24, r24
    2f2c:	da f7       	brpl	.-10     	; 0x2f24 <__fp_mintl+0x22>
    2f2e:	88 0f       	add	r24, r24
    2f30:	96 95       	lsr	r25
    2f32:	87 95       	ror	r24
    2f34:	97 f9       	bld	r25, 7
    2f36:	08 95       	ret

00002f38 <__fp_mpack>:
    2f38:	9f 3f       	cpi	r25, 0xFF	; 255
    2f3a:	31 f0       	breq	.+12     	; 0x2f48 <__fp_mpack_finite+0xc>

00002f3c <__fp_mpack_finite>:
    2f3c:	91 50       	subi	r25, 0x01	; 1
    2f3e:	20 f4       	brcc	.+8      	; 0x2f48 <__fp_mpack_finite+0xc>
    2f40:	87 95       	ror	r24
    2f42:	77 95       	ror	r23
    2f44:	67 95       	ror	r22
    2f46:	b7 95       	ror	r27
    2f48:	88 0f       	add	r24, r24
    2f4a:	91 1d       	adc	r25, r1
    2f4c:	96 95       	lsr	r25
    2f4e:	87 95       	ror	r24
    2f50:	97 f9       	bld	r25, 7
    2f52:	08 95       	ret

00002f54 <__fp_split3>:
    2f54:	57 fd       	sbrc	r21, 7
    2f56:	90 58       	subi	r25, 0x80	; 128
    2f58:	44 0f       	add	r20, r20
    2f5a:	55 1f       	adc	r21, r21
    2f5c:	59 f0       	breq	.+22     	; 0x2f74 <__fp_splitA+0x10>
    2f5e:	5f 3f       	cpi	r21, 0xFF	; 255
    2f60:	71 f0       	breq	.+28     	; 0x2f7e <__fp_splitA+0x1a>
    2f62:	47 95       	ror	r20

00002f64 <__fp_splitA>:
    2f64:	88 0f       	add	r24, r24
    2f66:	97 fb       	bst	r25, 7
    2f68:	99 1f       	adc	r25, r25
    2f6a:	61 f0       	breq	.+24     	; 0x2f84 <__fp_splitA+0x20>
    2f6c:	9f 3f       	cpi	r25, 0xFF	; 255
    2f6e:	79 f0       	breq	.+30     	; 0x2f8e <__fp_splitA+0x2a>
    2f70:	87 95       	ror	r24
    2f72:	08 95       	ret
    2f74:	12 16       	cp	r1, r18
    2f76:	13 06       	cpc	r1, r19
    2f78:	14 06       	cpc	r1, r20
    2f7a:	55 1f       	adc	r21, r21
    2f7c:	f2 cf       	rjmp	.-28     	; 0x2f62 <__fp_split3+0xe>
    2f7e:	46 95       	lsr	r20
    2f80:	f1 df       	rcall	.-30     	; 0x2f64 <__fp_splitA>
    2f82:	08 c0       	rjmp	.+16     	; 0x2f94 <__fp_splitA+0x30>
    2f84:	16 16       	cp	r1, r22
    2f86:	17 06       	cpc	r1, r23
    2f88:	18 06       	cpc	r1, r24
    2f8a:	99 1f       	adc	r25, r25
    2f8c:	f1 cf       	rjmp	.-30     	; 0x2f70 <__fp_splitA+0xc>
    2f8e:	86 95       	lsr	r24
    2f90:	71 05       	cpc	r23, r1
    2f92:	61 05       	cpc	r22, r1
    2f94:	08 94       	sec
    2f96:	08 95       	ret

00002f98 <__fp_trunc>:
    2f98:	e5 df       	rcall	.-54     	; 0x2f64 <__fp_splitA>
    2f9a:	a0 f0       	brcs	.+40     	; 0x2fc4 <__fp_trunc+0x2c>
    2f9c:	be e7       	ldi	r27, 0x7E	; 126
    2f9e:	b9 17       	cp	r27, r25
    2fa0:	88 f4       	brcc	.+34     	; 0x2fc4 <__fp_trunc+0x2c>
    2fa2:	bb 27       	eor	r27, r27
    2fa4:	9f 38       	cpi	r25, 0x8F	; 143
    2fa6:	60 f4       	brcc	.+24     	; 0x2fc0 <__fp_trunc+0x28>
    2fa8:	16 16       	cp	r1, r22
    2faa:	b1 1d       	adc	r27, r1
    2fac:	67 2f       	mov	r22, r23
    2fae:	78 2f       	mov	r23, r24
    2fb0:	88 27       	eor	r24, r24
    2fb2:	98 5f       	subi	r25, 0xF8	; 248
    2fb4:	f7 cf       	rjmp	.-18     	; 0x2fa4 <__fp_trunc+0xc>
    2fb6:	86 95       	lsr	r24
    2fb8:	77 95       	ror	r23
    2fba:	67 95       	ror	r22
    2fbc:	b1 1d       	adc	r27, r1
    2fbe:	93 95       	inc	r25
    2fc0:	96 39       	cpi	r25, 0x96	; 150
    2fc2:	c8 f3       	brcs	.-14     	; 0x2fb6 <__fp_trunc+0x1e>
    2fc4:	08 95       	ret

00002fc6 <__fp_zero>:
    2fc6:	e8 94       	clt

00002fc8 <__fp_szero>:
    2fc8:	bb 27       	eor	r27, r27
    2fca:	66 27       	eor	r22, r22
    2fcc:	77 27       	eor	r23, r23
    2fce:	cb 01       	movw	r24, r22
    2fd0:	97 f9       	bld	r25, 7
    2fd2:	08 95       	ret

00002fd4 <__mulsi3>:
    2fd4:	62 9f       	mul	r22, r18
    2fd6:	d0 01       	movw	r26, r0
    2fd8:	73 9f       	mul	r23, r19
    2fda:	f0 01       	movw	r30, r0
    2fdc:	82 9f       	mul	r24, r18
    2fde:	e0 0d       	add	r30, r0
    2fe0:	f1 1d       	adc	r31, r1
    2fe2:	64 9f       	mul	r22, r20
    2fe4:	e0 0d       	add	r30, r0
    2fe6:	f1 1d       	adc	r31, r1
    2fe8:	92 9f       	mul	r25, r18
    2fea:	f0 0d       	add	r31, r0
    2fec:	83 9f       	mul	r24, r19
    2fee:	f0 0d       	add	r31, r0
    2ff0:	74 9f       	mul	r23, r20
    2ff2:	f0 0d       	add	r31, r0
    2ff4:	65 9f       	mul	r22, r21
    2ff6:	f0 0d       	add	r31, r0
    2ff8:	99 27       	eor	r25, r25
    2ffa:	72 9f       	mul	r23, r18
    2ffc:	b0 0d       	add	r27, r0
    2ffe:	e1 1d       	adc	r30, r1
    3000:	f9 1f       	adc	r31, r25
    3002:	63 9f       	mul	r22, r19
    3004:	b0 0d       	add	r27, r0
    3006:	e1 1d       	adc	r30, r1
    3008:	f9 1f       	adc	r31, r25
    300a:	bd 01       	movw	r22, r26
    300c:	cf 01       	movw	r24, r30
    300e:	11 24       	eor	r1, r1
    3010:	08 95       	ret

00003012 <__udivmodsi4>:
    3012:	a1 e2       	ldi	r26, 0x21	; 33
    3014:	1a 2e       	mov	r1, r26
    3016:	aa 1b       	sub	r26, r26
    3018:	bb 1b       	sub	r27, r27
    301a:	fd 01       	movw	r30, r26
    301c:	0d c0       	rjmp	.+26     	; 0x3038 <__udivmodsi4_ep>

0000301e <__udivmodsi4_loop>:
    301e:	aa 1f       	adc	r26, r26
    3020:	bb 1f       	adc	r27, r27
    3022:	ee 1f       	adc	r30, r30
    3024:	ff 1f       	adc	r31, r31
    3026:	a2 17       	cp	r26, r18
    3028:	b3 07       	cpc	r27, r19
    302a:	e4 07       	cpc	r30, r20
    302c:	f5 07       	cpc	r31, r21
    302e:	20 f0       	brcs	.+8      	; 0x3038 <__udivmodsi4_ep>
    3030:	a2 1b       	sub	r26, r18
    3032:	b3 0b       	sbc	r27, r19
    3034:	e4 0b       	sbc	r30, r20
    3036:	f5 0b       	sbc	r31, r21

00003038 <__udivmodsi4_ep>:
    3038:	66 1f       	adc	r22, r22
    303a:	77 1f       	adc	r23, r23
    303c:	88 1f       	adc	r24, r24
    303e:	99 1f       	adc	r25, r25
    3040:	1a 94       	dec	r1
    3042:	69 f7       	brne	.-38     	; 0x301e <__udivmodsi4_loop>
    3044:	60 95       	com	r22
    3046:	70 95       	com	r23
    3048:	80 95       	com	r24
    304a:	90 95       	com	r25
    304c:	9b 01       	movw	r18, r22
    304e:	ac 01       	movw	r20, r24
    3050:	bd 01       	movw	r22, r26
    3052:	cf 01       	movw	r24, r30
    3054:	08 95       	ret

00003056 <strcpy>:
    3056:	fb 01       	movw	r30, r22
    3058:	dc 01       	movw	r26, r24
    305a:	01 90       	ld	r0, Z+
    305c:	0d 92       	st	X+, r0
    305e:	00 20       	and	r0, r0
    3060:	e1 f7       	brne	.-8      	; 0x305a <strcpy+0x4>
    3062:	08 95       	ret

00003064 <sprintf>:
    3064:	ae e0       	ldi	r26, 0x0E	; 14
    3066:	b0 e0       	ldi	r27, 0x00	; 0
    3068:	e8 e3       	ldi	r30, 0x38	; 56
    306a:	f8 e1       	ldi	r31, 0x18	; 24
    306c:	0c 94 e1 1a 	jmp	0x35c2	; 0x35c2 <__prologue_saves__+0x1c>
    3070:	0d 89       	ldd	r16, Y+21	; 0x15
    3072:	1e 89       	ldd	r17, Y+22	; 0x16
    3074:	86 e0       	ldi	r24, 0x06	; 6
    3076:	8c 83       	std	Y+4, r24	; 0x04
    3078:	1a 83       	std	Y+2, r17	; 0x02
    307a:	09 83       	std	Y+1, r16	; 0x01
    307c:	8f ef       	ldi	r24, 0xFF	; 255
    307e:	9f e7       	ldi	r25, 0x7F	; 127
    3080:	9e 83       	std	Y+6, r25	; 0x06
    3082:	8d 83       	std	Y+5, r24	; 0x05
    3084:	9e 01       	movw	r18, r28
    3086:	27 5e       	subi	r18, 0xE7	; 231
    3088:	3f 4f       	sbci	r19, 0xFF	; 255
    308a:	ce 01       	movw	r24, r28
    308c:	01 96       	adiw	r24, 0x01	; 1
    308e:	6f 89       	ldd	r22, Y+23	; 0x17
    3090:	78 8d       	ldd	r23, Y+24	; 0x18
    3092:	a9 01       	movw	r20, r18
    3094:	0e 94 56 18 	call	0x30ac	; 0x30ac <vfprintf>
    3098:	2f 81       	ldd	r18, Y+7	; 0x07
    309a:	38 85       	ldd	r19, Y+8	; 0x08
    309c:	02 0f       	add	r16, r18
    309e:	13 1f       	adc	r17, r19
    30a0:	f8 01       	movw	r30, r16
    30a2:	10 82       	st	Z, r1
    30a4:	2e 96       	adiw	r28, 0x0e	; 14
    30a6:	e4 e0       	ldi	r30, 0x04	; 4
    30a8:	0c 94 fd 1a 	jmp	0x35fa	; 0x35fa <__epilogue_restores__+0x1c>

000030ac <vfprintf>:
    30ac:	ab e0       	ldi	r26, 0x0B	; 11
    30ae:	b0 e0       	ldi	r27, 0x00	; 0
    30b0:	ec e5       	ldi	r30, 0x5C	; 92
    30b2:	f8 e1       	ldi	r31, 0x18	; 24
    30b4:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <__prologue_saves__>
    30b8:	3c 01       	movw	r6, r24
    30ba:	2b 01       	movw	r4, r22
    30bc:	5a 01       	movw	r10, r20
    30be:	fc 01       	movw	r30, r24
    30c0:	17 82       	std	Z+7, r1	; 0x07
    30c2:	16 82       	std	Z+6, r1	; 0x06
    30c4:	83 81       	ldd	r24, Z+3	; 0x03
    30c6:	81 fd       	sbrc	r24, 1
    30c8:	03 c0       	rjmp	.+6      	; 0x30d0 <vfprintf+0x24>
    30ca:	6f ef       	ldi	r22, 0xFF	; 255
    30cc:	7f ef       	ldi	r23, 0xFF	; 255
    30ce:	c6 c1       	rjmp	.+908    	; 0x345c <vfprintf+0x3b0>
    30d0:	9a e0       	ldi	r25, 0x0A	; 10
    30d2:	89 2e       	mov	r8, r25
    30d4:	1e 01       	movw	r2, r28
    30d6:	08 94       	sec
    30d8:	21 1c       	adc	r2, r1
    30da:	31 1c       	adc	r3, r1
    30dc:	f3 01       	movw	r30, r6
    30de:	23 81       	ldd	r18, Z+3	; 0x03
    30e0:	f2 01       	movw	r30, r4
    30e2:	23 fd       	sbrc	r18, 3
    30e4:	85 91       	lpm	r24, Z+
    30e6:	23 ff       	sbrs	r18, 3
    30e8:	81 91       	ld	r24, Z+
    30ea:	2f 01       	movw	r4, r30
    30ec:	88 23       	and	r24, r24
    30ee:	09 f4       	brne	.+2      	; 0x30f2 <vfprintf+0x46>
    30f0:	b2 c1       	rjmp	.+868    	; 0x3456 <vfprintf+0x3aa>
    30f2:	85 32       	cpi	r24, 0x25	; 37
    30f4:	39 f4       	brne	.+14     	; 0x3104 <vfprintf+0x58>
    30f6:	23 fd       	sbrc	r18, 3
    30f8:	85 91       	lpm	r24, Z+
    30fa:	23 ff       	sbrs	r18, 3
    30fc:	81 91       	ld	r24, Z+
    30fe:	2f 01       	movw	r4, r30
    3100:	85 32       	cpi	r24, 0x25	; 37
    3102:	29 f4       	brne	.+10     	; 0x310e <vfprintf+0x62>
    3104:	90 e0       	ldi	r25, 0x00	; 0
    3106:	b3 01       	movw	r22, r6
    3108:	0e 94 49 1a 	call	0x3492	; 0x3492 <fputc>
    310c:	e7 cf       	rjmp	.-50     	; 0x30dc <vfprintf+0x30>
    310e:	98 2f       	mov	r25, r24
    3110:	ff 24       	eor	r15, r15
    3112:	ee 24       	eor	r14, r14
    3114:	99 24       	eor	r9, r9
    3116:	ff e1       	ldi	r31, 0x1F	; 31
    3118:	ff 15       	cp	r31, r15
    311a:	d0 f0       	brcs	.+52     	; 0x3150 <vfprintf+0xa4>
    311c:	9b 32       	cpi	r25, 0x2B	; 43
    311e:	69 f0       	breq	.+26     	; 0x313a <vfprintf+0x8e>
    3120:	9c 32       	cpi	r25, 0x2C	; 44
    3122:	28 f4       	brcc	.+10     	; 0x312e <vfprintf+0x82>
    3124:	90 32       	cpi	r25, 0x20	; 32
    3126:	59 f0       	breq	.+22     	; 0x313e <vfprintf+0x92>
    3128:	93 32       	cpi	r25, 0x23	; 35
    312a:	91 f4       	brne	.+36     	; 0x3150 <vfprintf+0xa4>
    312c:	0e c0       	rjmp	.+28     	; 0x314a <vfprintf+0x9e>
    312e:	9d 32       	cpi	r25, 0x2D	; 45
    3130:	49 f0       	breq	.+18     	; 0x3144 <vfprintf+0x98>
    3132:	90 33       	cpi	r25, 0x30	; 48
    3134:	69 f4       	brne	.+26     	; 0x3150 <vfprintf+0xa4>
    3136:	41 e0       	ldi	r20, 0x01	; 1
    3138:	24 c0       	rjmp	.+72     	; 0x3182 <vfprintf+0xd6>
    313a:	52 e0       	ldi	r21, 0x02	; 2
    313c:	f5 2a       	or	r15, r21
    313e:	84 e0       	ldi	r24, 0x04	; 4
    3140:	f8 2a       	or	r15, r24
    3142:	28 c0       	rjmp	.+80     	; 0x3194 <vfprintf+0xe8>
    3144:	98 e0       	ldi	r25, 0x08	; 8
    3146:	f9 2a       	or	r15, r25
    3148:	25 c0       	rjmp	.+74     	; 0x3194 <vfprintf+0xe8>
    314a:	e0 e1       	ldi	r30, 0x10	; 16
    314c:	fe 2a       	or	r15, r30
    314e:	22 c0       	rjmp	.+68     	; 0x3194 <vfprintf+0xe8>
    3150:	f7 fc       	sbrc	r15, 7
    3152:	29 c0       	rjmp	.+82     	; 0x31a6 <vfprintf+0xfa>
    3154:	89 2f       	mov	r24, r25
    3156:	80 53       	subi	r24, 0x30	; 48
    3158:	8a 30       	cpi	r24, 0x0A	; 10
    315a:	70 f4       	brcc	.+28     	; 0x3178 <vfprintf+0xcc>
    315c:	f6 fe       	sbrs	r15, 6
    315e:	05 c0       	rjmp	.+10     	; 0x316a <vfprintf+0xbe>
    3160:	98 9c       	mul	r9, r8
    3162:	90 2c       	mov	r9, r0
    3164:	11 24       	eor	r1, r1
    3166:	98 0e       	add	r9, r24
    3168:	15 c0       	rjmp	.+42     	; 0x3194 <vfprintf+0xe8>
    316a:	e8 9c       	mul	r14, r8
    316c:	e0 2c       	mov	r14, r0
    316e:	11 24       	eor	r1, r1
    3170:	e8 0e       	add	r14, r24
    3172:	f0 e2       	ldi	r31, 0x20	; 32
    3174:	ff 2a       	or	r15, r31
    3176:	0e c0       	rjmp	.+28     	; 0x3194 <vfprintf+0xe8>
    3178:	9e 32       	cpi	r25, 0x2E	; 46
    317a:	29 f4       	brne	.+10     	; 0x3186 <vfprintf+0xda>
    317c:	f6 fc       	sbrc	r15, 6
    317e:	6b c1       	rjmp	.+726    	; 0x3456 <vfprintf+0x3aa>
    3180:	40 e4       	ldi	r20, 0x40	; 64
    3182:	f4 2a       	or	r15, r20
    3184:	07 c0       	rjmp	.+14     	; 0x3194 <vfprintf+0xe8>
    3186:	9c 36       	cpi	r25, 0x6C	; 108
    3188:	19 f4       	brne	.+6      	; 0x3190 <vfprintf+0xe4>
    318a:	50 e8       	ldi	r21, 0x80	; 128
    318c:	f5 2a       	or	r15, r21
    318e:	02 c0       	rjmp	.+4      	; 0x3194 <vfprintf+0xe8>
    3190:	98 36       	cpi	r25, 0x68	; 104
    3192:	49 f4       	brne	.+18     	; 0x31a6 <vfprintf+0xfa>
    3194:	f2 01       	movw	r30, r4
    3196:	23 fd       	sbrc	r18, 3
    3198:	95 91       	lpm	r25, Z+
    319a:	23 ff       	sbrs	r18, 3
    319c:	91 91       	ld	r25, Z+
    319e:	2f 01       	movw	r4, r30
    31a0:	99 23       	and	r25, r25
    31a2:	09 f0       	breq	.+2      	; 0x31a6 <vfprintf+0xfa>
    31a4:	b8 cf       	rjmp	.-144    	; 0x3116 <vfprintf+0x6a>
    31a6:	89 2f       	mov	r24, r25
    31a8:	85 54       	subi	r24, 0x45	; 69
    31aa:	83 30       	cpi	r24, 0x03	; 3
    31ac:	18 f0       	brcs	.+6      	; 0x31b4 <vfprintf+0x108>
    31ae:	80 52       	subi	r24, 0x20	; 32
    31b0:	83 30       	cpi	r24, 0x03	; 3
    31b2:	38 f4       	brcc	.+14     	; 0x31c2 <vfprintf+0x116>
    31b4:	44 e0       	ldi	r20, 0x04	; 4
    31b6:	50 e0       	ldi	r21, 0x00	; 0
    31b8:	a4 0e       	add	r10, r20
    31ba:	b5 1e       	adc	r11, r21
    31bc:	5f e3       	ldi	r21, 0x3F	; 63
    31be:	59 83       	std	Y+1, r21	; 0x01
    31c0:	0f c0       	rjmp	.+30     	; 0x31e0 <vfprintf+0x134>
    31c2:	93 36       	cpi	r25, 0x63	; 99
    31c4:	31 f0       	breq	.+12     	; 0x31d2 <vfprintf+0x126>
    31c6:	93 37       	cpi	r25, 0x73	; 115
    31c8:	79 f0       	breq	.+30     	; 0x31e8 <vfprintf+0x13c>
    31ca:	93 35       	cpi	r25, 0x53	; 83
    31cc:	09 f0       	breq	.+2      	; 0x31d0 <vfprintf+0x124>
    31ce:	56 c0       	rjmp	.+172    	; 0x327c <vfprintf+0x1d0>
    31d0:	20 c0       	rjmp	.+64     	; 0x3212 <vfprintf+0x166>
    31d2:	f5 01       	movw	r30, r10
    31d4:	80 81       	ld	r24, Z
    31d6:	89 83       	std	Y+1, r24	; 0x01
    31d8:	42 e0       	ldi	r20, 0x02	; 2
    31da:	50 e0       	ldi	r21, 0x00	; 0
    31dc:	a4 0e       	add	r10, r20
    31de:	b5 1e       	adc	r11, r21
    31e0:	61 01       	movw	r12, r2
    31e2:	01 e0       	ldi	r16, 0x01	; 1
    31e4:	10 e0       	ldi	r17, 0x00	; 0
    31e6:	12 c0       	rjmp	.+36     	; 0x320c <vfprintf+0x160>
    31e8:	f5 01       	movw	r30, r10
    31ea:	c0 80       	ld	r12, Z
    31ec:	d1 80       	ldd	r13, Z+1	; 0x01
    31ee:	f6 fc       	sbrc	r15, 6
    31f0:	03 c0       	rjmp	.+6      	; 0x31f8 <vfprintf+0x14c>
    31f2:	6f ef       	ldi	r22, 0xFF	; 255
    31f4:	7f ef       	ldi	r23, 0xFF	; 255
    31f6:	02 c0       	rjmp	.+4      	; 0x31fc <vfprintf+0x150>
    31f8:	69 2d       	mov	r22, r9
    31fa:	70 e0       	ldi	r23, 0x00	; 0
    31fc:	42 e0       	ldi	r20, 0x02	; 2
    31fe:	50 e0       	ldi	r21, 0x00	; 0
    3200:	a4 0e       	add	r10, r20
    3202:	b5 1e       	adc	r11, r21
    3204:	c6 01       	movw	r24, r12
    3206:	0e 94 3e 1a 	call	0x347c	; 0x347c <strnlen>
    320a:	8c 01       	movw	r16, r24
    320c:	5f e7       	ldi	r21, 0x7F	; 127
    320e:	f5 22       	and	r15, r21
    3210:	14 c0       	rjmp	.+40     	; 0x323a <vfprintf+0x18e>
    3212:	f5 01       	movw	r30, r10
    3214:	c0 80       	ld	r12, Z
    3216:	d1 80       	ldd	r13, Z+1	; 0x01
    3218:	f6 fc       	sbrc	r15, 6
    321a:	03 c0       	rjmp	.+6      	; 0x3222 <vfprintf+0x176>
    321c:	6f ef       	ldi	r22, 0xFF	; 255
    321e:	7f ef       	ldi	r23, 0xFF	; 255
    3220:	02 c0       	rjmp	.+4      	; 0x3226 <vfprintf+0x17a>
    3222:	69 2d       	mov	r22, r9
    3224:	70 e0       	ldi	r23, 0x00	; 0
    3226:	42 e0       	ldi	r20, 0x02	; 2
    3228:	50 e0       	ldi	r21, 0x00	; 0
    322a:	a4 0e       	add	r10, r20
    322c:	b5 1e       	adc	r11, r21
    322e:	c6 01       	movw	r24, r12
    3230:	0e 94 33 1a 	call	0x3466	; 0x3466 <strnlen_P>
    3234:	8c 01       	movw	r16, r24
    3236:	50 e8       	ldi	r21, 0x80	; 128
    3238:	f5 2a       	or	r15, r21
    323a:	f3 fe       	sbrs	r15, 3
    323c:	07 c0       	rjmp	.+14     	; 0x324c <vfprintf+0x1a0>
    323e:	1a c0       	rjmp	.+52     	; 0x3274 <vfprintf+0x1c8>
    3240:	80 e2       	ldi	r24, 0x20	; 32
    3242:	90 e0       	ldi	r25, 0x00	; 0
    3244:	b3 01       	movw	r22, r6
    3246:	0e 94 49 1a 	call	0x3492	; 0x3492 <fputc>
    324a:	ea 94       	dec	r14
    324c:	8e 2d       	mov	r24, r14
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	08 17       	cp	r16, r24
    3252:	19 07       	cpc	r17, r25
    3254:	a8 f3       	brcs	.-22     	; 0x3240 <vfprintf+0x194>
    3256:	0e c0       	rjmp	.+28     	; 0x3274 <vfprintf+0x1c8>
    3258:	f6 01       	movw	r30, r12
    325a:	f7 fc       	sbrc	r15, 7
    325c:	85 91       	lpm	r24, Z+
    325e:	f7 fe       	sbrs	r15, 7
    3260:	81 91       	ld	r24, Z+
    3262:	6f 01       	movw	r12, r30
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	b3 01       	movw	r22, r6
    3268:	0e 94 49 1a 	call	0x3492	; 0x3492 <fputc>
    326c:	e1 10       	cpse	r14, r1
    326e:	ea 94       	dec	r14
    3270:	01 50       	subi	r16, 0x01	; 1
    3272:	10 40       	sbci	r17, 0x00	; 0
    3274:	01 15       	cp	r16, r1
    3276:	11 05       	cpc	r17, r1
    3278:	79 f7       	brne	.-34     	; 0x3258 <vfprintf+0x1ac>
    327a:	ea c0       	rjmp	.+468    	; 0x3450 <vfprintf+0x3a4>
    327c:	94 36       	cpi	r25, 0x64	; 100
    327e:	11 f0       	breq	.+4      	; 0x3284 <vfprintf+0x1d8>
    3280:	99 36       	cpi	r25, 0x69	; 105
    3282:	69 f5       	brne	.+90     	; 0x32de <vfprintf+0x232>
    3284:	f7 fe       	sbrs	r15, 7
    3286:	08 c0       	rjmp	.+16     	; 0x3298 <vfprintf+0x1ec>
    3288:	f5 01       	movw	r30, r10
    328a:	20 81       	ld	r18, Z
    328c:	31 81       	ldd	r19, Z+1	; 0x01
    328e:	42 81       	ldd	r20, Z+2	; 0x02
    3290:	53 81       	ldd	r21, Z+3	; 0x03
    3292:	84 e0       	ldi	r24, 0x04	; 4
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	0a c0       	rjmp	.+20     	; 0x32ac <vfprintf+0x200>
    3298:	f5 01       	movw	r30, r10
    329a:	80 81       	ld	r24, Z
    329c:	91 81       	ldd	r25, Z+1	; 0x01
    329e:	9c 01       	movw	r18, r24
    32a0:	44 27       	eor	r20, r20
    32a2:	37 fd       	sbrc	r19, 7
    32a4:	40 95       	com	r20
    32a6:	54 2f       	mov	r21, r20
    32a8:	82 e0       	ldi	r24, 0x02	; 2
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	a8 0e       	add	r10, r24
    32ae:	b9 1e       	adc	r11, r25
    32b0:	9f e6       	ldi	r25, 0x6F	; 111
    32b2:	f9 22       	and	r15, r25
    32b4:	57 ff       	sbrs	r21, 7
    32b6:	09 c0       	rjmp	.+18     	; 0x32ca <vfprintf+0x21e>
    32b8:	50 95       	com	r21
    32ba:	40 95       	com	r20
    32bc:	30 95       	com	r19
    32be:	21 95       	neg	r18
    32c0:	3f 4f       	sbci	r19, 0xFF	; 255
    32c2:	4f 4f       	sbci	r20, 0xFF	; 255
    32c4:	5f 4f       	sbci	r21, 0xFF	; 255
    32c6:	e0 e8       	ldi	r30, 0x80	; 128
    32c8:	fe 2a       	or	r15, r30
    32ca:	ca 01       	movw	r24, r20
    32cc:	b9 01       	movw	r22, r18
    32ce:	a1 01       	movw	r20, r2
    32d0:	2a e0       	ldi	r18, 0x0A	; 10
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__ultoa_invert>
    32d8:	d8 2e       	mov	r13, r24
    32da:	d2 18       	sub	r13, r2
    32dc:	40 c0       	rjmp	.+128    	; 0x335e <vfprintf+0x2b2>
    32de:	95 37       	cpi	r25, 0x75	; 117
    32e0:	29 f4       	brne	.+10     	; 0x32ec <vfprintf+0x240>
    32e2:	1f 2d       	mov	r17, r15
    32e4:	1f 7e       	andi	r17, 0xEF	; 239
    32e6:	2a e0       	ldi	r18, 0x0A	; 10
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	1d c0       	rjmp	.+58     	; 0x3326 <vfprintf+0x27a>
    32ec:	1f 2d       	mov	r17, r15
    32ee:	19 7f       	andi	r17, 0xF9	; 249
    32f0:	9f 36       	cpi	r25, 0x6F	; 111
    32f2:	61 f0       	breq	.+24     	; 0x330c <vfprintf+0x260>
    32f4:	90 37       	cpi	r25, 0x70	; 112
    32f6:	20 f4       	brcc	.+8      	; 0x3300 <vfprintf+0x254>
    32f8:	98 35       	cpi	r25, 0x58	; 88
    32fa:	09 f0       	breq	.+2      	; 0x32fe <vfprintf+0x252>
    32fc:	ac c0       	rjmp	.+344    	; 0x3456 <vfprintf+0x3aa>
    32fe:	0f c0       	rjmp	.+30     	; 0x331e <vfprintf+0x272>
    3300:	90 37       	cpi	r25, 0x70	; 112
    3302:	39 f0       	breq	.+14     	; 0x3312 <vfprintf+0x266>
    3304:	98 37       	cpi	r25, 0x78	; 120
    3306:	09 f0       	breq	.+2      	; 0x330a <vfprintf+0x25e>
    3308:	a6 c0       	rjmp	.+332    	; 0x3456 <vfprintf+0x3aa>
    330a:	04 c0       	rjmp	.+8      	; 0x3314 <vfprintf+0x268>
    330c:	28 e0       	ldi	r18, 0x08	; 8
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	0a c0       	rjmp	.+20     	; 0x3326 <vfprintf+0x27a>
    3312:	10 61       	ori	r17, 0x10	; 16
    3314:	14 fd       	sbrc	r17, 4
    3316:	14 60       	ori	r17, 0x04	; 4
    3318:	20 e1       	ldi	r18, 0x10	; 16
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	04 c0       	rjmp	.+8      	; 0x3326 <vfprintf+0x27a>
    331e:	14 fd       	sbrc	r17, 4
    3320:	16 60       	ori	r17, 0x06	; 6
    3322:	20 e1       	ldi	r18, 0x10	; 16
    3324:	32 e0       	ldi	r19, 0x02	; 2
    3326:	17 ff       	sbrs	r17, 7
    3328:	08 c0       	rjmp	.+16     	; 0x333a <vfprintf+0x28e>
    332a:	f5 01       	movw	r30, r10
    332c:	60 81       	ld	r22, Z
    332e:	71 81       	ldd	r23, Z+1	; 0x01
    3330:	82 81       	ldd	r24, Z+2	; 0x02
    3332:	93 81       	ldd	r25, Z+3	; 0x03
    3334:	44 e0       	ldi	r20, 0x04	; 4
    3336:	50 e0       	ldi	r21, 0x00	; 0
    3338:	08 c0       	rjmp	.+16     	; 0x334a <vfprintf+0x29e>
    333a:	f5 01       	movw	r30, r10
    333c:	80 81       	ld	r24, Z
    333e:	91 81       	ldd	r25, Z+1	; 0x01
    3340:	bc 01       	movw	r22, r24
    3342:	80 e0       	ldi	r24, 0x00	; 0
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	42 e0       	ldi	r20, 0x02	; 2
    3348:	50 e0       	ldi	r21, 0x00	; 0
    334a:	a4 0e       	add	r10, r20
    334c:	b5 1e       	adc	r11, r21
    334e:	a1 01       	movw	r20, r2
    3350:	0e 94 75 1a 	call	0x34ea	; 0x34ea <__ultoa_invert>
    3354:	d8 2e       	mov	r13, r24
    3356:	d2 18       	sub	r13, r2
    3358:	8f e7       	ldi	r24, 0x7F	; 127
    335a:	f8 2e       	mov	r15, r24
    335c:	f1 22       	and	r15, r17
    335e:	f6 fe       	sbrs	r15, 6
    3360:	0b c0       	rjmp	.+22     	; 0x3378 <vfprintf+0x2cc>
    3362:	5e ef       	ldi	r21, 0xFE	; 254
    3364:	f5 22       	and	r15, r21
    3366:	d9 14       	cp	r13, r9
    3368:	38 f4       	brcc	.+14     	; 0x3378 <vfprintf+0x2cc>
    336a:	f4 fe       	sbrs	r15, 4
    336c:	07 c0       	rjmp	.+14     	; 0x337c <vfprintf+0x2d0>
    336e:	f2 fc       	sbrc	r15, 2
    3370:	05 c0       	rjmp	.+10     	; 0x337c <vfprintf+0x2d0>
    3372:	8f ee       	ldi	r24, 0xEF	; 239
    3374:	f8 22       	and	r15, r24
    3376:	02 c0       	rjmp	.+4      	; 0x337c <vfprintf+0x2d0>
    3378:	1d 2d       	mov	r17, r13
    337a:	01 c0       	rjmp	.+2      	; 0x337e <vfprintf+0x2d2>
    337c:	19 2d       	mov	r17, r9
    337e:	f4 fe       	sbrs	r15, 4
    3380:	0d c0       	rjmp	.+26     	; 0x339c <vfprintf+0x2f0>
    3382:	fe 01       	movw	r30, r28
    3384:	ed 0d       	add	r30, r13
    3386:	f1 1d       	adc	r31, r1
    3388:	80 81       	ld	r24, Z
    338a:	80 33       	cpi	r24, 0x30	; 48
    338c:	19 f4       	brne	.+6      	; 0x3394 <vfprintf+0x2e8>
    338e:	99 ee       	ldi	r25, 0xE9	; 233
    3390:	f9 22       	and	r15, r25
    3392:	08 c0       	rjmp	.+16     	; 0x33a4 <vfprintf+0x2f8>
    3394:	1f 5f       	subi	r17, 0xFF	; 255
    3396:	f2 fe       	sbrs	r15, 2
    3398:	05 c0       	rjmp	.+10     	; 0x33a4 <vfprintf+0x2f8>
    339a:	03 c0       	rjmp	.+6      	; 0x33a2 <vfprintf+0x2f6>
    339c:	8f 2d       	mov	r24, r15
    339e:	86 78       	andi	r24, 0x86	; 134
    33a0:	09 f0       	breq	.+2      	; 0x33a4 <vfprintf+0x2f8>
    33a2:	1f 5f       	subi	r17, 0xFF	; 255
    33a4:	0f 2d       	mov	r16, r15
    33a6:	f3 fc       	sbrc	r15, 3
    33a8:	14 c0       	rjmp	.+40     	; 0x33d2 <vfprintf+0x326>
    33aa:	f0 fe       	sbrs	r15, 0
    33ac:	0f c0       	rjmp	.+30     	; 0x33cc <vfprintf+0x320>
    33ae:	1e 15       	cp	r17, r14
    33b0:	10 f0       	brcs	.+4      	; 0x33b6 <vfprintf+0x30a>
    33b2:	9d 2c       	mov	r9, r13
    33b4:	0b c0       	rjmp	.+22     	; 0x33cc <vfprintf+0x320>
    33b6:	9d 2c       	mov	r9, r13
    33b8:	9e 0c       	add	r9, r14
    33ba:	91 1a       	sub	r9, r17
    33bc:	1e 2d       	mov	r17, r14
    33be:	06 c0       	rjmp	.+12     	; 0x33cc <vfprintf+0x320>
    33c0:	80 e2       	ldi	r24, 0x20	; 32
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	b3 01       	movw	r22, r6
    33c6:	0e 94 49 1a 	call	0x3492	; 0x3492 <fputc>
    33ca:	1f 5f       	subi	r17, 0xFF	; 255
    33cc:	1e 15       	cp	r17, r14
    33ce:	c0 f3       	brcs	.-16     	; 0x33c0 <vfprintf+0x314>
    33d0:	04 c0       	rjmp	.+8      	; 0x33da <vfprintf+0x32e>
    33d2:	1e 15       	cp	r17, r14
    33d4:	10 f4       	brcc	.+4      	; 0x33da <vfprintf+0x32e>
    33d6:	e1 1a       	sub	r14, r17
    33d8:	01 c0       	rjmp	.+2      	; 0x33dc <vfprintf+0x330>
    33da:	ee 24       	eor	r14, r14
    33dc:	04 ff       	sbrs	r16, 4
    33de:	0f c0       	rjmp	.+30     	; 0x33fe <vfprintf+0x352>
    33e0:	80 e3       	ldi	r24, 0x30	; 48
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	b3 01       	movw	r22, r6
    33e6:	0e 94 49 1a 	call	0x3492	; 0x3492 <fputc>
    33ea:	02 ff       	sbrs	r16, 2
    33ec:	1d c0       	rjmp	.+58     	; 0x3428 <vfprintf+0x37c>
    33ee:	01 fd       	sbrc	r16, 1
    33f0:	03 c0       	rjmp	.+6      	; 0x33f8 <vfprintf+0x34c>
    33f2:	88 e7       	ldi	r24, 0x78	; 120
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	0e c0       	rjmp	.+28     	; 0x3414 <vfprintf+0x368>
    33f8:	88 e5       	ldi	r24, 0x58	; 88
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	0b c0       	rjmp	.+22     	; 0x3414 <vfprintf+0x368>
    33fe:	80 2f       	mov	r24, r16
    3400:	86 78       	andi	r24, 0x86	; 134
    3402:	91 f0       	breq	.+36     	; 0x3428 <vfprintf+0x37c>
    3404:	01 ff       	sbrs	r16, 1
    3406:	02 c0       	rjmp	.+4      	; 0x340c <vfprintf+0x360>
    3408:	8b e2       	ldi	r24, 0x2B	; 43
    340a:	01 c0       	rjmp	.+2      	; 0x340e <vfprintf+0x362>
    340c:	80 e2       	ldi	r24, 0x20	; 32
    340e:	f7 fc       	sbrc	r15, 7
    3410:	8d e2       	ldi	r24, 0x2D	; 45
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	b3 01       	movw	r22, r6
    3416:	0e 94 49 1a 	call	0x3492	; 0x3492 <fputc>
    341a:	06 c0       	rjmp	.+12     	; 0x3428 <vfprintf+0x37c>
    341c:	80 e3       	ldi	r24, 0x30	; 48
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	b3 01       	movw	r22, r6
    3422:	0e 94 49 1a 	call	0x3492	; 0x3492 <fputc>
    3426:	9a 94       	dec	r9
    3428:	d9 14       	cp	r13, r9
    342a:	c0 f3       	brcs	.-16     	; 0x341c <vfprintf+0x370>
    342c:	da 94       	dec	r13
    342e:	f1 01       	movw	r30, r2
    3430:	ed 0d       	add	r30, r13
    3432:	f1 1d       	adc	r31, r1
    3434:	80 81       	ld	r24, Z
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	b3 01       	movw	r22, r6
    343a:	0e 94 49 1a 	call	0x3492	; 0x3492 <fputc>
    343e:	dd 20       	and	r13, r13
    3440:	a9 f7       	brne	.-22     	; 0x342c <vfprintf+0x380>
    3442:	06 c0       	rjmp	.+12     	; 0x3450 <vfprintf+0x3a4>
    3444:	80 e2       	ldi	r24, 0x20	; 32
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	b3 01       	movw	r22, r6
    344a:	0e 94 49 1a 	call	0x3492	; 0x3492 <fputc>
    344e:	ea 94       	dec	r14
    3450:	ee 20       	and	r14, r14
    3452:	c1 f7       	brne	.-16     	; 0x3444 <vfprintf+0x398>
    3454:	43 ce       	rjmp	.-890    	; 0x30dc <vfprintf+0x30>
    3456:	f3 01       	movw	r30, r6
    3458:	66 81       	ldd	r22, Z+6	; 0x06
    345a:	77 81       	ldd	r23, Z+7	; 0x07
    345c:	cb 01       	movw	r24, r22
    345e:	2b 96       	adiw	r28, 0x0b	; 11
    3460:	e2 e1       	ldi	r30, 0x12	; 18
    3462:	0c 94 ef 1a 	jmp	0x35de	; 0x35de <__epilogue_restores__>

00003466 <strnlen_P>:
    3466:	fc 01       	movw	r30, r24
    3468:	05 90       	lpm	r0, Z+
    346a:	61 50       	subi	r22, 0x01	; 1
    346c:	70 40       	sbci	r23, 0x00	; 0
    346e:	01 10       	cpse	r0, r1
    3470:	d8 f7       	brcc	.-10     	; 0x3468 <strnlen_P+0x2>
    3472:	80 95       	com	r24
    3474:	90 95       	com	r25
    3476:	8e 0f       	add	r24, r30
    3478:	9f 1f       	adc	r25, r31
    347a:	08 95       	ret

0000347c <strnlen>:
    347c:	fc 01       	movw	r30, r24
    347e:	61 50       	subi	r22, 0x01	; 1
    3480:	70 40       	sbci	r23, 0x00	; 0
    3482:	01 90       	ld	r0, Z+
    3484:	01 10       	cpse	r0, r1
    3486:	d8 f7       	brcc	.-10     	; 0x347e <strnlen+0x2>
    3488:	80 95       	com	r24
    348a:	90 95       	com	r25
    348c:	8e 0f       	add	r24, r30
    348e:	9f 1f       	adc	r25, r31
    3490:	08 95       	ret

00003492 <fputc>:
    3492:	0f 93       	push	r16
    3494:	1f 93       	push	r17
    3496:	cf 93       	push	r28
    3498:	df 93       	push	r29
    349a:	8c 01       	movw	r16, r24
    349c:	eb 01       	movw	r28, r22
    349e:	8b 81       	ldd	r24, Y+3	; 0x03
    34a0:	81 ff       	sbrs	r24, 1
    34a2:	1b c0       	rjmp	.+54     	; 0x34da <fputc+0x48>
    34a4:	82 ff       	sbrs	r24, 2
    34a6:	0d c0       	rjmp	.+26     	; 0x34c2 <fputc+0x30>
    34a8:	2e 81       	ldd	r18, Y+6	; 0x06
    34aa:	3f 81       	ldd	r19, Y+7	; 0x07
    34ac:	8c 81       	ldd	r24, Y+4	; 0x04
    34ae:	9d 81       	ldd	r25, Y+5	; 0x05
    34b0:	28 17       	cp	r18, r24
    34b2:	39 07       	cpc	r19, r25
    34b4:	64 f4       	brge	.+24     	; 0x34ce <fputc+0x3c>
    34b6:	e8 81       	ld	r30, Y
    34b8:	f9 81       	ldd	r31, Y+1	; 0x01
    34ba:	01 93       	st	Z+, r16
    34bc:	f9 83       	std	Y+1, r31	; 0x01
    34be:	e8 83       	st	Y, r30
    34c0:	06 c0       	rjmp	.+12     	; 0x34ce <fputc+0x3c>
    34c2:	e8 85       	ldd	r30, Y+8	; 0x08
    34c4:	f9 85       	ldd	r31, Y+9	; 0x09
    34c6:	80 2f       	mov	r24, r16
    34c8:	09 95       	icall
    34ca:	89 2b       	or	r24, r25
    34cc:	31 f4       	brne	.+12     	; 0x34da <fputc+0x48>
    34ce:	8e 81       	ldd	r24, Y+6	; 0x06
    34d0:	9f 81       	ldd	r25, Y+7	; 0x07
    34d2:	01 96       	adiw	r24, 0x01	; 1
    34d4:	9f 83       	std	Y+7, r25	; 0x07
    34d6:	8e 83       	std	Y+6, r24	; 0x06
    34d8:	02 c0       	rjmp	.+4      	; 0x34de <fputc+0x4c>
    34da:	0f ef       	ldi	r16, 0xFF	; 255
    34dc:	1f ef       	ldi	r17, 0xFF	; 255
    34de:	c8 01       	movw	r24, r16
    34e0:	df 91       	pop	r29
    34e2:	cf 91       	pop	r28
    34e4:	1f 91       	pop	r17
    34e6:	0f 91       	pop	r16
    34e8:	08 95       	ret

000034ea <__ultoa_invert>:
    34ea:	fa 01       	movw	r30, r20
    34ec:	aa 27       	eor	r26, r26
    34ee:	28 30       	cpi	r18, 0x08	; 8
    34f0:	51 f1       	breq	.+84     	; 0x3546 <__ultoa_invert+0x5c>
    34f2:	20 31       	cpi	r18, 0x10	; 16
    34f4:	81 f1       	breq	.+96     	; 0x3556 <__ultoa_invert+0x6c>
    34f6:	e8 94       	clt
    34f8:	6f 93       	push	r22
    34fa:	6e 7f       	andi	r22, 0xFE	; 254
    34fc:	6e 5f       	subi	r22, 0xFE	; 254
    34fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3500:	8f 4f       	sbci	r24, 0xFF	; 255
    3502:	9f 4f       	sbci	r25, 0xFF	; 255
    3504:	af 4f       	sbci	r26, 0xFF	; 255
    3506:	b1 e0       	ldi	r27, 0x01	; 1
    3508:	3e d0       	rcall	.+124    	; 0x3586 <__ultoa_invert+0x9c>
    350a:	b4 e0       	ldi	r27, 0x04	; 4
    350c:	3c d0       	rcall	.+120    	; 0x3586 <__ultoa_invert+0x9c>
    350e:	67 0f       	add	r22, r23
    3510:	78 1f       	adc	r23, r24
    3512:	89 1f       	adc	r24, r25
    3514:	9a 1f       	adc	r25, r26
    3516:	a1 1d       	adc	r26, r1
    3518:	68 0f       	add	r22, r24
    351a:	79 1f       	adc	r23, r25
    351c:	8a 1f       	adc	r24, r26
    351e:	91 1d       	adc	r25, r1
    3520:	a1 1d       	adc	r26, r1
    3522:	6a 0f       	add	r22, r26
    3524:	71 1d       	adc	r23, r1
    3526:	81 1d       	adc	r24, r1
    3528:	91 1d       	adc	r25, r1
    352a:	a1 1d       	adc	r26, r1
    352c:	20 d0       	rcall	.+64     	; 0x356e <__ultoa_invert+0x84>
    352e:	09 f4       	brne	.+2      	; 0x3532 <__ultoa_invert+0x48>
    3530:	68 94       	set
    3532:	3f 91       	pop	r19
    3534:	2a e0       	ldi	r18, 0x0A	; 10
    3536:	26 9f       	mul	r18, r22
    3538:	11 24       	eor	r1, r1
    353a:	30 19       	sub	r19, r0
    353c:	30 5d       	subi	r19, 0xD0	; 208
    353e:	31 93       	st	Z+, r19
    3540:	de f6       	brtc	.-74     	; 0x34f8 <__ultoa_invert+0xe>
    3542:	cf 01       	movw	r24, r30
    3544:	08 95       	ret
    3546:	46 2f       	mov	r20, r22
    3548:	47 70       	andi	r20, 0x07	; 7
    354a:	40 5d       	subi	r20, 0xD0	; 208
    354c:	41 93       	st	Z+, r20
    354e:	b3 e0       	ldi	r27, 0x03	; 3
    3550:	0f d0       	rcall	.+30     	; 0x3570 <__ultoa_invert+0x86>
    3552:	c9 f7       	brne	.-14     	; 0x3546 <__ultoa_invert+0x5c>
    3554:	f6 cf       	rjmp	.-20     	; 0x3542 <__ultoa_invert+0x58>
    3556:	46 2f       	mov	r20, r22
    3558:	4f 70       	andi	r20, 0x0F	; 15
    355a:	40 5d       	subi	r20, 0xD0	; 208
    355c:	4a 33       	cpi	r20, 0x3A	; 58
    355e:	18 f0       	brcs	.+6      	; 0x3566 <__ultoa_invert+0x7c>
    3560:	49 5d       	subi	r20, 0xD9	; 217
    3562:	31 fd       	sbrc	r19, 1
    3564:	40 52       	subi	r20, 0x20	; 32
    3566:	41 93       	st	Z+, r20
    3568:	02 d0       	rcall	.+4      	; 0x356e <__ultoa_invert+0x84>
    356a:	a9 f7       	brne	.-22     	; 0x3556 <__ultoa_invert+0x6c>
    356c:	ea cf       	rjmp	.-44     	; 0x3542 <__ultoa_invert+0x58>
    356e:	b4 e0       	ldi	r27, 0x04	; 4
    3570:	a6 95       	lsr	r26
    3572:	97 95       	ror	r25
    3574:	87 95       	ror	r24
    3576:	77 95       	ror	r23
    3578:	67 95       	ror	r22
    357a:	ba 95       	dec	r27
    357c:	c9 f7       	brne	.-14     	; 0x3570 <__ultoa_invert+0x86>
    357e:	00 97       	sbiw	r24, 0x00	; 0
    3580:	61 05       	cpc	r22, r1
    3582:	71 05       	cpc	r23, r1
    3584:	08 95       	ret
    3586:	9b 01       	movw	r18, r22
    3588:	ac 01       	movw	r20, r24
    358a:	0a 2e       	mov	r0, r26
    358c:	06 94       	lsr	r0
    358e:	57 95       	ror	r21
    3590:	47 95       	ror	r20
    3592:	37 95       	ror	r19
    3594:	27 95       	ror	r18
    3596:	ba 95       	dec	r27
    3598:	c9 f7       	brne	.-14     	; 0x358c <__ultoa_invert+0xa2>
    359a:	62 0f       	add	r22, r18
    359c:	73 1f       	adc	r23, r19
    359e:	84 1f       	adc	r24, r20
    35a0:	95 1f       	adc	r25, r21
    35a2:	a0 1d       	adc	r26, r0
    35a4:	08 95       	ret

000035a6 <__prologue_saves__>:
    35a6:	2f 92       	push	r2
    35a8:	3f 92       	push	r3
    35aa:	4f 92       	push	r4
    35ac:	5f 92       	push	r5
    35ae:	6f 92       	push	r6
    35b0:	7f 92       	push	r7
    35b2:	8f 92       	push	r8
    35b4:	9f 92       	push	r9
    35b6:	af 92       	push	r10
    35b8:	bf 92       	push	r11
    35ba:	cf 92       	push	r12
    35bc:	df 92       	push	r13
    35be:	ef 92       	push	r14
    35c0:	ff 92       	push	r15
    35c2:	0f 93       	push	r16
    35c4:	1f 93       	push	r17
    35c6:	cf 93       	push	r28
    35c8:	df 93       	push	r29
    35ca:	cd b7       	in	r28, 0x3d	; 61
    35cc:	de b7       	in	r29, 0x3e	; 62
    35ce:	ca 1b       	sub	r28, r26
    35d0:	db 0b       	sbc	r29, r27
    35d2:	0f b6       	in	r0, 0x3f	; 63
    35d4:	f8 94       	cli
    35d6:	de bf       	out	0x3e, r29	; 62
    35d8:	0f be       	out	0x3f, r0	; 63
    35da:	cd bf       	out	0x3d, r28	; 61
    35dc:	09 94       	ijmp

000035de <__epilogue_restores__>:
    35de:	2a 88       	ldd	r2, Y+18	; 0x12
    35e0:	39 88       	ldd	r3, Y+17	; 0x11
    35e2:	48 88       	ldd	r4, Y+16	; 0x10
    35e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    35e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    35e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    35ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    35ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    35ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    35f0:	b9 84       	ldd	r11, Y+9	; 0x09
    35f2:	c8 84       	ldd	r12, Y+8	; 0x08
    35f4:	df 80       	ldd	r13, Y+7	; 0x07
    35f6:	ee 80       	ldd	r14, Y+6	; 0x06
    35f8:	fd 80       	ldd	r15, Y+5	; 0x05
    35fa:	0c 81       	ldd	r16, Y+4	; 0x04
    35fc:	1b 81       	ldd	r17, Y+3	; 0x03
    35fe:	aa 81       	ldd	r26, Y+2	; 0x02
    3600:	b9 81       	ldd	r27, Y+1	; 0x01
    3602:	ce 0f       	add	r28, r30
    3604:	d1 1d       	adc	r29, r1
    3606:	0f b6       	in	r0, 0x3f	; 63
    3608:	f8 94       	cli
    360a:	de bf       	out	0x3e, r29	; 62
    360c:	0f be       	out	0x3f, r0	; 63
    360e:	cd bf       	out	0x3d, r28	; 61
    3610:	ed 01       	movw	r28, r26
    3612:	08 95       	ret

00003614 <_exit>:
    3614:	f8 94       	cli

00003616 <__stop_program>:
    3616:	ff cf       	rjmp	.-2      	; 0x3616 <__stop_program>
